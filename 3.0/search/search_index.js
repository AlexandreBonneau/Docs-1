var __index = Promise.resolve({"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+","tags":true},"docs":[{"location":"faq/","text":"<p></p>","title":"FAQ"},{"location":"faq/#why-expresslrs","text":"Why ExpressLRS? <p>ExpressLRS is competing with some of the best commercial solutions out there, but all are expensive \ud83d\ude41. Well, ELRS is not \ud83d\ude04, it can be set up for around 60$ (Using second-hand r9 hardware). It also is better than many (higher sensitivity, lower latency\ud83d\udc4c).</p>","title":"Why ExpressLRS?"},{"location":"faq/#is-it-better-than-the-commercial-solutions","text":"Is it better than the commercial solutions? <p>It is faster than most links out there with a latency of 6.5ms (at 200hz). At 250hz 100mW 2.4GHz it is capable of ranges 30km+.</p>","title":"Is it better than the commercial solutions?"},{"location":"faq/#which-opentx-version-works-with-expresslrs","text":"Which OpenTX version works with ExpressLRS <p>OpenTX 2.3.12 or newer should work just fine. No need to use OpenTX Nightly, unless you have requirements not present in the Stable versions.</p> <p>EdgeTX 2.4.0 or newer should work too.</p>","title":"Which OpenTX version works with ExpressLRS"},{"location":"faq/#why-do-i-need-to-update-opentx","text":"Why do I need to update OpenTX? <p>ExpressLRS needs your radio to support crsfshot (a.k.a. Mixersync) to work properly. This will give you the lowest possible latency and optimal consistency of the RC link. When your radio does not have crsfshot working, this often shows in your ExpressLRS Lua script. The Lua script top bar will show inconsistent numbers like 0:63 or is stuck at 0:250 at every packet rate rate you select.</p> <p>The Lua script top bar should always show a stable 0/[user selected packet rate]</p> <p>For example: 0/50, 0/150, 0/250, 0/500, ...</p> <p>When that is the case your radio has crsfshot working and you're good to go. Click here to read more on OpenTX.</p>","title":"Why do I need to update OpenTX?"},{"location":"faq/#how-can-i-flashupdate-x-receivermodule","text":"How can I flash/update x receiver/module? <p>See Getting Started page</p>","title":"How can I flash/update x receiver/module?"},{"location":"faq/#will-x-receiver-work-with-y-tx-module-from-z-manufacturer","text":"Will x Receiver work with y TX Module from z Manufacturer? <p>Any Receiver and TX Module from the same Band (2.4GHz or 900Mhz) will work together. Supported R9 receivers will work with the 900Mhz modules from Happy Model, Namimno RC and the R9M, same with the other 900Mhz receivers, DIY or off-the-shelf. Likewise, any 2.4Ghz receivers should work with any 2.4Ghz TX Modules, from any manufacturer and even the DIY ones. This is as long as they have the same binding phrase and configuration options (Regulatory Domain, Performance Options and Extra Data).</p>","title":"Will x Receiver work with y TX Module from z Manufacturer?"},{"location":"faq/#whats-the-difference-between-the-different-happymodel-24ghz-receivers-pp-ep1-ep2","text":"What's the difference between the different Happymodel 2.4GHz receivers (PP, EP1, EP2)? <p>The difference between the PP and the EP1/EP2 is only the processor. The PP is the original design and uses an STM32 while the EP1/EP2 use an ESP82xx. Both offer firmware update through Betaflight passthrough, but the EPx also support firmware upload over wifi. The EP1 is the same as the EP2 except it has a U.FL/IPEX1 connector for an external antenna. The wifi capability of the ESP is not used apart from the update procedure, and the wifi is only enabled shortly after power-up if no TX connection is received (<code>AUTO_WIFI_ON_INTERVAL</code> if bound, 60s otherwise). Receiver performance should be identical between the two. If you're confused by the PP being more expensive, it's because there is a shortage of the STM part.</p>","title":"What's the difference between the different Happymodel 2.4GHz receivers (PP, EP1, EP2)?"},{"location":"faq/#what-is-required-to-achieve-a-500hz-update-rate-on-24ghz","text":"What is required to achieve a 500hz update rate on 2.4ghz? <p>Make sure that your radio is set to use 400K Baud Rate and you're running at least OpenTX 2.3.12 or EdgeTX 2.4.0. These firmware versions have Mixer Sync or CRSFShot.</p> <p>To confirm your update rate is working as intended, you can use the ExpressLRS Lua script to check the current update rate and confirm you are getting 500hz. See Using the Lua Script.</p>","title":"What is required to achieve a 500hz update rate on 2.4ghz?"},{"location":"faq/#how-many-channels-does-elrs-support","text":"How many channels does ELRS support? <p>12 channels(suspicious asterisk). There is not enough bandwidth to support all full-resolution channels. It is possible that future versions would further expand this by sending extra channel data in a slow upload, but it is not a priority for development. Therefore, ELRS provides:</p> <ul> <li>4x full-resolution (10-bit) channels for sticks (CH1-4)</li> <li>Either:<ul> <li>Standard Mode 4x 2-position channels sent every frame (increased to 8x in 1.0; dropped in 2.x), OR</li> <li>HYBRID_SWITCHES_8 Mode 1x 2-position channel, AUX1 (CH5; Must be used for Arming), 6x 2-position/3-position/6-position (AUX2-7) and 1x 16-position (AUX8), OR</li> <li>WIDE HYBRID Mode 1x 2-position channel, AUX1 (CH5; Must be used for Arming), 7x 64 or 128-position channels (AUX2-8). Available via the Lua Script since 2.0.</li> </ul> </li> </ul> <p>See Switch Modes more more details.</p>","title":"How many channels does ELRS support?"},{"location":"faq/#is-my-binding-phrase-a-secret","text":"Is my binding phrase a secret? <p>No, just like what channel your VTX is on is not a secret. The binding phrase is not security, it is anti-collision. If everyone kept their VTX channel a secret, the chances of you blasting someone out of the sky accidentally is pretty high. To provide the best chance of not interfering with other pilots and them not interfering with you, be sure you're not using the same dumb bind phrase as someone else. Express your style with a hilarious or saucy bind phrase.</p>","title":"Is my binding phrase a secret?"},{"location":"faq/#what-does-rqly-tqly-rssi-x2-snr-x2-mean","text":"What does RQLY, TQLY, RSSI x2, SNR x2 mean?    Datapoint Description Range Info     RQly Uplink - link quality (valid packets) 0 - 100 The number of successful packets out of the last 100 from TX. TX \u2192 RX   1RSS Uplink - received signal strength antenna 1 (RSSI) -128 - 0 First antenna RSSI dBm as reported by the RX. Values vary depending on mode, antenna quality, output power and distance. TX \u2192 RX   2RSS Uplink - received signal strength antenna 2 (RSSI)  Second antenna RSSI dBm, for diversity receivers.  TX \u2192 RX   ANT RX active antenna 0 - 1 Active receiver antenna for diversity RX.   RSNR Uplink - signal-to-noise ratio  SNR reported by the RX. Value varies mostly by radio chip and gets lower with distance (once the agc hits its limit). TX \u2192 RX   RFMD Uplink - packet rate 0 - 7 RF Mode Indexes   TPWR Uplink - transmitting power  50mW reported as 0, as CRSF/OpenTX do not have this option   TQly Downlink - link quality (valid packets) 0 - 100 An LQ indicator of telemetry packets received by TX. RX \u2192 TX   TRSS Downlink - received signal strength (RSSI)  RSSI dBm of telemetry packets received by TX. RX \u2192 TX   TSNR Downlink - signal-to-noise ratio  SNR reported by the TX for telemetry packets. RX \u2192 TX","title":"What does RQLY, TQLY, RSSI x2, SNR x2 mean?"},{"location":"gsod/","text":"<p>Review and Expand ExpressLRS User Documentation - expresslrs.org</p>","title":"Google Season of Docs: Project Page"},{"location":"gsod/#about-the-organisation","text":"<p>ExpressLRS (ELRS) is an open source project focusing on developing a radio control (RC) link. The link is primarly designed for first-person view (FPV) crafts (e.g Multicopters, Planes). ELRS aims to provide the best completely open source, high refresh radio control link, minimising latency while maximising range. A vast range of hardware in both 900 Mhz and 2.4 GHz frequencies is available.</p> <p>FPV is a community built on top of open source projects such as flight controller firmware Betaflight and RC handset firmware EdgeTX.  ELRS fills a void for an open source and high performance RC link with an active development team of about 20 volunteers.</p> <p>github.com/ExpressLRS was created nearly 4 years ago and in the past 12 months has experienced significant growth.  Not only in code contributions, but also users and commercial manufacturers releasing ELRS compatible hardware.</p>","title":"About the organisation"},{"location":"gsod/#about-the-project","text":"","title":"About the project"},{"location":"gsod/#the-projects-problem","text":"<p>During early ELRS development users were required to Do It Yourself (DIY) and build their own hardware. This tended to attract tech savvy users. However, in the past 12 months a number of commercial manufacturers have released ELRS compatible hardware. A much wider user group now exists of varying knowledge and initial setup of ELRS can be troublesome. More so for users who are also new to FPV.</p> <p>A review of the existing user documentation by a technical writer, who has not previously been exposed to FPV, will bring a fresh pair of eyes to the project and help identify knowledge gaps.</p>","title":"The project\u2019s problem"},{"location":"gsod/#the-projects-scope","text":"<p>The ExpressLRS GSoD project will:</p> <ul> <li>Introduce the Technical Writer to the FPV community and teach them about flying a FPV multicopter\u2026 Lets try and have some fun first </li> <li>Introduce the Technical Writer to our troubleshooting procedures.</li> <li>This experience will help to identify any knowledge gaps in existing user ELRS documentation.</li> <li>Devs and Advanced Users will provide information on general user queries from project volunteers and assist with documentation on recurring issues.</li> <li>Review documentation used to assist manufacturers where English may not be their first language.</li> <li>Hopefully assist in a major release (ELRS V3) and release notes.</li> </ul> <p>We estimate that this work will take 4-6 months to complete.</p> <p>Work that is out-of-scope of ELRS project: - In-depth PID Tuning of RC vehicles (Multicopter, Fixed - Wing, Boat, Rover). - Auxiliary function of RC vehicles (Mapping, Package Delivery, Pest Control Drone, Weaponry).</p>","title":"The project\u2019s scope"},{"location":"gsod/#measuring-projects-success","text":"<p>The ELRS project runs a Facebook group (8.4k users at time of application) and Discord Server (8.1k users at time of application) to help users troubleshoot setup issues.  A milestone of this work will be to see the number of users posting setup issues reduced, and to have documentation for all common issues presented in a user first perspective and mindset.</p> <p>The project would be a success if we could provide a link to users for 90% of new user questions.</p> <p>ELRS Developers also volunteer a lot of time communicating with commercial manufacturers.  For a majority of the manufacturers English is not their native language and current ELRS documentation may be confusing.  A long term goal of the project is to minimise design errors in commercial hardware releases.</p>","title":"Measuring project\u2019s success"},{"location":"gsod/#timeline","text":"<p>The documentation project will take approximately four to six months. It is expected the initial learning about FPV, Multicopters and ELRS may take 4 - 8 weeks.  During which time the existing documentation can be used and reviewed.  The remaining time will be used updating and expanding existing user, manufacturer, and developer documentation. ELRS has set its next major release goal before November to include release notes coordinated from this project.</p>    Dates Action Items     May - June Learning FPV and ELRS from scratch   July - August Updating and expanding current User and Manufacturer documentation   September - October ELRS V3 release notes and new feature documents   November Project Completion","title":"Timeline"},{"location":"gsod/#proposed-budget","text":"Budget Item Amount Running Total Notes     Technical Writer 10,000 10,000 26 wk, 6 hrs/wk   Technical Writer Hardware 2,000 12,000 FPV Hardware   Volunteer stipends 500 14,500 2 ELRS Devs + 3 Adv User   Total  14,500","title":"Proposed Budget"},{"location":"gsod/#additional-information","text":"<p>The ELRS development team includes a range of expertise, from software professionals, academics, researchers, scientists, and university students.  And we love nothing more than nerding out on all things FPV in our free time </p>","title":"Additional information"},{"location":"hardware/fan-mod/","text":"<p></p> <p>Initially this mod is brought to life by Niklas Voigt and Seba112PL as beta tester and is still a work in progress.. if you have suggestions don't hesitate to contact.</p>  <p>DISCLAIMER</p> <p>Users have experienced temperature issues on R9M that degrades the link quality. We recommend you use the lowest power setting required for your flight and turn on dynamic power at all times (ELRS v2.0+)</p>   <p>Hot Tip</p> <p>It might seem counterintuitive, but using less power might help for longer flight times and more range by reducing the heat. ELRS does not require a lot of energy and looking at the long-range leader board</p>","title":"R9M Fan Mod"},{"location":"hardware/fan-mod/#1w-mod","text":"<p>WARNING</p> <p>With this mod your R9M is still limited to 1W</p>  <p></p> <p>You need a 20x20mm or 25x25mm fan in 5V version.  Both sizes are supported. To secure the fan into the cover you can use 2x M2 screws, a thread is already in the print. U can solder the pins of the fan directly to the 5v port of the R9M or use the Controllable Fan Mod which can control the fan out of software (fan blows only at &gt;250mw). </p> <p>R9M Fan Mod Cover is build out of four Parts and a Sticker:</p> <p></p>","title":"1W Mod"},{"location":"hardware/fan-mod/#download","text":"<ul> <li>R9M-Fan-Case-Cover.stl</li> <li>R9M-Fan-Case-Pins.stl</li> <li>R9M-Fan-Case-XT30.stl</li> <li>R9M-Fan-Case-Standoff.stl (2x)</li> <li>R9M-ExpressLRS-900Mhz.pdf</li> </ul> <p>or from Thingiverse</p>","title":"Download:"},{"location":"hardware/fan-mod/#controllable-fan-mod","text":"<p>Additionally to the fan you'll need one NPN Transistor (e.g. <code>2N4401</code>) or N-Channel MOSFET (e.g. <code>BS170</code> has built-in Shotky-Diode) and a resistor (200-3k7)</p> <p> </p>","title":"Controllable Fan Mod"},{"location":"hardware/fan-mod/#r9m2019-build-notice","text":"<p>The PB9 pad location on the R9M2019 module is a bit different. Please see the photo.</p> <p></p>","title":"R9M2019 Build notice"},{"location":"hardware/fan-mod/#2w-mod","text":"<p>WARNING</p> <p>Only do this if you are comfortable with modding hardware</p>  <p>In addition to the 3D printed Cover &amp; the Controllable Fan Mod you'll need:</p> <ul> <li>Fan + Heatsink <code>\"2507 25MM 25x25x13MM Hydraulic bearing Graphics card Cooling fan with heat sink 5V 12V m.2 SSD Fan with 2pin\"</code></li> <li>Thermalpad 0.5mm <code>\"1pc 100mmx100mmx0.5mm GPU Northbridge IC LED Chipset Heatsink Cooling Conductive Silicone Thermal Pad,100x100x0.5mm w/ 3.2W/M-K\"</code></li> </ul> <p>The screw heads are cut off to reduce height.</p> <p>   </p> <p>If you can see in picture 3, the 5v fan is connected to the power source of the module, so the fan is used with some overvoltage and spins with higher rpm... tested for a long time and should not be a problem for the fan. If you don't know how to allow the 2W in the firmware, don't do this mod!\ud83e\udd26\u200d\u2642\ufe0f</p>","title":"2W Mod"},{"location":"hardware/fan-mod/#here-are-some-makes","text":"<p>   </p>","title":"Here are some makes:"},{"location":"hardware/inverter-mod/","text":"<p></p> <ul> <li>To benefit from the higher bitrate of 400 kilobit per second using <code>OpenTX</code>/<code>EdgeTX</code> you need to add a pullup resistor to the inverter of the serial port on the R9M 2018\ud83d\uddfb\ud83c\udd99</li> <li>Strongly suggested to be done for anybody looking for higher than standard packet rates using <code>ExpressLRS</code> \ud83d\udd2e</li> </ul>","title":"R9M Inverter Mod"},{"location":"hardware/inverter-mod/#identification","text":"<p>\u26a0\ufe0f This is only required for the 2018 version of the module which has a <code>ACCST</code> logo on the case \ud83d\udd0d </p>","title":"Identification"},{"location":"hardware/inverter-mod/#modification","text":"<p>Easy - connect a 300\u03a9 to 1000\u03a9 resistor between the <code>3.3V</code> and inverter pin as shown on the picture \ud83d\udc67</p> <p></p>","title":"Modification"},{"location":"hardware/inverter-mod/#transmitter-notes","text":"<p>Some Radios/Transmitters will require the Inverter/Crossfire Mod depending on the Baud Rate you want to use or you can use. </p>    Radio Baud Rate Inverter/Crossfire Mod R9M ACCST MOD Other Notes     X9D 400000 Not Needed Required See Troubleshooting   X10S Express 400000 Not Needed Required -   X10S 400000 Required. Modding Guide. Required -   X12 400000 Required. Modding Guide. Required -   QX7 400000 Required. Modding Guide. Required See Troubleshooting   QX7 115200 Not Needed Not Needed Max Packet Rate supported is 250Hz   Others 400000+ Not Needed Required TX16S, TX12, T16/T18, etc    <p><code>ACCESS</code> radios doesn't need the Inverter/Crossfire mod.</p>","title":"Transmitter Notes"},{"location":"hardware/pwm-receivers/","text":"<p></p> <p>ExpressLRS now supports direct PWM output from receivers which have been specifically designed for this mode. Any version-compatible TX firmware (e.g. 2.0.0 TX with 2.0.0 RX) works with PWM receivers-- only the RX firmware is specific to PWM. This documentation refers to only receivers with native PWM output, not receivers attached to external CRSF to PWM converters such as the CRServoF or Matek CRSF-PWM-C. PWM frequency is currently locked at 50Hz.</p>","title":"PWM Receivers"},{"location":"hardware/pwm-receivers/#channel-mapping-and-failsafe","text":"<p>The default channel mapping is straight through: CH1 from the TX goes to PWM Output 1, CH2 to Output 2, etc. To change this on ESP-based receivers, allow the receiver to go into WiFi mode then use the webui to configure the mapping. Any input channel can be mapped to any output channel, and the same input can be used for as many outputs as desired. AUX1/CH5 is always 1-bit, so it is likely you'll want to change this mapping to a channel with more resolution.</p> <p></p> <p>Failsafe values are set using this UI as well with values that can range 988us to 2012us. Failsafe is entered if the receiver is connected and a period of 1 second passes without a valid channels packet being received. On startup, no pulses are generated until a transmitter connects, allowing ESC throttle calibration with the standard \"raise the throttle before connecting\" method. The default failsafe value is 1500us for all channels except Output 3, which defaults to 988us.</p>","title":"Channel Mapping and Failsafe"},{"location":"hardware/pwm-receivers/#channel-resolution","text":"<p>PWM output is still subject to the resolution of the ELRS protocol, which means there are still only 4x full resolution channels (10-bit CH1-CH4) and 8x switch channels (CH5-CH12). For the best resolution on the switch channels, use <code>Switch Mode: Wide</code> and a <code>TLM Ratio</code> of <code>1:8</code> to <code>1:256</code> for 7-bit (128 pos) switch channel resolution. Higher TLM Ratios (1:2 and 1:4) are reduced to 6-bit (64 pos) resolution. Remember that switch channels are sent one per packet in Wide mode, taking 8 packets to send all 7 channels (e.g. 150Hz mode 1:64 = 18.657Hz updates to CH6-CH12). AUX1/CH5 is sent in every packet in all switch modes but is only 1-bit (2-pos).</p>","title":"Channel Resolution"},{"location":"hardware/receiver-selection/","text":"<p></p> <p>ExpressLRS is hashtag blessed with the benefit of there being many receivers available from a variety of manufacturers. This begs the question \"Which receiver is best?\" There is no best receiver, there is only which one has the features you want for the price you want to pay in the size you want it. ExpressLRS does not recommend a specific brand or model, but provide the information to help you select the right receiver for your needs.</p>","title":"Receiver Selection"},{"location":"hardware/receiver-selection/#team24","text":"Model Price Size LNA PA Antenna WiFi RTF     Axis Thor RX          Jumper AION Mini RX          Vantac RX    20dBm      BetaFPV Nano 2.4    20dBm      BetaFPV Lite 2.4          DIY Nano 2.4     //     Flywoo EL24E          Flywoo EL24P          Ghost ATTO          GEPRC Nano          GEPRC NanoSE          HappyModel PP          HappyModel EP1          HappyModel EP2          HGLRC 2400RX          iFlight ELRS    20dBm      JHEMCU / HiYOUNGER EP24S          JHEMCU / HiYOUNGER SP24S          JHEMCU / HiYOUNGER RX24T    20dBm?      Matek R24-S    20dBm      Matek R24-D    23dBm      Namimno Flash (ESP)     /     Namimno Flash Diversity(ESP)    21dBm      QuadKopters Nano ?    /     SIYI FR Mini    23dBm      Skystars Nano SS24D    23dBm","title":"Team2.4"},{"location":"hardware/receiver-selection/#team900","text":"Model Price Size LNA PA Antenna WiFi RTF     BetaFPV Nano 900          FrSky R9          HappyModel ES900RX          Jumper R9 Mini          NamimnoRC Voyager          GEPRC Nano","title":"Team900"},{"location":"hardware/receiver-selection/#most-important-column","text":"<ul> <li>Whoops / Toothpicks / Light aircraft Size is probably the most important feature, with a light small receiver and an onboard antenna being the best choice.</li> <li>Racing Quads Size is again most important. Ceramic antennas could be less easily damaged, and the reduced range of tucking it inside the frame is fine due to the short flight range. An external 2.4GHz antenna dipole is still pretty easy to fit and can be tucked away for a small improvement over the ceramic, but comes with Chance of Choppage.</li> <li>Freestyle Quads Minimum size is no longer an issue so Nano-sized receivers (:checkbox-blank:) are the best bet here. A LNA is going to give you better reception behind obstacles. External antennas are a benefit as well, but you need to trade off how unobstructed the antenna will be versus getting it chopped. Diversity is of marginal benefit.</li> <li>Long Range For sure you need an LNA, an external antenna, and a PA to extend the telemetry range. This isn't to say these are required for long range, 5km is achievable on a ceramic antenna receiver with no LNA/PA at 250Hz/100mW with clear line of sight. Diversity is worth a lot more here. For absolute maximum range, Team900 has a clear advantage, but Team2.4 can still reach 30km+.</li> </ul>","title":"Most important column"},{"location":"hardware/receiver-selection/#price","text":"<p>Probably the most important thing on this list for most people. ExpressLRS receivers are very cheap because the developers give their time for free and we pass those savings on to you! Price here instead is broken into classes: dirt cheap (), pretty cheap (), expensive for ELRS (), and Mr Moneybags (). These refer to the refer to the retail price, not the price you can buy the equipment used.</p>","title":"Price"},{"location":"hardware/receiver-selection/#size","text":"<p>The FPV world shook when ELRS released receivers that were half the size of \"nano\" sized receivers, included the antenna onboard, and still had kilometers of range at 250Hz/100mW. A small receiver can fit in tight places, but remember that tucking a tiny receiver's ceramic antenna deep inside a stack behind carbon reduces its performance, which was already compromised by the elimination of amplifiers to make it that small. Size is broken into classes:  (EP2 / Ghost Zepto),  (Crossfire Nano),  (anything bigger). Weight is directly related to size, so there is on separate category for that. Just know that a smol receiver with an external antenna will weigh more than one with a ceramic antenna.</p>","title":"Size"},{"location":"hardware/receiver-selection/#low-noise-amplifier-lna","text":"<p>A Low Noise Amplifier directly adds to your incoming RSSI. Typical gains are in the ballpark of +12dBm which will be observed in the RSSI as being 12dBm higher than it would have been without the LNA. This is because the LNA amplifies the incoming signal coming from the antenna before going to the RF chip, which increases the sensitivity of the receiver by boosting the incoming signal. An LNA also boosts the noise by the same amount so the sensitivity limit will likely be higher than the value quoted by the Lua.</p>","title":"Low Noise Amplifier (LNA)"},{"location":"hardware/receiver-selection/#power-amplifier-pa","text":"<p>A Power Amplifier boosts the outgoing signal strength, and extends telemetry range back to the TX. Without a PA, the power output is limited by the RF chip's max power output itself (around +13dBm 20mW). It works the same way as turning up the power output on the transmitter module, however it is not adjustable. The receiver's output is always run at max power, since it runs a much lower duty cycle than the transmitter does (duty cycle = telemetry ratio). Higher numbers are better.</p>","title":"Power Amplifier (PA)"},{"location":"hardware/receiver-selection/#antenna-type","text":"<p>Antennas are where the invisible waves come and go from the receiver. Ceramic antenna &lt; Mini Dipole (\"Minimortal-T\" style) &lt; sleeved dipole &lt; Half-wave Dipole. Don't ask how many dBm a ceramic antenna lowers your signal, it is not a flat value. Any working external antenna will outperform a ceramic, so the classes below are: Ceramic (), External (), External Diversity ()</p>","title":"Antenna Type"},{"location":"hardware/receiver-selection/#wifi","text":"<p>Many ExpressLRS receivers have integrated wifi with a short range. This is not active during flight, but the receiver can go into wifi mode to allow firmware updates which is pretty convenient.</p>","title":"WiFi"},{"location":"hardware/receiver-selection/#ready-to-fly","text":"<p>Ready To Fly (RTF) here means that it comes with ExpressLRS from the factory and you don't have to convert it from its existing software system (like Ghost or FrSky), which can be a detriment due to needing to solder to tiny pads or buy flashing dongles.</p>","title":"Ready To Fly"},{"location":"hardware/smd-antenna/","text":"<p></p> <p>Have you ever been frustrated that you can't finish a race because your receiver antenna got chopped? Have you ever wished you could build a quad without worrying about how to mount your antenna? If so, the SMD Antenna is for you!  </p> <p></p> <p>This perky little fellow is worse at receiving signals than his snaky brothers, but don't let that deter you! Because of the amazing range of ExpressLRS, he still gets all the range a racer could ever need. The SMD Antenna is available now on Happymodel PP/EP hardware and other 2.4GHz receivers. Take a look at the videos below to see what Mr. SMD can do for you.</p>","title":"SMD Antenna"},{"location":"hardware/smd-antenna/#range-tests","text":"<ul> <li>3km flight on 500hz: https://www.youtube.com/watch?v=kfa6ugX46n8</li> <li>Parking Garage on 500Hz: https://www.youtube.com/watch?v=Fr7CCeni2dY</li> <li>Range Comparison to Dipole: https://www.youtube.com/watch?v=A5w81n5qV1M</li> <li>RSSI Comparison Dipole: https://youtu.be/CnaEe7YZB-Q</li> </ul>","title":"Range Tests"},{"location":"hardware/smd-antenna/#maintenance","text":"<p>Note: The antenna is sorta fragile and can break off or be melted by a stray soldering iron. If this happens, you can save your receiver by soldering a U.FL/IPEX1 connector onto the pads like shown here. Just make sure the center pin has continuity with the filter at the other end of the trace, and no continuity with ground.  </p> <p></p> <p>Conversely, the SMD antenna can be soldered to regular U.FL footprints if you're brave.  </p> <p></p>","title":"Maintenance"},{"location":"hardware/spi-receivers/","text":"<p></p> <p>A few Flight Controllers and AIOs have been released with ExpressLRS receivers on-board using SPI instead of a regular UART. This means you can build a more compact and lightweight whoop or nano longrange rig without the need for an external receiver. More of these flight controllers are coming into stores.</p> <p>Because the ExpressLRS code is \"baked-in\" to the flight controller firmware instead of using a second microcontroller, these can not be updated the same way external receivers are updated. These SPI receivers always work with the ExpressLRS firmware of the same major version. That is, ExpressLRS 1.x.x and ExpressLRS 2.x.x need different Flight Controller firmware (Betaflight builds).</p>  <p>NOTE</p> <p>You cannot use the ExpressLRS Configurator to update these FCs.</p>  <p>With Betaflight 4.3.0 finally released, you should first update the FC firmware to this released version. The firmware the FC comes with most likely has a pre-release Betaflight 4.3.0 which will only work with ExpressLRS 1.x firmware and may have bugs. A lot of tweaks and fixes were implemented on Betaflight 4.3.0 for these flight controllers and the ExpressLRS Developers highly recommend updating to the latest Betaflight firmware.</p> <p>In preparation for updating, you should save a copy of your <code>diff all</code> dump. Simply go into the CLI Tab of the Betaflight Configurator and execute the command <code>diff all</code> then press enter. A bunch of text will show up on the screen. At the bottom of the page, click the Save to File button and navigate to the folder you want the file to be saved. Finally click <code>Save</code> after taking note of the folder and filename of the text file. You will need to navigate to this file later on, moreover if you already have customized your settings on the flight controller, like rates, pid tune, OSD. For newly acquired flight controllers, this is often unnecessary.</p> <p>Using the latest Betaflight Configurator, navigate into <code>Firmware Flasher</code> and select the latest Betaflight release. Depending on your AIO board, the target will differ:</p> <ul> <li>Happymodel AIO: CRAZYBEEF4SX1280</li> <li>BetaFPV AIO: BETAFPVF4SX1280</li> <li>SPRacing SPH7RF: Coming soon!</li> </ul> <p>If your Flight Controller model is not in the list above, consult your Flight Controller manufacturer for details.</p>  <p>NOTE</p> <p>The Happymodel Mobula6 900MHz AIO with the CrazyF4 ELRS FC (Target: CRAZYBEEF4DX) doesn't use an SPI ExpressLRS receiver. Check the page for ES915RX instead.</p>  <p>Once flashed, you will need to paste in the <code>diff all</code> you have saved. Don't forget to type in <code>save</code> and press enter once done. Power cycle your flight controller, and you should be set. Review your Betaflight settings (no changes needed for the Receiver Type and Protocol; should already be set with <code>SPI Receiver</code>, with Provider as <code>ExpressLRS</code>).</p>  <p></p>","title":"SPI Receivers"},{"location":"hardware/spi-receivers/#binding-procedure","text":"<p>There are two ways to bind the receiver, as shown below</p>","title":"Binding Procedure"},{"location":"hardware/spi-receivers/#button-binding","text":"<p>Put the receiver into bind mode using any of these procedures:</p> <ul> <li>\"Bind\" button in the Betaflight Configurator, Receiver Page (if can't be found, update the Betaflight firmware).</li> <li>using the CLI, type in <code>bind_rx</code> and press enter once.</li> <li>press the bind button on the flight controller.</li> <li>using the CLI, type in <code>set expresslrs_uid = 0</code>, press enter once, then save and reboot</li> </ul> <p>One the SPI receiver is in Bind Mode (indicated by two immediate blinks followed by a short pause), execute the ExpressLRS lua script in your handset and press the <code>Bind</code> option. The RX and TX should be now bound (indicated by a SOLID LED on the Flight Controller).</p> <p>Please mind the order, RX first, TX second.</p> <p>Video Tutorial (thanks to @JyeSmith):</p>","title":"Button Binding"},{"location":"hardware/spi-receivers/#binding-phrase","text":"<p>The binding phrase is hashed into 6 bytes represented as numbers. These 6 bytes are referred to as the UID bytes.  UID bytes are entered into the Betaflight CLI for binding. Please look below for instructions. </p>  <p>NOTE</p> <p>When building via ExpressLRS Configurator or via VS Code, note down the UID bytes from the build log. You can also use the generator below to retrieve your UID bytes from your binding phrase.</p>  <p></p>","title":"Binding Phrase"},{"location":"hardware/spi-receivers/#uid-byte-generator","text":"<p>Binding Phrase:</p>     <p>Not updating?</p> <p>If the fields below don't update as you type your binding phrase above, refresh or reload this page in your browser.</p>  <p>UID Bytes <pre><code>\n</code></pre></p>","title":"UID Byte Generator"},{"location":"hardware/spi-receivers/#setting-binding-phrase","text":"<p>Go to Betaflight CLI and enter the following commands. <pre><code>\n</code></pre></p>     window.addEventListener(\"load\", (event) =&gt; {     initBindingPhraseGen();   });","title":"Setting Binding Phrase"},{"location":"hardware/spi-receivers/#rf-mode-adjustment","text":"<p>NOTICE</p> <p>Latest Betaflight 4.3 firmware for these AIOs no longer needs the following CLI command. Adjustments from the Lua script propagates into the FCs.</p>  <p>These AIOs with ExpressLRS SPI Receivers are set to use 500Hz as default. To adjust it, you will need to go into Betaflight CLI and use the following commands:</p> <pre><code>set expresslrs_rate_index = [your index]\nsave\n</code></pre> <p>Where <code>[your index]</code> corresponds to the following:</p> <ul> <li>500Hz = 0</li> <li>250Hz = 1</li> <li>150Hz = 2</li> <li>50Hz = 3</li> </ul>","title":"RF Mode Adjustment"},{"location":"hardware/spi-receivers/#acknowledgements","text":"<p>The SPI ExpressLRS implementation would not have been possible without the work and huge efforts from the following developers:</p> <ul> <li>Pawe\u0142 Stefa\u0144ski (@phobos-)</li> <li>Dominic Clifton (@hydra)</li> <li>Hans Christian Olaussen (@klutvott123)</li> <li>Steve Evans (@SteveCEvans)</li> <li>Ctzsnooze (@ctzsnooze)</li> </ul>","title":"Acknowledgements"},{"location":"hardware/supported-hardware/","text":"<p></p> <p>Welcome to the hardware landing page. To navigate through this subsection, use the left sidebar.</p> <p>These pages show information on certain modifications to hardware, and certain ELRS specific hardware. More and more manufacturers are coming up with their own take of the ExpressLRS Hardware and the list keeps growing.</p> <p>At the time of writing, here are the ExpressLRS-supported Transmitters and Receivers, along with a few Flight Controllers and AIO boards.</p>","title":"Supported Hardware"},{"location":"hardware/supported-hardware/#24ghz-transmitters","text":"2.4GHz Transmitters","title":"2.4GHz Transmitters"},{"location":"hardware/supported-hardware/#axis-thor-tx","text":"<p>Includes Color TFT display, built in motion sensor and thermally controlled fan</p> <ul> <li> <p>Flashing Guide</p> </li> <li> <p>Manufacturer Website</p> </li> </ul>","title":"Axis Thor TX"},{"location":"hardware/supported-hardware/#betafpv-nano-24ghz","text":"<ul> <li> <p>Flashing Guide</p> </li> <li> <p>Manufacturer Website</p> </li> </ul>","title":"BetaFPV Nano 2.4GHz"},{"location":"hardware/supported-hardware/#ghost-tx","text":"<ul> <li>Flashing Guide</li> </ul>  <p>STLink first time flash, irreversible</p>","title":"Ghost TX"},{"location":"hardware/supported-hardware/#happymodel-es24tx","text":"<ul> <li> <p>Flashing Guide</p> </li> <li> <p>Manufacturer Website</p> </li> </ul>","title":"Happymodel ES24Tx"},{"location":"hardware/supported-hardware/#jumper-aion-nano-tx","text":"<ul> <li>Flashing Guide</li> </ul>","title":"Jumper AION Nano TX"},{"location":"hardware/supported-hardware/#namimnorc-flash","text":"<ul> <li>Flashing Guide</li> </ul>","title":"NamimnoRC Flash"},{"location":"hardware/supported-hardware/#siyi-fm30","text":"<ul> <li>Flashing Guide</li> </ul> <p>Max output power: 100mW default, 250mW with <code>UNLOCK_HIGHER_POWER</code></p>","title":"Siyi FM30"},{"location":"hardware/supported-hardware/#vantac-lite-tx","text":"<ul> <li>Flashing Guide</li> </ul>","title":"Vantac Lite TX"},{"location":"hardware/supported-hardware/#24ghz-receivers","text":"2.4GHz Receivers <p>To help find the right receiver for your needs, see the Receiver Selection page.</p>","title":"2.4GHz Receivers"},{"location":"hardware/supported-hardware/#axis-thor-rx","text":"<ul> <li> <p>Flashing Guide</p> </li> <li> <p>Manufacturer Website</p> </li> </ul>","title":"Axis Thor RX"},{"location":"hardware/supported-hardware/#betafpv-nano-24ghz_1","text":"<ul> <li> <p>Flashing Guide</p> </li> <li> <p>Manufacturer Website</p> </li> </ul>","title":"BetaFPV Nano 2.4GHz"},{"location":"hardware/supported-hardware/#ghost-atto-receivers","text":"<ul> <li>Flashing Guide</li> </ul>  <p>STLink first time flash, irreversible</p>","title":"Ghost Atto Receivers"},{"location":"hardware/supported-hardware/#happymodel-ep1-ep2","text":"<ul> <li> <p>Flashing Guide</p> </li> <li> <p>Manufacturer Website</p> </li> </ul>","title":"Happymodel EP1 &amp; EP2"},{"location":"hardware/supported-hardware/#happymodel-pp","text":"<ul> <li> <p>Flashing Guide</p> </li> <li> <p>Manufacturer Website</p> </li> </ul>","title":"Happymodel PP"},{"location":"hardware/supported-hardware/#jumper-aion-mini-24ghz-recievers","text":"<ul> <li>Flashing Guide</li> </ul>","title":"Jumper AION Mini 2.4GHz Recievers"},{"location":"hardware/supported-hardware/#mateksys-24ghz-receivers","text":"<ul> <li> <p>Flashing Guide</p> </li> <li> <p>Manufacturer Website</p> </li> </ul>","title":"MatekSys 2.4GHz Receivers"},{"location":"hardware/supported-hardware/#namimnorc-flash_1","text":"<ul> <li>Flashing Guide</li> </ul>","title":"NamimnoRC Flash"},{"location":"hardware/supported-hardware/#siyi-fr-mini","text":"<ul> <li>Flashing Guide</li> </ul> <p>Max telemetry power: 100mW default, 250mW with <code>UNLOCK_HIGHER_POWER</code></p>  <p>only guaranteed to work on the v3.0 of the receiver</p>","title":"Siyi FR Mini"},{"location":"hardware/supported-hardware/#vantac-rx","text":"<ul> <li>Flashing Guide</li> </ul>","title":"Vantac RX"},{"location":"hardware/supported-hardware/#900mhz-transmitters","text":"900Mhz Transmitters","title":"900Mhz Transmitters"},{"location":"hardware/supported-hardware/#betafpv-nano-900mhz","text":"<ul> <li> <p>Flashing Guide</p> </li> <li> <p>Manufacturer Website</p> </li> </ul>","title":"BetaFPV Nano 900Mhz"},{"location":"hardware/supported-hardware/#frsky-r9m-inc-lite-lite-pro","text":"<ul> <li> <p>Flashing Guide</p> </li> <li> <p>Fan Mod</p> </li> </ul> <p>Max output power: 250mW default, 1W with <code>UNLOCK_HIGHER_POWER</code></p>","title":"Frsky R9M (inc. Lite &amp; Lite Pro)"},{"location":"hardware/supported-hardware/#happymodel-es900tx","text":"<ul> <li> <p>Flashing Guide</p> </li> <li> <p>Manufacturer Website</p> </li> </ul> <p>Max output power: 250mW default, 1W with <code>UNLOCK_HIGHER_POWER</code></p>","title":"Happymodel ES900TX"},{"location":"hardware/supported-hardware/#namimnorc-voyager","text":"<ul> <li>Flashing Guide</li> </ul>","title":"NamimnoRC Voyager"},{"location":"hardware/supported-hardware/#900mhz-receivers","text":"900Mhz Receivers","title":"900Mhz Receivers"},{"location":"hardware/supported-hardware/#betafpv-nano-900mhz_1","text":"<ul> <li> <p>Flashing Guide</p> </li> <li> <p>Manufacturer Website</p> </li> </ul>","title":"BetaFPV Nano 900Mhz"},{"location":"hardware/supported-hardware/#frsky-r9-receivers","text":"<ul> <li>R9MM</li> <li>R9 Mini</li> <li>R9MX</li> <li>R9 Slim</li> <li> <p>R9 Slim+</p> </li> <li> <p>Flashing Guide</p> </li> </ul>","title":"Frsky R9 Receivers"},{"location":"hardware/supported-hardware/#happymodel-es900rx","text":"<ul> <li> <p>Flashing Guide</p> </li> <li> <p>Manufacturer Website</p> </li> </ul>","title":"Happymodel ES900RX"},{"location":"hardware/supported-hardware/#jumper-r9-mini","text":"<ul> <li>Flashing Guide</li> </ul>","title":"Jumper R9 Mini"},{"location":"hardware/supported-hardware/#namimnorc-voyager_1","text":"<ul> <li>Flashing Guide</li> </ul>","title":"NamimnoRC Voyager"},{"location":"hardware/supported-hardware/#flight-controllers-with-onboard-expresslrs-receivers","text":"Flight Controllers with onboard ExpressLRS Receivers","title":"Flight Controllers with onboard ExpressLRS Receivers"},{"location":"hardware/supported-hardware/#betafpv-f4-1s-12a-aio","text":"<ul> <li>Manufacturer Website</li> </ul>  <p>Receiver firmware can be updated using the Beta FPV Nano 2.4GHz methods</p>","title":"BetaFPV F4 1S 12A AIO"},{"location":"hardware/supported-hardware/#happymodel-elrs-f4-2g4-aio","text":"<ul> <li>Manufacturer Website</li> </ul>  <p>SPI-based receiver. Doesn't need the ExpressLRS Configurator for updates. See this page for more info.</p>","title":"Happymodel ELRS F4 2G4 AIO"},{"location":"hardware/supported-hardware/#happymodel-crazyf4-elrs-aio-900mhz","text":"<ul> <li>Manufacturer Website</li> </ul>  <p>Receiver firmware can be updated using the ES915/868RX methods.</p>","title":"Happymodel CrazyF4 ELRS AIO 900Mhz"},{"location":"hardware/supported-hardware/#spracing-h7rf","text":"<ul> <li>Manufacturer Website</li> </ul>  <p>SPI-based receiver. Doesn't need the ExpressLRS Configurator for updates. See this page for more info.</p>","title":"SPRacing H7RF"},{"location":"hardware/supported-hardware/#diy-transmitters","text":"DIY Transmitters <p>For DIY transmitters, See this page here.</p>","title":"DIY Transmitters"},{"location":"hardware/supported-hardware/#diy-receivers","text":"DIY Receivers <p>For DIY receivers, See this page here.</p>","title":"DIY Receivers"},{"location":"hardware/x9d-troubleshooting/","text":"<p></p> <p>For quite some time we had the impression that the X9D(+) radio works well with high baud rates, needed for ExpressLRS. However some users report it's not working as it should with ExpressLRS. For example:</p> <ul> <li>ExpressLRS Lua script just shows <code>Loading...</code></li> <li>ExpressLRS Lua script shows unstable behavior, especially on the higher packet rates, showing values different from <code>0/[SELECTED PACKET RATE]</code></li> <li>Constant Telemety Lost/Telemetry Recovered Notification.</li> </ul>","title":"Troubleshooting the X9D(+)"},{"location":"hardware/x9d-troubleshooting/#so-what-could-be-wrong","text":"<p>It is possible that the X9D(+) radio also suffers from a slow inverter circuit that messes up the 400000 baud UART signals.</p> <p>As you maybe know, for the Taranis QX7(S) you can do the Crossfire inverter mod or select a lower baud rate in the Hardware menu (Page 6/7) of OpenTX to fix the issue.</p>","title":"So what could be wrong?"},{"location":"hardware/x9d-troubleshooting/#can-it-be-fixed","text":"<p>Well, the final verdict is not out yet, but the following may help to resolve the issue:</p> <ul> <li>Do a hardware mod as well on your X9D(+) as you can read all about here in PR# 59 for EdgeTX.</li> <li>This requires changing the 10k resistor <code>R82</code> to a 1k resistor. </li> <li>Download a OneBit_Status firmware using this OpenTX version, based on OpenTX(2.3.12 or 2.3.14) and enable <code>ONEBIT</code> Sample Mode (System Menu -&gt; Hardware). One Bit Sample Mode is also available on EdgeTX.</li> </ul> <p> </p> <ul> <li>Select <code>115200 baud</code> using the above OpenTX version. (ExpressLRS will lock you out of 500Hz packet rate with 2.4GHz, but any packet rate below that should be stable now.)</li> </ul> <p>The nice thing about the OpenTX build above is that it also adds two additional <code>Sync</code> lines to show the current OpenTX/UART behavior. This will show in your Model Setup (Page 2/11) where you select the external module type (where you selected CRSF to enable ELRS):</p> <p></p> <ul> <li>The first <code>Sync</code> line shows something like <code>L00002R04000u</code>. <code>L</code> and <code>R</code> indicates the microseconds of Lag and Rate.</li> <li>The <code>L</code> is how much OpenTX is trying to compensate to nail the rate you selected. (The closer to 0 the better)</li> <li>The <code>R</code> is just the Packet Rate you selected using the ExpressLRS Lua script.</li> <li>The second <code>Sync</code> line shows something like <code>G11 C00 F00</code>. This stand for <code>G</code> (good packets), <code>C</code> (CRC error), <code>F</code> (Framing error). The goal is to have zero errors here. (Don't forget to power your receiver so a link is established!)</li> </ul> <p>If this has helped you in any way (good or bad) with your X9D(+) radio, let us know on the ExpressLRS discord!</p>","title":"Can it be fixed?"},{"location":"hardware/backpack/backpack-tx-setup/","text":"<p></p>","title":"TX Backpack Setup"},{"location":"hardware/backpack/backpack-tx-setup/#preparing-the-tx-module-for-backpack-firmware-flashing","text":"<p>For the Happymodel TX Modules, you will need to move the jumpers or dipswitches into the correct position before flashing the firmware. Please see the USB/UART Flashing section of your particular TX Module for the jumper or dipswitch position. You need to activate the <code>Backpack Flashing</code> jumper or dipswitch (middle pair). Opening up the module enclosure will be needed as well to access the Buttons on the modules.</p> <p>ES24TX Jumpers</p> <p>ES900TX Jumpers</p> <p>Make sure your computer recognizes your TX module as a <code>USB to UART Bridge</code>. Windows drivers are linked on the Flashing Guides.</p> <p>For the NamimnoRC Flash and Voyager TX Modules without an OLED screen (Gen 1 STM-based), make sure you're able to access the Backpack Web Update page(see Flashing Guide) via WiFi.</p> <p>For the NamimnoRC OLED-equipped TX Modules, these should already have a ready-to-use Backpack firmwares.</p> <p>For the AxisFlying Thor modules, these should also come flashed with a ready-to-use Backpack firmware.</p>","title":"Preparing the TX Module for Backpack Firmware Flashing"},{"location":"hardware/backpack/backpack-tx-setup/#backpack-firmware-flashing","text":"<p></p> <p>Flashing Backpack firmware is supported by the ExpressLRS Configurator since v1.2.0. </p> <p>Targets:</p> <ul> <li><code>HappyModel TX Backpack</code></li> <li><code>AXIS THOR TX Backpack</code></li> <li><code>FrSky TX Backpack</code></li> <li><code>Namimno Non-OLED TX Backpack</code></li> <li><code>Namimno Flash OLED TX Backpack</code></li> </ul>","title":"Backpack Firmware Flashing"},{"location":"hardware/backpack/backpack-tx-setup/#via-usbuart","text":"<p>For the Happymodel TX modules, connect it via USB to your computer. As stated above, module should be detected as a <code>USB to UART Bridge</code> and the jumper/dipswitches are set in the correct position (middle pins/switches should be On).</p> <p>On the ExpressLRS Configurator, select your Target and elect your binding phrase which will be used to bind the Backpacks together. It can be different from your usual binding phrase, but there's no issue if you want to use the same. You can also set the Home Network SSID and Password (version 0.2.0).</p> <p>Once set, click Build and Flash on the ExpressLRS Configurator.</p> <p>Button Dance: A few buttons are needed to be pressed on the module while the firmware is compiling. Press and Hold the <code>GPI0</code> button then the <code>RST</code> button (GPIO is still pressed) then release the <code>RST</code> button and then the <code>GPIO</code> button.</p> <p></p> <p>If you did things right, <code>Success</code> message should appear. </p> <p>Unplug the USB and change the position of the jumpers/dipswitches for the <code>Normal Operation</code> (refer back to the module's Flashing Guide page for the correct position).</p> <p>Put back the cover of the module and attach it into your module bay.</p>","title":"via USB/UART"},{"location":"hardware/backpack/backpack-tx-setup/#via-wifi-esp-based-tx-modules","text":"<p>Note</p> <p>The following section applies to more recently released TX modules like the NamimnoRC OLED-equipped Modules. If you have the older Happymodel modules, and have updated their backpack firmwares to at least 0.1.0, then this can be used for future updates.</p>  <p>Using the ExpressLRS v2.0 Lua script, navigate to <code>WiFi Connectivity</code> and select <code>Enable Backpack WiFi</code>. The Backpack WiFi Access Point will immediately activate. Connect to the <code>ExpressLRS TX Backpack</code> AP (password is <code>expresslrs</code>). Navigate your browser to http://10.0.0.1/.</p> <p>Build the TX firmware using the ExpressLRS Configurator. Grab the built <code>firmware.bin</code> and drag-and-drop it into the File Upload section of the webpage and click Update. Wait a bit (~10s) for the \"Update Success! Rebooting...\". The AP should automatically disappear and disconnect.</p> <p></p>","title":"via WiFi (ESP-based TX Modules)"},{"location":"hardware/backpack/backpack-tx-setup/#via-wifi-namimnorc-gen1-tx-modules","text":"<p>For the First Generation NamimnoRC TX modules (No OLED), you will have to first Build the Backpack firmware. Once built, grab the <code>backpack.bin</code> file from the folder that the ExpressLRS Configurator opened. Open the URL http://elrs_tx.local on your browser and scroll down to where the WiFi Backpack Firmware Update section is (shown in the image below). If the page isn't loading, make sure you have followed the Wifi Flashing guide for these modules(see Flashing Guide).</p> <p></p> <p>Wait for a bit (~10s) after the message \"Update Success! Rebooting...\" appear before you power-cycle the module. Your TX Backpack should now be ready.</p>","title":"via WiFi (NamimnoRC Gen1 TX Modules)"},{"location":"hardware/backpack/backpack-tx-setup/#via-etx-passthrough","text":"<p>Targets: </p> <ul> <li><code>RadioMaster Zorro TX Backpack</code></li> <li><code>RadioMaster TX16S Backpack</code></li> </ul>  <p>This method is the result of the collaborative effort between EdgeTX, RadioMaster and ExpressLRS.</p>  <p>With your handset turned on, connect a USB data cable on the USB data port of the Radio. Select <code>USB Serial(Debug)</code> or <code>USB Serial(VCP)</code> in the option window that pops up.</p> <p></p> <p></p> <p>Using the ExpressLRS Configurator, select the appropriate version and the correct Device Target and set the Flashing method to <code>EdgeTXPassthrough</code>.</p> <p>Set your Binding Phrase and your Home WiFi SSID and Password (Optional).</p> <p>Click Build and Flash on the ExpressLRS Configurator.</p> <p>Wait for the process to complete and you should see the green <code>Success</code> notification.</p> <p>Unplug the usb from the handset and you're set!</p>","title":"via ETX Passthrough"},{"location":"hardware/backpack/backpack-tx-setup/#starting-in-020-you-can-update-via-your-home-wifi-network","text":"<p>With your Home Network SSID and Password set, when you activate the WiFi mode via the lua script (<code>WiFi Connectivity</code> -&gt; <code>Enabled Backpack WiFi</code>), the Backpack will try to connect to your Home WiFi Network. Once connected, you can access the Web Update page via http://elrs_txbp.local/ and upload your firmware there.</p> <p>The ExpressLRS Configurator will also detect the device after it has connected. It will be listed in the \"Device List\" section, and you can press <code>SELECT</code>, so that the correct target is automatically selected for Build.</p> <p>Alternatively, you can also Build and Flash via the Configurator through WiFi without having to access the Web Update page (just like any ESP-based ExpressLRS receiver).</p>","title":"Starting in 0.2.0, you can Update via your Home WiFi Network"},{"location":"hardware/backpack/backpack-tx-setup/#how-to-check-you-have-updated-the-tx-backpack-firmware","text":"<p>Make sure you set the jumpers or dipswitches on your modules (if yours have one; present on the Happymodel TX Modules) to the <code>Normal Operations</code> position (refer to the top of this page). This allows the main ESP32 chip to talk to the Backpack chip. The Backpack will NOT work properly without setting those dipswitches or jumper pins.</p>  <p>Attention</p> <p>Change the position of the dipswitches or jumper pins to the <code>Normal Operations</code> positions if you have the Happymodel TX modules.</p>  <p>Navigate to the <code>WiFi Connectivity</code> folder of the ExpressLRS v2 Lua script and select <code>Enable Backpack WiFi</code>. Scan for Access Points and ExpressLRS TX Backpack should appear. Connect into it and point your browser to http://10.0.0.1/.</p> <p>If you have set your Home Network SSID and Password, point your browser to http://elrs_txbp.local/.</p> <p>The main banner will show you what kind of device it is and the firmware version that's flashed into it.</p>","title":"How to check you have updated the TX Backpack Firmware?"},{"location":"hardware/backpack/backpack-tx-setup/#setup-your-vrx-backpack","text":"<p>VRx Backpack Setup</p>","title":"Setup your VRx Backpack"},{"location":"hardware/backpack/backpack-tx-setup/#operation","text":"<p>The Backpack Usage section will discuss the Operation of the Backpacks in detail, including Binding, LED Status codes and more.</p> <p>Backpack Usage</p>","title":"Operation"},{"location":"hardware/backpack/backpack-vrx-setup/","text":"<p></p>","title":"VRx Backpack Setup"},{"location":"hardware/backpack/backpack-vrx-setup/#flashing-your-vrx-backpack-device","text":"<p>Before wiring up your VRx Backpack, you NEED to first flash the VRx Backpack firmware into it either via WiFi or UART/FTDI.</p> <p>Good VRx Backpack candidates are the EP1 or EP2 receivers from Happymodel as these have Boot pads, instead of Boot buttons. The Boot pad will be repurposed for the SPI Clock signal from the VRx module.</p> <p>The VRx firmware you will flash into your Backpack Device will depend on what VRx module you want to connect it to or it will not work properly.</p>","title":"Flashing your VRx Backpack Device"},{"location":"hardware/backpack/backpack-vrx-setup/#flashing-via-wifi-esp-based-expresslrs-receivers","text":"<p>Power up your selected VRx Backpack device (connect 5v and gnd pads to any 5v power source). Let it go into WiFi Update mode (fast blinking LED) and load up the WiFi Update page. In the Address bar of your browser, add <code>?force=true</code> to ensure it will accept the VRx Backpack firmware. The resulting URL should read <code>http://10.0.0.1/?force=true</code> (if you connected via Access Point) or <code>http://elrs_rx.local/?force=true</code> (if your device has connected to your local WiFi network).</p>  <p>The <code>?force=true</code> is not needed for these ESP-based receivers with factory-firmware. It will only be needed if you have flashed the receiver into ExpressLRS v2.0 and wanted to repurpose it for VRx Backpack.</p>  <p>On the Assets section of the Backpack Release on Git Hub, <code>Download</code> the binary suited for your VRx module. Upload this binary into the VRx device using the Web Update page. Wait (~30s) until the LED on the VRx device has turned on again.</p> <p>Alternatively, you can use the ExpressLRS Configurator to create your binaries for you. Build your binary, with the set <code>binding phrase</code> (Optional) as well as Home Network SSID and Password (Optional; available starting 0.2.0). Upload the resulting binary into the WiFi Update page as outlined above.</p>","title":"Flashing via WiFi (ESP-based ExpressLRS Receivers)"},{"location":"hardware/backpack/backpack-vrx-setup/#flashing-via-uartftdi","text":"<p>This method is best used for the DIY ESP01F VRx Backpacks, as these devices do not have any firmware from factory. </p>  <p>Connect your FTDI Rx pin into the Tx pad of your VRx Device, and the FTDI Tx pin into the Rx pad of the VRx Device; then the 5v and Gnd pads. The Boot pad needs to be bridged with the Ground pad. Connect your FTDI, with the connected VRx device, into a free USB port (VRx Device's LED should light up SOLID). Using the ExpressLRS Configurator, select your VRx module, select the <code>via UART</code> method and set your <code>binding phrase</code> (Optional) and the Home Network SSID and Password (Optional; Available starting 0.2.0). Click Build and Flash and the compiling and flashing should commence. If done right, the Success bar should appear and your VRx Backpack should now be ready for wiring into your selected VRx Module.</p>","title":"Flashing via UART/FTDI"},{"location":"hardware/backpack/backpack-vrx-setup/#flashing-tbs-fusion-for-the-first-time","text":"<p>You will need an FTDI dongle (USB to UART Bridge) to flash the VRx Backpack firmware into your TBS Fusion module for the first time. You will also have to follow the TBS Fusion WiFi Module Unbricking Guide but instead of uploading the WiFi Firmware file from TBS, you will upload the VRx Backpack Firmware that the ExpressLRS Configurator compiled from Build.</p> <p>Any subsequent firmware updates can be done via WiFi.</p>","title":"Flashing TBS Fusion for the First Time"},{"location":"hardware/backpack/backpack-vrx-setup/#starting-020-you-can-update-via-your-home-wifi","text":"<p>With your Home Network SSID and Password set, when you activate the WiFi mode via the lua script (<code>WiFi Connectivity</code> -&gt; <code>Enabled VRx WiFi</code>), the Backpack will try to connect to your Home WiFi Network. Once connected, you can access the Web Update page via http://elrs_vrx.local/ and upload your firmware there.</p> <p>The ExpressLRS Configurator will also detect the device after it has connected. It will be listed in the \"Device List\" section, and you can press <code>SELECT</code>, so that the correct target is automatically selected for Build.</p> <p>Alternatively, you can also Build and Flash via the Configurator through WiFi without having to access the Web Update page (just like any ESP-based ExpressLRS receiver).</p>","title":"Starting 0.2.0, you can Update via your Home WiFi"},{"location":"hardware/backpack/backpack-vrx-setup/#vrx-module-setup-before-wiring-it-all-up","text":"<p>You will need to set your VRx module to the highest band and channel it can go, usually Race 8 (5917MHz) before wiring up any VRx Backpack. This is to ensure the VRx Backpack knows \"where it is\" in the selectable channels.</p>","title":"VRx Module Setup before wiring it all up"},{"location":"hardware/backpack/backpack-vrx-setup/#connecting-the-vrx-backpacks-to-your-vrx-modules","text":"<p>Currently supported VRx Modules include:</p> <ul> <li>ImmersionRC Rapidfire  </li> <li>SkyZone SteadyView</li> <li>Generic RX5808 Module</li> <li>FENIX Module</li> <li>Shark Byte RX5.1 HDZero Module</li> </ul> <p>The VRx Backpacks communicate to these modules via SPI bus and involves 3 signal lines: <code>CLK</code>, <code>DATA</code>, <code>CS</code>. Depending on your VRx Backpack, they will either need <code>5v</code> (ExpressLRS ESP-based Receiver) or <code>3.3v</code> (ESP01F module) and of course the <code>GND</code> line.</p> <p></p> <p></p> <p>For the ESP01F Module, you will have to source out a voltage regulator such as an <code>AMS1117</code> (1A Low Drop-out Voltage Regulator) which will lower the 5V voltage from the VRx module to the needed <code>3.3v</code>.</p> <p></p> <p></p>","title":"Connecting the VRx Backpacks to your VRx Modules"},{"location":"hardware/backpack/backpack-vrx-setup/#rapidfire-backpack-connection","text":"<p>Follow the wiring guide below for the Rapidfire module. Make sure that the VRx module is set to R8 (5917) for this to work properly.</p> <p></p> <p></p> <p>The VRx Backpack fits snugly in the module bay. No further modding needed.</p> <p></p> <p></p>","title":"Rapidfire Backpack Connection"},{"location":"hardware/backpack/backpack-vrx-setup/#steadyview-backpack-connection","text":"<p>You will need to desolder 3 pins from the module, or cut them off. </p> <p>Follow the wiring shown on the image below:</p> <p></p> <ul> <li>Blue wire is the CLK pin (Pin 1; connected to Boot pad, if using an ExpressLRS Receiver).</li> <li>Green wire is the DATA pin (Pin 2; connected to the RX pad, if using an ExpressLRS Receiver).</li> <li>Yellow wire is the CS pin (Pin 3; connected to the TX pad, if using an ExpressLRS Receiver).</li> </ul> <p>The power supply wires are connected as follows: * Black wire is GND and connected to Pin 7 of the VRx module. * Red wire is the 5V supply and connected to the last Pin of the module (Pin 9).</p> <p></p> <p></p>","title":"SteadyView Backpack Connection"},{"location":"hardware/backpack/backpack-vrx-setup/#shark-byte-rx51-hdzero-module-connection","text":"<p>The VRX has an easily accessible UART on the main board, which is accessed by removing the 4 screws which secure the backplate. Use the goggle mount to pull the backplate from the housing.</p> <p>Solder your VRx backpack as shown below:</p> <p></p> <p>It is unlikely that you can close the backplate with backpack module between the plate and the main board. There are two solutions: * Route the wires out of the cooling vents and mount it externally * Mount the backpack in the front patch, routing the wirse through the goggle mount as shown below:</p> <p></p>","title":"Shark Byte RX5.1 HDZero Module Connection"},{"location":"hardware/backpack/backpack-vrx-setup/#how-to-check-you-have-updated-the-vrx-backpack-firmware","text":"<p>Navigate to the <code>WiFi Connectivity</code> folder of the ExpressLRS v2 Lua script and select <code>Enable VRx WiFi</code>. The LED will begin blinking rapidly. Scan for Access Points and ExpressLRS VRx Backpack should appear. Connect into it and point your browser to http://10.0.0.1/.</p> <p>If you have set your Home Network SSID and Password, point your browser to http://elrs_vrx.local/.</p> <p>The main banner will show you what kind of device it is and the firmware version that's flashed into it.</p>","title":"How to check you have updated the VRx Backpack Firmware?"},{"location":"hardware/backpack/backpack-vrx-setup/#setup-your-tx-backpack","text":"<p>TX Backpack Setup </p>","title":"Setup your TX Backpack"},{"location":"hardware/backpack/backpack-vrx-setup/#operation","text":"<p>The Backpack Usage section will discuss the Operation of the Backpacks in detail, including Binding, LED Status codes and more.</p> <p>Backpack Usage</p>","title":"Operation"},{"location":"hardware/backpack/esp-backpack/","text":"<p></p>","title":"Backpack Info"},{"location":"hardware/backpack/esp-backpack/#what-is-a-backpack","text":"<p>A Backpack is an add-on device that facilitates wireless communication between an ExpressLRS module and another device (e.g. a Video Receiver on your goggles) using ESPnow as protocol.</p> <p></p>","title":"What is a Backpack?"},{"location":"hardware/backpack/esp-backpack/#usage-scenario","text":"<p>You are setting up to fly with others and your favorite video channel is already in use. You're asked to use R2 as that's the vacant one. Using the ExpressLRS lua script, you change the setting into R2 (this while your aircraft is still unpowered). You power up your goggles equipped with a VRX Backpack. Then plug in your aircraft. Upon establishment of the connection, the VTX and the VRX are automatically set into R2. You're now ready to fly. No fiddling of channels on the OSD or on your goggles.</p>","title":"Usage Scenario"},{"location":"hardware/backpack/esp-backpack/#okay-im-sold-what-do-i-need-to-get-this-working","text":"<p>You already have the majority of the hardware needed. Most of the ESP-based ExpressLRS modules come with the TX Backpack. For the VRX Backpack, you can reuse any ESP-based ExpressLRS receiver (recommended are the EP1/EP2 receivers as they have boot pads, instead of boot buttons), or for a complete DIY route, you'll need an ESP-01F module.</p> <p>An off-the-shelf VRX Backpack has also appeared from Happymodel: the EP82</p> <p>See the tables below for the list of supported devices:</p>","title":"Okay, I'm sold. What do I need to get this working?"},{"location":"hardware/backpack/esp-backpack/#supported-tx-backpack-targets","text":"TX Module Support     Happymodel ES24TX Pro \u2714\ufe0f Fully supported   Happymodel ES24TX \u2714\ufe0f Fully supported   Happymodel Slim Pro \u2714\ufe0f Fully supported   Happymodel Slim Ironman \u2714\ufe0f Fully supported   Happymodel Slim T-Lite \u2714\ufe0f Fully supported   Happymodel ES900TX \u2714\ufe0f Fully supported   Happymodel ES915TX (STM32 version) \u274c Not compatible   FrSky R9M \u2714\ufe0f Supported with addition of a ESP8285   FrSky R9 (all others) \u274c Not compatible   NamimnoRC Flash (STM32 version) \u2714\ufe0f Fully supported   NamimnoRC Flash OLED(ESP version) \u2714\ufe0f Fully supported   NamimnoRC Voyager (STM32 version) \u2714\ufe0f Fully supported   NamimnoRC Voyager OLED(ESP version) \u2714\ufe0f Fully supported   Axis Flying THOR \u2714\ufe0f Fully supported   HGLRC Hermes \u274c Not compatible   BETAFPV 2.4 TX 1W Micro \u2714\ufe0f Fully supported   BETAFPV 2.4 TX \u274c Not compatible   BETAFPV 900 TX \u274c Not compatible   Radiomaster Zorro \u2714\ufe0f Fully supported   Jumper Aion T-Pro Internal \u274c Not compatible   Jumper Aion Nano \u274c Not compatible   Vantac Lite \u274c Not compatible   ImmersionRC Ghost TX \u274c Not compatible   QuadKopters 2.4 TX \u274c Not compatible   SIYI FM30 \u274c Not compatible   DIY TX \u2714\ufe0f Fully supported with addition of a ESP8285","title":"Supported TX-Backpack Targets"},{"location":"hardware/backpack/esp-backpack/#supported-vrx-backpack-targets","text":"Backpack Target Compatibility Tested?     Happymodel EP1/EP2 \u2714\ufe0f Compatible Yes   Happymodel ES900RX \u2714\ufe0f Compatible Yes   Happymodel EP82 \u2714\ufe0f Compatible Yes   BETAFPV Nano 2.4 \u2714\ufe0f Compatible No   Flywoo EL24E \u2714\ufe0f Compatible No   Flywoo EL24P \u2714\ufe0f Compatible No   Ghost ATTO \u274c Not compatible N/A   HappyModel PP \u274c Not compatible N/A   HGLRC 2400RX \u2714\ufe0f Compatible No   JHEMCU / HiYOUNGER EP24S \u2714\ufe0f Compatible No   JHEMCU / HiYOUNGER SP24S \u2714\ufe0f Compatible No   JHEMCU / HiYOUNGER RX24T \u2753 Unsure No   Matek R24-S \u2714\ufe0f Compatible No   Matek R24-D \u2714\ufe0f Compatible No   Jumper Aion RX \u2714\ufe0f Compatible No   Vantac 2.4GHz RX \u2714\ufe0f Compatible No   Namimno Flash (ESP) \u2714\ufe0f Compatible No   QuadKopters Nano \u2714\ufe0f Compatible No   SIYI FR Mini \u274c Not compatible N/A","title":"Supported VRx-Backpack Targets"},{"location":"hardware/backpack/esp-backpack/#video-receivers-currently-supported-include","text":"VRX Module Support     ImmersionRC Rapidfire \u2714\ufe0f Fully supported (Versions 1.2.5 of the rapidFIRE firmware and later)   SkyZone SteadyView \u2714\ufe0f Fully supported   TBS Fusion \u2714\ufe0f Fully supported (FTDI needed)   Generic RX5808 Module (some) \u2714\ufe0f Fully supported   FENIX Module \u2714\ufe0f Fully supported","title":"Video Receivers currently supported include:"},{"location":"hardware/backpack/esp-backpack/#im-ready-to-proceed-what-do-i-do-next","text":"<p>If your TX module is already equipped with a TX backpack (see list above), your next step is to update the firmware of the backpack. Proceed to the next page for more details.</p> <p>If you're using a DIY TX module and want to add a backpack into it, proceed to the Backpack Wiki.</p> <p>For the VRX Backpack, you will need to first update the firmware on the ESP device. The firmware will highly depend on which VRX module you will use it on. Proceed to this page for more info.</p> <p>TX Backpack Setup VRx Backpack Setup</p>","title":"I'm Ready to Proceed. What do I do next?"},{"location":"hardware/backpack/esp-backpack/#backpack-usage","text":"","title":"Backpack Usage"},{"location":"hardware/backpack/esp-backpack/#led-status-codes","text":"<ul> <li>Solid - Backpack is powered up and ready to receive packets.</li> <li>Fast Continious Blinking - WiFi Mode is active and either the Access Point is ready for connection or the Backpack has connected to your Local WiFi Network (0.2.0; Home Network SSID and Password have been set).</li> <li>Double Blink, Pause - Backpack is in Binding Mode. Using the ExpressLRS Lua Script, press <code>Bind</code> and the TX Backpack should bind with the VRx Backpack.</li> </ul>","title":"LED Status codes"},{"location":"hardware/backpack/esp-backpack/#button-operation-if-present","text":"<ul> <li>Pressing and Holding down the button during Power Up puts the device into Bootloader mode. From here, you can flash the firmware via UART using an FTDI dongle (USB to UART Bridge). LED on the Backpack device will be SOLID when in this mode.</li> <li>Single Press during Normal or Binding mode will put the device into WiFi Mode.</li> <li>Single Press during WiFi Mode will put back the device into Normal Mode.</li> </ul>","title":"Button Operation (If present)"},{"location":"hardware/backpack/esp-backpack/#binding","text":"<p>Just like any ExpressLRS device, you can set a Binding Phrase for both the TX Backpack and VRx Backpack so they automatically bind with each other during power up. This Binding Phrase can be the same as what you used with your other ExpressLRS devices, or can be entirely different. The concept is the same.</p> <p>Should you choose to bind manually, the procedure is as follows:</p> <ol> <li>Make sure you didn't flash the VRx firmware with a Binding Phrase.</li> <li>Power Cycle the VRx Backpack 3 times every ~30s. This interval gives ample time for your googles and VRx module to power up and down more gracefully. If your VRx Backpack has a button, it can also be used to power-cycle the device by cycling between WiFi Mode and Normal mode 3x (as WiFi mode reboots the device).</li> <li>The LED on the Backpack should now blink twice followed by a brief pause, then repeats, indicating it is in Binding Mode.</li> <li>Using the ExpressLRS Lua script, navigate into the <code>Bind</code> option. Press it once and the LED on both Backpacks should blink once and stay SOLID thereafter.</li> <li>Your Backpacks are now bound and connected and you can now use VTX Administrator on the ExpressLRS Lua script to sync your VTX and VRx modules.</li> </ol>","title":"Binding"},{"location":"hardware/backpack/esp-backpack/#timeouts","text":"<p>When in Binding Mode (Double Blink &amp; Pause) and no Bind packets have been received within 120s, the VRx Backpack will switch into WiFi Mode. This provides the users a means to enter WiFi Mode when their VRx Backpack doesn't have a Button.</p>","title":"Timeouts"},{"location":"hardware/special-targets/diy-rx/","text":"<p> Possibly one of the biggest benefits from using <code>ExpressLRS</code> is custom hardware!</p> <ul> <li>\ud83d\udcf6 Custom ESP 2.4 GHz RX</li> <li>\ud83d\udce1 Custom ESP 900 MHz RX</li> <li>\u26a1 Flashing ESP Based RX</li> </ul>","title":"DIY Receiver"},{"location":"hardware/special-targets/diy-rx/#custom-esp-24-ghz-rx","text":"<p></p> <ul> <li>20x20 footprint and uses 0805 size SMD components. SMD components have been positioned on the PCB in a soldering iron friendly way. \ud83d\udeb8 </li> </ul> <p></p> <ul> <li>The <code>ELRS Nano</code> RX is 18mm x 11mm and uses the same pinout as the <code>Crossfire Nano</code> RX. This allows for direct mounting to compatible flight controllers. \u26a0\ufe0f This PCB uses 0402 SMD components and will require a hot air rework station and probably a microscope. \ud83d\udd2c </li> </ul>","title":"Custom ESP 2.4 GHz RX"},{"location":"hardware/special-targets/diy-rx/#custom-esp-900-mhz-rx","text":"<p>  </p> <ul> <li>Uses the <code>ESP-01F</code> for WiFi and a <code>RFM95</code> for our business \ud83d\udd74\ufe0f</li> <li>Requires ordering PCBs from Gerber files, a regulator chip, a few passives, a <code>ESP-01F</code> and a <code>RFM95</code> (915/868MHz)</li> <li>Multiple RX PCB designs are available \u2705 </li> <li><code>20x20 RX</code> - discrete SMD antenna for Wifi and RF directly soldered to PCB<ul> <li>Target DIY_900_RX_ESP8285_SX127x_via_UART</li> </ul> </li> <li><code>20x20 RX 0805</code> - easier to build due to bigger SMD parts. PCB antenna for Wifi and <code>u.fl</code> connector for RF</li> <li><code>Mini RX</code> - the smallest form factor, lightest weight and lowest cost per PCB</li> <li>If you need help soldering, please check out this video</li> </ul>","title":"Custom ESP 900 MHz RX"},{"location":"hardware/special-targets/diy-rx/#flashing-custom-rx","text":"","title":"Flashing Custom RX"},{"location":"hardware/special-targets/diy-rx/#before-you-start","text":"<ul> <li>The steps for building are in each individual <code>README.md</code> for the RX of your choice</li> <li>If you are using an <code>ESP-12F</code> instead of <code>ESP-01F</code> it is recommended to follow this tutorial but using the appropriate RX target \ud83e\uddd1\u200d\ud83c\udfeb </li> </ul>","title":"Before you start"},{"location":"hardware/special-targets/diy-rx/#get-it-flashed","text":"<ul> <li>Connect the serial adapter to <code>GND</code>, <code>TX</code>, <code>RX</code>, and the appropriate <code>3V3</code> or <code>5V</code>.</li> <li>Additionally, connect <code>IO0</code> to <code>GND</code> to activate the bootloader and enable flashing</li> <li>Quite some serial adapters have <code>TX</code> and <code>RX</code> swapped, mislabeled, or both \ud83d\ude38. Please double-check!</li> <li>Finally, select the appropriate RX target, make sure your user defines are correct, and press <code>Upload</code> in platformio</li> </ul>","title":"Get it flashed"},{"location":"hardware/special-targets/diy-tx/","text":"<p></p>","title":"DIY Transmitter"},{"location":"hardware/special-targets/diy-tx/#custom-esp-24-ghz-tx-for-jr-module-bay","text":"<p>All of the info on this topic can be found \ud83d\udc49Here</p> <p></p>","title":"Custom ESP 2.4 GHz TX (for JR module bay)"},{"location":"hardware/special-targets/diy-tx/#custom-super-slim-esp-24-ghz-tx-for-lite-module-bay","text":"<p>The super slim is an evolution of the slim. It uses the same base hardware as the JR size one. It's the same size as an R9M Lite, and fits in all handsets with a lite module bay such as the X-Lite, X9 Lite, and Tango 2 (with the proper adapter). The rest of the info can be found \ud83d\udc49Here</p> <p></p>","title":"Custom Super Slim ESP 2.4 GHz TX (for lite module bay)"},{"location":"hardware/special-targets/diy-tx/#custom-900-mhz-tx-not-built-anymore","text":"<p>In the beginning, 900 MHz transmitters were sometimes built DIY. Today they're not. If you have one, the max output power defaults to 100mW, but with <code>UNLOCK_HIGHER_POWER</code>, that can be increased to 250mW.</p>","title":"Custom 900 MHz TX (not built anymore)"},{"location":"hardware/special-targets/nuclear-hardware/","text":"<p></p>","title":"Nuclear Targets"},{"location":"hardware/special-targets/nuclear-hardware/#nuclear-rx","text":"<p>The Nuclear RX is designed to be as small as possible, using the same software target as the DIY Nano RX, and assembled by JLCPCB. It uses the 2400MHz band and ExpressLRS firmware.</p> <p>Features: </p> <ul> <li>20x20 stack mounting with break-off tabs for compact applications  </li> <li>SMD Antenna</li> <li>Wi-Fi updating </li> <li>Up to 500Hz packet rate  </li> </ul> <p></p> <p>When you get your Nuclear RX, it will likely be on the latest release firmware. You'll probably have to update it to work with your TX. To update, follow the steps in the Wi-Fi updating page. Alternatively, you can use betaflight passthrough should work, but the boot jumper must be bridged while applying power to the RX.</p> <p>When building, use one of the <code>DIY_2400_RX_ESP8285_SX1280_via_X</code> targets. To use <code>via_wifi</code>, put your RX in binding mode, connect your computer to the RX's Wi-Fi, and hit upload.</p>    LED Status     Blinking Slowly Waiting for Connection   Fast Double Blink Binding Mode   Super Fast Blink Wi-Fi Updating Mode   Solid On Connected    <p>If for some reason the RX needs to be in boot mode, bridge the jumpers as shown here:</p> <p></p>","title":"Nuclear RX"},{"location":"hardware/special-targets/nuclear-hardware/#nuclear-tx","text":"","title":"Nuclear TX"},{"location":"hardware/special-targets/nuclear-hardware/#overview","text":"<p>The Nuclear TX is designed to be the same size as a FrSky slim module and use the same software target as the DIY Slim TX. It uses the 2400MHz band and ExpressLRS firmware. There is also a case that fits a full size JR module bay with the same PCB.</p>","title":"Overview"},{"location":"hardware/special-targets/nuclear-hardware/#before-flight","text":"<p>If you ordered a Nuclear TX that wasn't fully assembled, these steps should help you finish it.</p>","title":"Before Flight"},{"location":"hardware/special-targets/nuclear-hardware/#print-a-case","text":"<p>The latest version of the Nuclear TX STL files can be found here. Print the pieces in the orientation in the image and use support. Tree support in Cura works great. Keep in mind that PLA may melt if left in a hot car or in direct sunlight. </p>","title":"Print a case"},{"location":"hardware/special-targets/nuclear-hardware/#assemble","text":"<p>Slap it together as seen below. Solder the wires to the pin header in the order in the picture, then slide it in from the outside. The header should press in with a little force. Add some glue on the inside to keep it from sliding out when removing it from your handset. Put the SMA pigtail in the hole in the top and screw it down. Use a wrench to make sure it doesn't come loose when you screw on your antenna. Plug the U.FL in to the module and route it under, and looping up around the side. </p>","title":"Assemble"},{"location":"hardware/special-targets/nuclear-hardware/#upload-firmware","text":"<p>When you get your Nuclear RX, it will likely be on the latest release firmware. You'll probably have to update it to work with the RX you have. To update, follow the steps in the Wi-Fi updating page. If your transmitter module ever becomes bricked from a bad upload, connect it with a serial adapter as shown here. MAKE SURE THE ADAPTER IS SET TO 3.3V; 5V WILL KILL THE MODULE! Use tweezers or solder to bridge the boot jumper while you power on the module to put it in boot mode. Use the target <code>DIY_2400_TX_ESP32_SX1280_E28_via_UART</code>. </p> <p>Note: The version of the boards with the 6-pad layout for programming has the TX and RX named backwards. The actual order of the pins is TX, RX, 3V3, GND, GND.</p>","title":"Upload firmware"},{"location":"info/advance-technical-info/","text":"<p></p>","title":"Advance Technical Info"},{"location":"info/advance-technical-info/#advance-technical-information","text":"<p>This page explain the more technical side for debugging things yourself.</p>","title":"Advance Technical Information"},{"location":"info/advance-technical-info/#lua-status","text":"<p>In normal state, the top right corner of the LUA will display <code>-</code> or <code>C</code> for RX connection status. in Warning or Critical Warning, the top right corner of the LUA will display a number to debug. As the LUA title will only show the current most critical warning only.</p> <p>Converting the number on the top right corner to bits, you can decode the on going warnings.</p>    Bit Status Solution     0 RX connection status connect a RX with TLM ratio other than <code>Off</code>   1 Reserved Status    2 Model Missmatch Warning set ModelMatch to Off or Select/Set the correct Model ID   3 Armed Status LUA should be closed to maximize sent Stick Command   4 Reserved Warning    5 Not While Connected Do not change this parameter when connected to a RX   6 Reserved Critical Warning    7 Reserved Critical Warning","title":"LUA Status"},{"location":"info/advance-technical-info/#debug-logging","text":"Defines Description     -DDEBUG_LOG Turn on debug messages, if disabled then all debugging options (starting with DEBUG_) are disabled   -DDEBUG_LOG_VERBOSE Use DEBUG_LOG_VERBOSE instead (or both) to see verbose debug logging (spammy stuff)   -DDEBUG_RX_SCOREBOARD Print a letter for each packet received or missed (RX debugging)   -DDEBUG_CRSF_NO_OUTPUT Don't send RC msgs over UART   -DDEBUG_BF_LINK_STATS These debugging options send extra information to BetaFlight in the LinkStatistics packet","title":"DEBUG Logging"},{"location":"info/glossary/","text":"<p></p>","title":"Glossary"},{"location":"info/glossary/#glossary","text":"<p>Below you can find a list of terms you might not be sure about, as well as some common abbreviations:</p> <ul> <li><code>CRSF</code>: TBS Crossfire, more specifialy in our case most often refering to the communication protocol between TX and TX module and RX and FC respectively</li> <li><code>OTX</code>: OpenTX</li> <li><code>FW</code>: Firmware</li> <li><code>BL</code>: Bootloader, loads the FW</li> <li><code>S.Port</code>: SmartPort, sometimes referred to as <code>sport</code>. FrSky \"telemetry\" protocol. The <code>S.Port</code> also gets used for updating FrSky receivers.</li> <li><code>OTA</code>: Update your device <code>Over The Air</code> (wifi)</li> <li><code>MCU</code>: Micro Controller Unit, generally denotes an embedded system controller as opposed to big iron cpu</li> <li><code>OSD</code>: On Screen Display, refer to this page for instructions for setup in BF</li> <li><code>LQ</code>: Link Quality, percentage of expected packets received. Our preferred method of measuring the quality of the control link</li> <li><code>RSSI dBm</code>: Measure of power level measured in dBm. Basically, how strong the signal being received is</li> <li><code>RSSI</code>: Received Signal Strength Indicator, \"arbitrary\" scaled version of <code>RSSI dBm</code> or LQ. Signal Health: LQI and RSSI Explained</li> <li><code>Lua</code>: Means \"Moon\" in Portuguese. As such, Lua is the correct way to write and not all uppercase. The ExpressLRS Lua script can be installed on a OpenTX radio, to easily alter TX parameters like Packet rate, Telemetry ratio and Output power. But also shows if the radio (OpenTX) is communicating correctly with the module. ( e.g. 0:50, 0:150, 0:200 and so on.)</li> </ul> <p>To be continued.</p>","title":"Glossary"},{"location":"info/long-range/","text":"<p></p> <p>One of the most frequently asked questions that gets asked by people who are interested in, but haven't yet tried ELRS is \"How far does it go, and at what packet rate?\"</p> <p>The following table is a leaderboard of the current record holder for each packet rate, and the longest distance from home. Note that not every flight resulted in a failsafe at max range, so the link may go (much) futher in some cases.</p> <p>To enter, press the pencil in upper left corner of this page, and enter your record's info into the table, sorted by distance, and then PR it into the docs repo.</p>","title":"Long Range Competition"},{"location":"info/long-range/#rules","text":"<p>Anyone can add an entry to the table, and entries should include the:</p> <ul> <li>Max distance from home</li> <li>RF freq (900 / 2.4)</li> <li>Packet rate</li> <li>Power level</li> <li>If the link failsafed at max range</li> <li>The pilot name</li> <li>A link to your DVR on youtube</li> </ul>","title":"Rules"},{"location":"info/long-range/#range-ranking","text":"","title":"Range-Ranking"},{"location":"info/long-range/#10mw","text":"Max Dist. Freq Pkt Rate TX Power Type Failsafe at Max Range? Pilot Handle Link to DVR     40km 900M 50Hz 10mW Wing No Snipes Link   10km 2.4G 500Hz 10mW Quad Yes mrscythe Link   10km 2.4G 50Hz 10mW Wing No Padcom Link   6.3km 2.4G 50Hz 10mW Wing No Padcom Link   2.28km 900M 50Hz 10mW Quad No Mike Malagoli Link","title":"10mW"},{"location":"info/long-range/#25mw","text":"Max Dist. Freq Pkt Rate TX Power Type Failsafe at Max Range? Pilot Handle Link to DVR     13.58km 900M 50Hz 25mW Wing No Jullibach Link   4.6km 2.4G 50Hz 25mW Quad No febbyeka Link   4.5km 2.4G 50Hz 25mW Quad No Taufik Link   3km 2.4G 150Hz 25mW Quad No Taufik Link","title":"25mW"},{"location":"info/long-range/#50mw","text":"Max Dist. Freq Pkt Rate TX Power Type Failsafe at Max Range? Pilot Handle Link to DVR     15.76km 2.4G 150Hz 50mW Wing yes B\u00f6rner Link   7km 2.4G 150Hz 50mW Quad No Taufik Link   6km 900M 100Hz 50mW Wing No Snipes Link","title":"50mW"},{"location":"info/long-range/#100mw","text":"Max Dist. Freq Pkt Rate TX Power Type Failsafe at Max Range? Pilot Handle Link to DVR     35km 2.4G 250Hz 100mW Wing No Snipes Link   30km 900M 50Hz 100mW Wing No Slickshot Link   20km 2.4G 150Hz 100mW Wing Yes Pairan Link   13.1km 900M 50Hz 100mW Quad No Taufik Link   12km 900M 50Hz 100mW Quad Yes Taufik Link   11km 900M 50Hz 100mW Quad No Taufik Link   10km 2.4G 250Hz 100mW Wing No Snipes Link   7.14km 2.4g 500hz 100mw wing NO Bri'ish Link   6.43km 2.4G 50Hz 100mW Wing No DivisionRc Link   5.5km 900M 50Hz 100mW Quad No Abdul Link   3km 2.4G (ceramic chip antenna RX) 500Hz 100mW Quad No Spec Link","title":"100mW"},{"location":"info/long-range/#250mw","text":"Max Dist. Freq Pkt Rate TX Power Type Failsafe at Max Range? Pilot Handle Link to DVR     43.7km 2.4G 150Hz 250mW Wing No Slickshot Link   20km 2.4G 50Hz 250mW Wing No Padcom Link   12.2km 2.4G 500Hz 250mW Wing No B\u00f6rner Link   10.85km 2.4G 50Hz 250mW Wing No Stavros Link   6km 2.4G 500Hz 250mW Wing No Spec Link   4.77km 900M 200Hz 250mW Quad No DaBit Link   1.78km 2.4G 250Hz 250mW Quad No Thujones Link","title":"250mW"},{"location":"info/long-range/#500mw","text":"Max Dist. Freq Pkt Rate TX Power Type Failsafe at Max Range? Pilot Handle Link to DVR     50km 900M 25Hz 500mW Wing No Yarillo Link   4.00km 900M 100Hz 500mW Wing No Aaron Vergara Link","title":"500mW"},{"location":"info/signal-health/","text":"<p></p> <p>RSSI has become somewhat a generic term for how good a signal is, and every manufacturer can have their own scale, with most agreeing that \"100\" is the best, less than that is bad, and expect have RXLOSS at ???. This is an explanation of the signal metrics provided by ExpressLRS and how to understand their values.</p>","title":"Signal Health"},{"location":"info/signal-health/#two-types-of-signal-health","text":"<p>There are two main types of signal information available from ExpressLRS: RSSI and LQI</p> <ul> <li>RSSI - Received Signal Strength Indicator, this value indicates how loud \ud83c\udfba the reception is. RSSI must be above the sensitivity level to be understood. Units are dBm and start from 0 and go down as the volume gets lower (-130dBm hard limit).</li> <li>LQI - Link Quality Indicator, this value indicates how much of the conversation is being understood and ultimately all that matters. Units are percent, with 100% being every packet is received, and 0% means no packets are being received.</li> </ul> <p>Consider you're having a conversation in a quiet room. Your partner speaks loudly enough for you to hear, so the RSSI of their voice is above the sensitivity of your ears. You're going to understand the conversation because you're hearing every word. That's a 100% LQI-- you're receiving 100% of the words. Now imagine someone blows an air horn right in the middle of a sentence. The RSSI is still the same level, you still hear what you could make out at the same volume, you missed a word so the LQI is lower. The closer the volume of the conversation is to the background noise level in the room, the greater the chance is that you'll miss a word due to it getting mixed in with the background noise and lowering your LQI. Remember, LQI is all that matters. Your partner could shout as loud as they want but if you could hear every word anyway, the volume doesn't matter, you always heard every word.</p>","title":"Two Types of Signal Health"},{"location":"info/signal-health/#which-do-i-care-about","text":"<p>Both really. LQI is most important because you can't fly if you're not getting packets. RSSI is important because it tells you how close you are to the radio receiver not being able to receive packets at all. I'd say if you have just one, pick LQI, because that tells you what percentage of packets are getting through and you get to make the decision if it isn't enough. What you can't tell from LQI alone is when that number is going to drop off a cliff, and it could happen extremely fast because you hit the RSSI sensitivity limit.</p>","title":"Which do I care about?"},{"location":"info/signal-health/#rssi-sensitivity-limit","text":"<p>This is the lowest theoretical RSSI value that can be distinguished by the radio receiver. It is displayed in the ELRS.lua when you select the packet rate, because different packet rates and frequency bands have different sensitivity limits. Lower rates are more sensitive, -123dBm for 25Hz 915MHz up to -105dBm for 500Hz 2400MHz. This gives you the limit you know you can't fly below.</p>","title":"RSSI Sensitivity Limit"},{"location":"info/signal-health/#rssi-channel","text":"<p>RSSI and LQI are included already in the protocol used to communicate to the flight controller, so the \"RSSI Channel\" on the Receiver tab should be set to Disabled. RSSI_ADC  / \"Analog RSSI input\" on the Configuration tab should also be disabled.</p>","title":"RSSI Channel"},{"location":"info/signal-health/#available-rssi-osd-fields","text":"<ul> <li>RSSI dBm - This is the true RSSI value we've talked about here, and is available on Betaflight after 4.1 (?) and iNav after 2.6 (?)</li> <li>Link Quality - This is LQI discussed here, and has the same version requirements. Betaflight and iNav (LQ TYPE2 option) display add the RF Mode to this as well, e.g. <code>7:100</code> means mode 7 = 500Hz and 100% LQI.</li> <li>RSSI Value - Or sometimes just RSSI. This is the old undefined units of Signal Strength value that everyone is used to with no idea what value is good or what value is too bad. What value you'll actually see here varies, even on ExpressLRS, and is covered in the RSSI Value OSD field section. It is not recommended to use this field unless you have to (e.g. DJI).</li> </ul>","title":"Available RSSI OSD Fields"},{"location":"info/signal-health/#rssi-value-osd-field","text":"<p>What appears in the RSSI Value field is based on what is selected as the RSSI Channel as ExpressLRS also sends LQI and RSSI as channels (AUX11/ch15 and AUX12/ch16 respectively). It is better to use the dBm or LQ OSD fields instead of this one if you can. DJI users are forced to use this due to it being the only field supported by their OSD. Changes to RSSI Channel in Betaflight requires a reboot to take effect.</p> <ul> <li>Disabled is set as the \"RSSI Channel\" field in Betaflight - Displays RSSI dBm scaled as a percentage from -130dBm to 0dBm. Not recommended since what percentage of 130 is the Sensitivity Limit for your selected rate? Math!</li> <li>AUX11/ch15 is set as the \"RSSI Channel\" - Simply LQI although the value might be slightly off due to rounding.</li> <li>AUX12/ch16 is set as the \"RSSI Channel\" - Displays the RSSI dBm scaled as a percentage from the current Sensitivity Limit to -50dBm and is a decent indicator of how much range is left before the LQI cliff (0 here = Sensitivity Limit).</li> </ul> <p>In iNAV, the RSSI Value on the OSD is called RSSI (Signal Strength), and will always display 0. To show a filtered (by iNav) LQI in that field, set the rssi_source to protocol using the CLI with <code>set rssi_source = PROTOCOL</code>.</p>","title":"RSSI Value OSD field"},{"location":"info/signal-health/#rf-mode-indexes-rfmd","text":"<p>OSDs report the packet rate using an index instead of the actual rate, either as a <code>RATE:LQ%</code> or with rate in the hundreds digit such as <code>799</code> where 7 is the RATE and 99 is the LQ%. Handsets display the rate using the RFMD telemetry item.</p> <p></p>    RFMD Lua Packet Rate Sensitivity Limit TX duration (us) TX Interval (us)     13 F1000 1000Hz -104dBm 388.8 1000   12 F500 500Hz -104dBm 388.8 2000   11 D500 500Hz -104dBm 388.8 1000   10 D250 250Hz -104dBm 388.8 1000   9 500Hz 500Hz -105dBm 1507.4 2000   8 333Hz Full 333Hz -105dBm 2374.4 3003   7 250Hz 250Hz -108dBm 3330.0 4000   6 200Hz 200Hz -112dBm 4640.0 5000   5 150Hz 150Hz -112dBm 5891.9 6666   4 100Hz Full 100Hz -112dBm 6690.0 (900) /7605.9 (2.4) 10000   3 100Hz 100Hz -117dBm 9280.0 10000   2 50Hz 50Hz -120dBm (900) / -115dBm (2.4) 19580 (900) / 10798 (2.4) 20000   1 25Hz 25Hz -123dBm 30980 40000","title":"RF Mode Indexes (RFMD)"},{"location":"info/signal-health/#what-about-snr","text":"<p>Wow look at you smarty pants! SNR stands for Signal to Noise ratio and compares RSSI dBm to the RF background noise level and is in dB units (not dBm). Notice it compares the background noise level and not the Sensitivity Limit. The value is of limited usefulness because the RF chip can only approximate the noise level and can only register a value so high above it leading to this value getting clipped. Add to that, LoRa modulation can actually receive data below the noise floor to some degree, so just ignore this number really, but positive values are better.</p>","title":"What about SNR?"},{"location":"info/signal-health/#how-far-can-i-go-on-xmw","text":"<p>Very far? This question is usually used in place of the actual question \"Will I get good signal where I fly?\" which is impossible to answer.</p> <p>ExpressLRS 2.4GHz can go over 40km at 250Hz 100mW on omnidirectional antennas with excellent LQI, or it can go 400m with less stellar LQI. By far the biggest factor in determining maximum range is direct line of sight. Blocking line of sight reduces RSSI dBm. A few trees or a building isn't going to keep you from flying due to ExpressLRS's excellent sensitivity even when line of sight isn't available, but range is reduced a bit for every physical object between you and the receiver. Piloting from an elevated position can eliminate some ground obstacles and provide a measurable boost in range.</p> <p>The second largest factor is interference. Interference is the clobbering of our packets by outside sources, such as wifi on 2.4GHz or other ISM transmissions on 868/915MHz, and is seen as a drop in LQI well before the sensitivity limit. Increasing TX power output is usually not the solution you'd expect, where each doubling in output power only might only add 10% to the usable range due to interference.</p>","title":"How far can I go on XmW?"},{"location":"info/signal-health/#team868team915-or-team24","text":"<p>Unfortunately, there is a misconception about the 2.4GHz range thanks to other radio protocols on the market. ExpressLRS uses LoRa, which has had some amazing results on 2.4GHz. Again, 40km on 100mW 250Hz on 2.4GHz. The advantages of 2.4GHz is that the antennas are 2.5x smaller than 915MHz antennas, and there's more spectrum for ExpressLRS to hop around in, opening up the air for more pilots at once. 868/915MHz does have increased penetration and is the ultimate king of long range flying, but penetration difference may not be as great as you think. The high sensitivity of ExpressLRS receivers allows them to fly places you wouldn't dream of flying FSK-based 2.4 receivers such as FrSky ACCST/ACCESS, FlySky AFHDS2A, Spektrum DMX, or Redpine.</p>","title":"#Team868/#Team915 or #Team2.4"},{"location":"info/signal-health/#rf-noise","text":"<p>We have all heard the stories of racers powering up his TBS crossfire full module at 2W and causing people to fail-safe during a race. This happens because the 868/915mhz band has limited bandwidth. The solution for this is to use a low power mode during races, so you do not blast anyone out of the sky. 2.4ghz does not have this issue. Flite Test has a world record of having 179 RC airplanes in the sky using 2.4 GHz.</p> <p>2.4GHz LoRa can also handle WiFi noise very well. Studies have been conducted with the coexistence of WiFi and LoRa bands. </p> <p>868/915 does not have to worry about WiFi signal but it does have to worry about cell towers and other RF noise. You are fighting against thermostats, fire systems, burglar systems and any other device running on that band.</p>","title":"RF noise"},{"location":"info/telem-bandwidth/","text":"<p></p> <p>Telemetry Burst describes the allocation of telemetry packets in ExpressLRS added in #472. There are two types of packets, LINK and DATA. LINK is the standard link statistics and is always available, and DATA is \"Advanced Telemetry\" which is telemetry coming from the flight controller and shares bandwidth with MSP transfers. Burst mode attempts to maintain a minimum rate of LINK packets and use the rest of the available telemetry slots for DATA.</p> <p>The LINK rate chosen was one every 512ms, roughly 2 per second but slightly higher to allow more rates to have an additional burst packet at lower ratios.</p>    Air Rate Telem Ratio Telem Interval (ms) Packets/second Burst Count Bandwidth (no Burst) Bandwidth (Burst)     500 1:128 256 3.9 1 78bps 78bps   500 1:64 128 7.8 3 156bps 234bps   500 1:32 64 15.6 7 312bps 547bps   500 1:16 32 31.2 15 625bps 1172bps   500 1:8 16 62.5 31 1250bps 2422bps   500 1:4 8 125.0 63 2500bps 4922bps   500 1:2 4 250.0 127 5000bps 9922bps   Air Rate Telem Ratio Telem Interval (ms) Packets/second Burst Count Bandwidth (no Burst) Bandwidth (Burst)   250 1:128 512 2.0 1 39bps 39bps   250 1:64 256 3.9 1 78bps 78bps   250 1:32 128 7.8 3 156bps 234bps   250 1:16 64 15.6 7 312bps 547bps   250 1:8 32 31.2 15 625bps 1172bps   250 1:4 16 62.5 31 1250bps 2422bps   250 1:2 8 125.0 63 2500bps 4922bps   Air Rate Telem Ratio Telem Interval (ms) Packets/second Burst Count Bandwidth (no Burst) Bandwidth (Burst)   200 1:128 640 1.6 1 31bps 31bps   200 1:64 320 3.1 1 62bps 62bps   200 1:32 160 6.2 2 125bps 167bps   200 1:16 80 12.5 5 250bps 417bps   200 1:8 40 25.0 11 500bps 917bps   200 1:4 20 50.0 24 1000bps 1920bps   200 1:2 10 100.0 50 2000bps 3922bps   Air Rate Telem Ratio Telem Interval (ms) Packets/second Burst Count Bandwidth (no Burst) Bandwidth (Burst)   150 1:128 853 1.2 1 23bps 23bps   150 1:64 426 2.3 1 47bps 47bps   150 1:32 213 4.7 1 94bps 94bps   150 1:16 106 9.4 3 188bps 281bps   150 1:8 53 18.8 8 375bps 667bps   150 1:4 26 37.5 18 750bps 1421bps   150 1:2 13 75.0 37 1500bps 2921bps   Air Rate Telem Ratio Telem Interval (ms) Packets/second Burst Count Bandwidth (no Burst) Bandwidth (Burst)   100 1:128 1280 0.8 1 16bps 16bps   100 1:64 640 1.6 1 31bps 31bps   100 1:32 320 3.1 1 62bps 62bps   100 1:16 160 6.2 2 125bps 167bps   100 1:8 80 12.5 5 250bps 417bps   100 1:4 40 25.0 11 500bps 917bps   100 1:2 20 50.0 24 1000bps 1920bps   Air Rate Telem Ratio Telem Interval (ms) Packets/second Burst Count Bandwidth (no Burst) Bandwidth (Burst)   50 1:128 2560 0.4 1 8bps 8bps   50 1:64 1280 0.8 1 16bps 16bps   50 1:32 640 1.6 1 31bps 31bps   50 1:16 320 3.1 1 62bps 62bps   50 1:8 160 6.2 2 125bps 167bps   50 1:4 80 12.5 5 250bps 417bps   50 1:2 40 25.0 11 500bps 917bps   Air Rate Telem Ratio Telem Interval (ms) Packets/second Burst Count Bandwidth (no Burst) Bandwidth (Burst)   25 1:128 5120 0.2 1 4bps 4bps   25 1:64 2560 0.4 1 8bps 8bps   25 1:32 1280 0.8 1 16bps 16bps   25 1:16 640 1.6 1 31bps 31bps   25 1:8 320 3.1 1 62bps 62bps   25 1:4 160 6.2 2 125bps 167bps   25 1:2 80 12.5 5 250bps 417bps    <pre><code>// Source code for table generator\nint main(void)\n{\n  for (uint8_t rate=RATE_500HZ; rate&lt;RATE_4HZ; ++rate)\n  {\n    uint32_t hz = RateEnumToHz((expresslrs_RFrates_e)rate);\n    printf(\"| Air Rate | Telem Ratio | Telem Interval (ms) | Packets/second | Bandwidth (no Burst) | Bandwidth (Burst)\\n\");\n    if (rate == RATE_500HZ) printf(\"|---|---|---|---|---|---|\\n\");\n    for (uint8_t ratio=TLM_RATIO_1_128; ratio&lt;TLM_RATIO_ENUM_MAX; ++ratio)\n    {\n      uint32_t tlmRatio = TLMratioEnumToValue((expresslrs_tlm_ratio_e)ratio);\n      float telemPps = (float)hz / tlmRatio;\n      uint32_t telemInterval = 1000 * tlmRatio / hz;\n      uint32_t tlmBurst = TELEM_MIN_LINK_INTERVAL * hz / tlmRatio / 1000;\n      // Reserve one slot for LINK telemetry \n      if (tlmBurst &gt; 1)\n        --tlmBurst;\n      else\n        tlmBurst = 1;\n\n      printf(\"%u | 1:%u | %u | %.1f | %u | %.0fbps | %.0fbps\\n\",\n        hz, tlmRatio, telemInterval, telemPps, tlmBurst, telemPps*1/2*5*8,\n        5*8*telemPps*tlmBurst/(tlmBurst+1));\n    }\n  }\n\n  return 0;\n}\n</code></pre>","title":"Telemetry Bandwidth"},{"location":"quick-start/ardupilot-setup/","text":"<p></p>","title":"Ardupilot Setup"},{"location":"quick-start/ardupilot-setup/#ardupilot-serial-setup","text":"<p>Ardupilot Firmware must be 4.1 or higher to run CRSF protocol. As with any serial-based receiver, you need to attach the TX/RX pads to a UART on your flight controller, then enable Serial RX in the corresponding UART in Ardupilot. In mission planner, you will need to go to the <code>config tab -&gt; parameter tree</code> <pre><code>SERIALx_PROTOCOL = 23 (RCIN)\nRSSI_TYPE = 3 (ReceiverProtocol)\n</code></pre> our packet rate is different than CRSF packet rate, and ardupilot will keep on reporting the missmatch, but recently they have an option to suppress the report. Currently Ardupilot provide a way to suppress this notification with the parameter below. (this will not cause any effect to RC link or telemetry Link.) <pre><code>RC_OPTIONS turn on Bit 9th which is  \"Suppress CRSF mode/rate message for ELRS systems\".\n</code></pre></p> <p>Once you have set the parameter above, power-cycle the flight controller by disconnecting and reconnecting your battery and USB. Ardupilot should automatically run with ELRS, but if it fails, set <code>RC_PROTOCOL</code> parameter 9th bit to 1 (CRSF option)  and set the other parameter as below: <pre><code>SERIALx_PROTOCOL = 23 (RCIN)\nSERIALx_BAUDRATE = 115\nRSSI_TYPE = 3 (ReceiverProtocol)\n</code></pre></p>","title":"Ardupilot Serial Setup"},{"location":"quick-start/ardupilot-setup/#ardupilot-flightmodes","text":"<p>Ardupilot default flightmodes channel is channel 8, but ELRS 8 position channel is on channel 12 (in hybrid switchMode). you will need to set your handset to use channel 12 as flightmodes and set Ardupilot parameter: <pre><code>FLTMODE_CH=12\n</code></pre> if you are using WideSwitch mode (only available in elrs V2 and above), you can use any channel for your 8 flightmode selection (beside channel 15 which is LQ and channel 16 which is RSSI).</p>","title":"Ardupilot Flightmodes"},{"location":"quick-start/ardupilot-setup/#ardupilot-rssi-and-link-quality","text":"<p>To get RSSI and LQ shown in OSD (in %) set: <pre><code>RSSI_TYPE = 3 (ReceiverProtocol)\n</code></pre></p> <p>and go to your OSD tab, and place your RSSI and LQ element where you want them to be.</p> <p>If you feel any delay or lag in the control, check the RX connection to the Flight Controller. On some Flight Controllers you have to use full DMA supported input pin.</p> <p>Happy Flying! </p>","title":"Ardupilot RSSI and Link Quality"},{"location":"quick-start/binding/","text":"<p></p> <p>Binding can be done with either a hard coded unique binding phrase or in a more traditional way where you put the receiver and transmitter into bind mode, and they link up. There is no reason to use traditional binding if you're flashing both your TX and RX firmware anyway. If you used a bind phrase in your user defines, there is no need to read this article. Proceed to the next section. If not, here is how to bind an ELRS TX and RX.</p>","title":"Binding ExpressLRS"},{"location":"quick-start/binding/#unique-phrase","text":"<p>You need to have a unique binding phrase in the <code>user_defines.txt</code> file or entered in the \"Custom Binding Phrase\" box in the Configurator.  After flashing your TX and RX, they will bind automatically. Is my binding phrase a secret?</p> <pre><code>-DMY_BINDING_PHRASE=\"default ExpressLRS binding phrase\"\n</code></pre>","title":"Unique Phrase"},{"location":"quick-start/binding/#traditional-binding","text":"<p>For traditional binding, the binding phrase must be commented out in user_defines on the RX.</p> <ol> <li>Power off your transmitter/radio.</li> <li>Powercycle the receiver 3 times (unplug-replug LiPo).</li> <li>Make sure the LED is doing a quick double blink, which indicates the receiver is in bind mode.</li> <li>Power up your transmitter/radio and use the [BIND] button on the ExpressLRS Lua script, which sends out a binding pulse.</li> <li>If the receiver LED turned into a solid light, it's bound!</li> </ol> <p>Important: If the RX firmware has a bind phrase, the RX will never enter binding mode using the above procedure. It must be flashed without a binding phrase to do traditional binding. Why would you not use a bind phrase though if you're already having to flash the RX anyway? </p>","title":"Traditional Binding"},{"location":"quick-start/binding/#connection-check","text":"<p>Go to the <code>Telemetry Page</code> of your model setup and try to find new sensors. If the telemetry data shows up then you are connected!</p>","title":"Connection Check"},{"location":"quick-start/firmware-options/","text":"<p></p> <p>This page aims to explain only the key options in ExpressLRS Configurator you may need for your initial setup. For a full description of all the options available, see the User Defines page.</p> <p>Some of these options are present on both the Tx and Rx Targets. It is important that these options match to both the TX module and receiver in order for them to bind. <code>team2400</code> and <code>team900</code> also share a few options and some options are unique to that frequency band. Shown below are common options available on <code>team2400</code> and <code>team900</code> TXes respectively.</p>  <p></p>   <p></p>","title":"Firmware Options"},{"location":"quick-start/firmware-options/#regulatory-domains","text":"<p><pre><code>Regulatory_Domain_AU_915\nRegulatory_Domain_EU_868\nRegulatory_Domain_IN_866\nRegulatory_Domain_FCC_915\n\nRegulatory_Domain_ISM_2400\nRegulatory_Domain_EU_CE_2400\n</code></pre> This is a relatively simple one - enable whatever regulatory domain you are in to select the frequency range to be used.</p> <p>EU Regulatory domains are now LBT compliant!</p>","title":"Regulatory Domains"},{"location":"quick-start/firmware-options/#binding-phrase","text":"<p>Entering a binding phrase allows you to skip the binding step with your receivers-- you want this set. Any transmitter using the same binding phrase will connect to any receiver with the same binding phrase, so be unique. Limit to alphanumeric phrases conforming to the Latin alphabet. Receivers flashed with firmware builds that do not have binding phrase enabled will require binding with the traditional binding method.</p>","title":"Binding Phrase"},{"location":"quick-start/firmware-options/#network-options","text":"<p><pre><code>HOME_WIFI_SSID\nHOME_WIFI_PASSWORD\n</code></pre> Set these to have the \"Wifi Update\" mode try to connect to an existing wifi network using these credentials. Configure them with the wifi settings for where you'll be flashing your firmware, to save the step of switching wifi networks on your computer or phone during the flashing process. If the device is unable to connect to this network, it will create its own network.</p>","title":"Network Options"},{"location":"quick-start/firmware-options/#other-options","text":"<p><pre><code>UNLOCK_HIGHER_POWER \n</code></pre> Enables higher output power for devices that support it but will possibly melt themselves to give it to you. Do not enable it without first updating your cooling setup or verifying the device isn't overheating when running at your chosen power.</p> <p><pre><code>UART_INVERTED\n</code></pre> This only works with ESP32 based TXes. Almost all handsets require <code>UART_INVERTED</code> on, such as the FrSky QX7, TBS Tango 2, and RadioMaster TX16S. For T8SG V2 or Deviation firmware turn this setting off.</p>","title":"Other Options"},{"location":"quick-start/firmware-options/#receiver-only-options","text":"<p></p>   <p></p>   <p>Note</p> <p>Configuration of Receivers should match the configuration of the Transmitter Module for Sync/Binding to happen between devices.</p>  <p>Most of the options listed above for the Transmitter Modules also apply to Receivers. The following are options specific to receivers that you might need.</p>","title":"Receiver Only Options"},{"location":"quick-start/firmware-options/#output-inverting","text":"<p><pre><code>RCVR_INVERT_TX\n</code></pre> If using an a flight controller that only has an RXI / SBUS (RX inverted) pad, turn on this option to invert the CRSF output from the receiver to be able to use that pad. This does not convert the output to SBUS, it is inverted CRSF, so CRSF should still be the receiver protocol selected in the flight controller software. ESP-based receivers only.</p> <p><pre><code>USE_R9MM_R9MINI_SBUS\n</code></pre> On the R9MM/R9Mini only, this changes the pin used to output CRSF from the receiver the two side pins (A9 and A10) to the pin labeled \"SBUS\" on the RX, which is inverted. Similar to <code>RCVR_INVERT_TX</code> this does not convert the output to SBUS protocol, so CRSF should still be the receiver protocol selected in the flight controller software.</p>","title":"Output Inverting"},{"location":"quick-start/firmware-options/#should-i-turn-these-offon","text":"<p><pre><code>NO_SYNC_ON_ARM\n</code></pre> Sync packets are one packet out of every 5 seconds when armed. Leave this off unless running telemetry ratio Off because you won't be able to reconnect after a failsafe while armed if this is on.</p> <p><pre><code>LOCK_ON_FIRST_CONNECTION\n</code></pre> Keeps the receiver on the last packet rate it was on if it failsafes, instead of trying every packet rate to reconnect. Should be left on.</p>","title":"Should I turn these off/on?"},{"location":"quick-start/firmware-options/#full-list","text":"<p>For a complete list of User Defines, head over to the User Defines page.</p> <p>Done! It's time to flash the firmware on your transmitter</p>","title":"Full List"},{"location":"quick-start/getting-started/","text":"<p></p> <p>Welcome to the ELRS Quick Start Guide!</p>","title":"Getting Started"},{"location":"quick-start/getting-started/#prerequisites","text":"<p>You should be comfortable navigating through your Radio Handset firmware (OpenTX/EdgeTX) and setting up models, as the guide on this website mainly covers setting up your radio for you to be able to use ExpressLRS.</p> <p>Likewise, you should also be comfortable with your Flight Controller firmware (Betaflight, INAV, etc), as the guide only covers setting up your ExpressLRS receiver to work with your flight controller firmware.</p>","title":"Prerequisites"},{"location":"quick-start/getting-started/#how-to-use-or-navigate-through-the-guide","text":"<p>This User Guide is organized to cater to both new and seasoned users of the system. The navigation at the side of the Quick Start section is arranged starting from getting the ExpressLRS Configurator installed, an Explanation of the Options available, Steps concerning the Radio and TX module, FC and Receiver setup, a \"Before you Fly\" page and a Troubleshooting page:</p>  <p></p>  <p>You can also use the Footer Navigation shown below to go through these steps:</p>  <p></p>  <p>For a specific hardware flashing guide, the pages are either in the Flashing Receivers or Flashing Transmitters sections organized semi-alphabetically. You can also use the Search Bar for any topic or info you are after:</p>  <p></p>  <p>Longer pages have a Table of Contents menu found on the right hand side of the page.</p> <p>We hope these pages will help you get started with ExpressLRS and experience one of the best and most innovative RC links in the hobby.</p> <p>If you have other questions or concerns, or maybe you need further help that isn't covered by this Guide, head over to our Discord Channel!</p> <p>ExpressLRS Discord </p>","title":"How to Use or Navigate through the Guide"},{"location":"quick-start/getting-started/#where-are-video-guides","text":"<p>Due to the current fast pace of development, video guides often end up outdated faster than intended. Specific hardware guides sometimes use pre-release firmware targets or targets intended for a different hardware which can cause confusion when specific firmware targets are added. </p> <p>We will be adding a separate videos section soon, but for now, until we find high quality, relevant and applicable guides, you are on your own. Please take note of the publication date for these videos to make sure they are still relevant.</p>","title":"Where are Video Guides?"},{"location":"quick-start/installing-configurator/","text":"<p></p> <p>There are two ways to build and flash ExpressLRS:</p> <ol> <li>ExpressLRS Configuration (Recommended)</li> <li>Development toolchain setup (For advanced users) </li> </ol>","title":"Installing the Configurator"},{"location":"quick-start/installing-configurator/#configurator-setup","text":"<p>Download the latest ExpressLRS Configurator application for your platform, following the instructions written by jurgelenas.</p> <p></p> <p>The targets for each of the supported hardware can be seen on the individual device pages. Use the navigation menu on the left to get to the specific hardware page.</p> <p>On the next page, you will find the different Firmware Options you can set along with their explanations.</p>","title":"Configurator Setup"},{"location":"quick-start/led-status/","text":"<p></p>","title":"LED Status"},{"location":"quick-start/led-status/#transmitter-module-led-status","text":"<p>If fitted with an RGB LED, ExpressLRS uses it to communicate the status of the transmitter module.</p> <p>The conditions and status LED are as follows:</p>    LED Indication Status     Rainbow fade effect Starting Up   Green heartbeat Web update mode enabled   Blue heartbeat Bluetooth joystick enabled   Red flashing 100ms on/off Radio chip not detected   One Orange flash every second No handset connection   Solid single color Connected to receiver, color indicates packet rate   Fading single color No connection to receiver, color indicates packet rate","title":"Transmitter Module LED Status"},{"location":"quick-start/led-status/#receiver-led-status","text":"<p>Receivers with a single color LED communicate their status as follows:</p>     LED Indication Status      Slow blink 500ms on/off Waiting for connection from transmitter    Fast blinking 25ms on/off WiFi mode enabled    Medium speed blink 100ms on/off Radio chip not detected    Double blink then pause Binding mode enabled    Triple blink then pause Connected to transmitter but mismatched model-match configuration    Solid on Connected to a transmitter, or bootloader mode enabled    <p>Receivers with RGB LED show status as indicated below:</p>    LED Indication Status     Rainbow fade effect Starting Up   Green heartbeat Web update mode enabled   Slow blink 500ms on/off Waiting for connection from transmitter   Red flashing 100ms on/off Radio chip not detected   Orange Double blink then pause Binding mode enabled   Orange Triple blink then pause Connected to transmitter but mismatched model-match configuration   Solid single color Connected to a transmitter, color indicates packet rate","title":"Receiver LED Status"},{"location":"quick-start/pre-1stflight/","text":"<p></p> <p>Prior to your first ExpressLRS flight, you may want to do a few tweaks to your setup to ensure a fun and trouble-free ExpressLRS experience!</p>","title":"Before First Flight"},{"location":"quick-start/pre-1stflight/#modes","text":"<p>By default, ExpressLRS uses limited bits for AUX switches (1-bit for AUX1, and 3-4 bits for other AUX channels), which results in very coarse resolutions up to 8 or 16 positions to Betaflight/INAV on the AUX channels. In most cases, it is enough (especially on a multirotor), but if you need finer resolution, enabling Wide Switch Mode option expands the resolution of AUX2-AUX8 up to 128 positions. For more information, read the switch modes page.</p> <p>One important thing to keep in mind is that Aux1 should be used as your Arming switch, with LOW (~1000us) as <code>disarmed</code> and HIGH (~2000us) as <code>armed</code>. AUX1 is the low-latency switch, sent with every packet, and only supports on/off (2-position) operation. ExpressLRS uses AUX1 to determine if your model is armed and this is the most reliable way to be able to tell your model to disarm. If your arm switch is in another aux channel, it may be several packets before that switch is transmitted, and there's no guarantee that the Receiver will actually receive that packet.</p>  <p>WARNING</p> <p>Please make sure your ARM mode is on the AUX1 channel, and the armed state is set ~2000.</p>  <p></p>","title":"Modes"},{"location":"quick-start/pre-1stflight/#rssi-and-link-quality","text":"<p>To get RSSI and Link Quality displayed in the OSD, set RSSI Channel to \"Disabled\" in the Receiver tab of the Betaflight/iNav Configurator, and RSSI_ADC should be disabled on the Configuration tab. Both of these are the default. On the OSD menu, use the Link Quality and RSSI dBm value elements (not \"RSSI Value\"). iNav have put this in the <code>CRSF RX Statistics</code> section.</p> <p></p> <p>If you wish to enable the rssi dBm warning, you'll have to change the alarm level using <code>set osd_rssi_dbm_alarm = -100</code> in CLI. A sensible value is 5-10 higher than the sensitivity shown in the ELRS.lua for the packet rate (e.g. 250Hz=-108, so -103 to -98 for the alarm).</p> <p>If using DJI Goggles, you're required to use \"RSSI Value\" as the OSD element. Therefore you have to decide between LQ or RSSI, by selecting either AUX11 (LQ) or AUX12 (RSSI) as RSSI Channel on the Receiver tab.</p> <p>More information about signal metrics is found in this great article on signal health.</p>","title":"RSSI and Link Quality"},{"location":"quick-start/pre-1stflight/#bench-test","text":"<p></p> ExpressLRS Bench Test  <p>Shown above is a Bench Test to determine if you're getting a good signal from your radio. This aims to provide you information on whether you should check your antennas (particularly the R9's Super 8) or you have good hardware overall. </p> <ul> <li>Set your ExpressLRS module to just 10mW using the Lua script. The packet rate doesn't matter much here.</li> <li>Put your radio 1m (3ft) from your receiver and power it up. Make sure the receiver and TX module antennas are oriented in the same way. (You might want to disconnect your vtx/air unit temporarily, put vtx on pit mode or have a fan blowing on it).</li> <li>Using your OSD or the Telemetry Page of your radio, take note of the RSSI dbm or the 1RSS telemetry data.</li> </ul> <p>On the 900Mhz hardware, a -20dbm or thereabouts is a good indication your hardware is in working order. On the 2.4Ghz hardware, around -40dbm to -30dbm should be good. If you're getting lower numbers than these, here are a few things you could check:</p> <ul> <li>The ExpressLRS module antenna could be loose. On some 3D printed module cases, the print may be too thick at the part where the pigtail's RP-SMA/SMA end would be attached; if so, tighten the nut on the RP-SMA/SMA to give the antenna some more space to get tightened up.</li> <li>The antenna pigtail may be damaged or not connected properly to the module's mainboard.</li> <li>On receivers using an SMD antennas, expect lower values than those equipped with wire antennas. If the receiver with the SMD antenna has heat shrink, enclosed in a whoop canopy, surrounded with carbon parts or buried inside a plane/fixed wing, expect some more attenuation of the signal.</li> <li>The Super 8 antenna from Frsky, which most of the R9Ms came with, are notorious for being faulty or would degrade from just a few weeks use. Replace it or as a temporary fix, solder all around the junction where the coax shielding and the RP-SMA meet. Another failure point is the connection of the coax to the active elements itself. It would seem okay, but due to twisting of the antenna, the connection could be severed.</li> </ul>  <p></p>   <p></p> Super8 Antenna's common points of failure  <ul> <li>Check if there aren't any missing components in your receivers, like the RF filter (can be found near the antenna or ufl). Also check if the SMD antenna is not broken or damaged and it's soldered in properly.</li> </ul>  <p></p>  <ul> <li>Most DIY modules require moving the 0 ohm resistor on the E28 from the PCB antenna side towards the UFL side. A solder bridge will work just fine as well, but make sure it is on the correct pads.</li> <li>Swap out antennas on receiver and/or the TX module; Most ExpressLRS receiver antennas use IPEX 1/UFL connectors and as long as the frequency tuning of the antenna is appropriate for the frequency you're in, it should work. You can also use old 2.4GHz WiFi Router antennas for your 2.4GHz modules, but avoid those that are dual-band. Also make sure that the connector on the antenna is the appropriate one (RP-SMA on R9 modules; SMA on most off-the-shelf ExpressLRS modules)</li> </ul>","title":"Bench Test"},{"location":"quick-start/pre-1stflight/#blackbox","text":"<p>Blackbox is handy for evaluating the performance of the RF link for a flight. Set your BB to debug mode <code>RC_SMOOTHING_RATE</code>, which will capture the rate that Betaflight is receiving RC Packets from the RX.</p>","title":"Blackbox"},{"location":"quick-start/pre-1stflight/#telemetry","text":"<p>The RX transmits a subset of telemetry it receives from the flight controller. Disabling certain messages only works if the flight controller firmware does support it. For Betaflight this is possible with the telemetry_disabled_* cli settings:</p> <pre><code># Disable Attitude telemetry item\nset telemetry_disabled_pitch = ON\nset telemetry_disabled_roll = ON\nset telemetry_disabled_heading = ON\n# Disable Battery telemetry item\nset telemetry_disabled_voltage = ON\nset telemetry_disabled_current = ON\nset telemetry_disabled_fuel = ON\n# Disable GPS telemetry item\nset telemetry_disabled_altitude = ON\nset telemetry_disabled_lat_long = ON\nset telemetry_disabled_ground_speed = ON\nset telemetry_disabled_heading = ON\n# Disable Flight Mode telemetry item (BF &gt;4.2.9)\nset telemetry_disabled_mode = ON \n</code></pre> <p>Since telemetry messages are sent with low priority it may take some time to transmit the data. The telemetry rate in the lua settings script controls how often a telemetry message should be sent. So a ratio of 1:2 means that every second message is a telemetry message, so the telemetry data is transferred very fast. A ratio 1:64 means that only one of 64 messages is a telemetry message and so the transfer happens much slower.</p> <p>The refresh rate also impacts the transfer speed. 50 Hz is slower compared to 200 Hz. So if you need fast a fast telemetry update rate choose high refresh rate, and a ratio that favors telemetry messages e.g. 200 Hz and 1:16 usually works good. For detailed information on telemetry bandwidth at different rates and ratios, see this page on telemetry bandwidth.</p> <p>To finish the telemetry setup open the telemetry page on your transmitter and select \"Discover new sensors\" and wait for the list to fill. </p>  <p>* Indication</p> <p>Notice, that there is a * sign for each row. This star indicates that this telemetry sensor was just updated.  </p>   <p>[ ] Indication</p> <p>If you see a row that does not change, and the name of the row is in square brackets it means that this sensor was not updated for some time.</p>  <p>The first values (including RSSI and link quality) should always be updated (flashing stars). If this does not happen multiple times per second the transmitter will issue a \"telemetry warning\". To prevent this warning use the setting TLM_REPORT_INTERVAL_MS.</p> <p>It should look like this (and if it does not there is something wrong with your setup):</p> <p></p> <p>The remaining values are updated at a different rate (depending on refresh rate and tlm ratio). So if you use 50 Hz and 1:64 it will happen really slow, and the update takes multiple seconds for each sensor:</p> <p></p> <p>If you use 200Hz and 1:2 tlm ratio the stars will not even blink because the update happens so fast:</p> <p></p>","title":"Telemetry"},{"location":"quick-start/pre-1stflight/#msp","text":"<p>To configure betaflight from your transmitter it's possible to use the betaflight lua scripts.  This requires the telemetry feature enabled for the RX+TX. If the telemetry page of OpenTx does not show regular updates for all sensors the LUA script will also not work.</p> <p>Mavlink is not supported and currently not planned to be added.</p> <p>To get a responsive UI configure ExpressLRS for fast data transfer so make sure to use something like <code>200Hz/500Hz</code> with <code>1:2</code> tlm and a serial baud rate of <code>400000</code>. Currently MSP is limited to <code>50Hz</code> on <code>115200</code> Baud and does not work with <code>500 Hz</code> refresh rate. The initial VTX tables download does take long - but is cached after that. </p> <p>If you get a \"retrying\" message while saving changes it means that the lua script did not receive a response fast enough. But the change usually still goes through so try reloading the page to check if the change was saved. With the recommended settings this does not happen but with slower settings it could happen.</p> <p>Done. Go Fly!</p>","title":"MSP"},{"location":"quick-start/troubleshooting/","text":"<p></p>","title":"Troubleshooting"},{"location":"quick-start/troubleshooting/#general-troubleshooting","text":"","title":"General Troubleshooting"},{"location":"quick-start/troubleshooting/#my-rx-and-tx-are-bound-but-fc-is-not-responding-to-inputs-and-i-can-only-see-10-telemetry-sensors","text":"My RX and TX are bound, but FC is not responding to inputs, and I can only see 10 Telemetry sensors <p>Check whether you have wired the receiver correctly and that Rx and Tx wires aren't swapped.</p> <p>Also check that you have the correct SerialRX configuration. You might want to revisit the FC Preparation page for the Flight Controller setup.</p> <p>Also make sure that the UART where you connected the receiver doesn't have inversion and it's in full duplex mode. You can also try a different UART.</p>","title":"My RX and TX are bound, but FC is not responding to inputs, and I can only see 10 Telemetry sensors"},{"location":"quick-start/troubleshooting/#my-rx-and-tx-are-bound-and-im-getting-more-than-10-telemetry-sensors-on-my-radio-but-im-not-getting-stick-inputs","text":"My RX and TX are bound, and I'm getting more than 10 Telemetry sensors on my Radio, but I'm not getting stick inputs <p>This is due to a model mismatch between receiver and tx module. The LED on the receiver will have 3 short blinks then a 1s pause indicating the mismatch.</p> <p>To \"fix\" this, you might want to turn On Model Matching. Please see Model Matching for more Note.</p> <p>Another thing to check is whether you have enabled RCVR_INVERT_TX option for your receiver firmware. This option is intended for FCs that doesn't have any other UARTs available (e.g. AIOs) other than an SBUS pad. See this section for more details: Output Inverting.</p> <p>For the R9mm/mini receivers, make sure you didn't enable USE_R9MM_R9MINI_SBUS in your firmware option. See Output Inverting for what this option do.</p>","title":"My RX and TX are bound, and I'm getting more than 10 Telemetry sensors on my Radio, but I'm not getting stick inputs"},{"location":"quick-start/troubleshooting/#my-rx-and-tx-are-bound-and-im-getting-stick-inputs-but-i-can-only-get-10-telemetry-sensors","text":"My RX and TX are bound, and I'm getting stick inputs, but I can only get 10 Telemetry sensors <p>Check if you have Telemetry Feature enabled in your FC Configuration.</p> <p>Also verify the Rx pad from receiver is connected properly to a Tx pad in the FC in the same UART as the Tx wire from receiver.</p> <p>Also make sure you have deleted and rediscovered the sensors. It's good to increase the TLM Ratio so the acquisition of the sensors will be faster.</p> <p>This could also mean you'll have to update your FC Firmware to a more recent version that supports at least CRSFv2 protocol.</p>","title":"My RX and TX are bound, and I'm getting stick inputs, but I can only get 10 Telemetry sensors"},{"location":"quick-start/troubleshooting/#i-think-my-receiver-and-transmitter-are-bound-as-the-led-on-the-receiver-is-solid-but-i-do-not-have-stick-inputs-or-rssi-on-radio","text":"I think my Receiver and Transmitter are bound, as the LED on the Receiver is solid. But I do not have stick inputs or RSSI on radio. <p>You are not bound. Your Receiver is probably in bootloader mode.</p> <ul> <li> <p>Make sure you have unbridged the boot pads if you flashed it via passthrough.</p> </li> <li> <p>Turn off your Radio and if the LED is still solid, but boot pads aren't bridged, the UART where the receiver is on is putting it into bootloader mode unintentionally. This is primarily caused by pull-down resistor on the RX pad to aid with SBUS line inversion. To verify it is the case with the UART, disconnect the Rx and Tx wires from the FC UART, and it should start blinking slow then after the set interval (20s - 30s by default), it will blink fast indicating it's on WiFi Mode. To \"fix\" the issue, you have two options:</p> <ul> <li>Move the receiver into another free UART.</li> <li>If there's no other UART, wire up a resistor with a value between 300 Ohm to 1k Ohm between a 3.3v pad and the FC's RX pad (where the TX from the receiver connects to).</li> </ul> </li> <li> <p>If, however, despite unsoldering the Tx and Rx wires, the LED is still solid, you probably have a soft-bricked receiver due to a failed WiFi flash as a result of not letting the receiver reboot normally. See this section for the fix.</p> </li> </ul>","title":"I think my Receiver and Transmitter are bound, as the LED on the Receiver is solid. But I do not have stick inputs or RSSI on radio."},{"location":"quick-start/troubleshooting/#my-osd-is-showing-lq-00-and-rssi-dbm-at-130-dbm-but-i-have-stick-inputs-and-more-than-10-telemetry-sensors","text":"My OSD is showing LQ 0:0 and RSSI dbm at -130 dbm, but I have stick inputs and more than 10 Telemetry sensors <p>Check whether you have RSSI Channel set to either Aux11 or Aux12. If you do, set it to disabled.</p> <p>If it's still not fixed with that, check if you have RSSI ADC enabled. If so, set it to disabled.</p>","title":"My OSD is showing LQ 0:0 and RSSI dbm at -130 dbm, but I have stick inputs and more than 10 Telemetry sensors"},{"location":"quick-start/troubleshooting/#my-osd-is-showing-lq-31-sometimes-lq-39","text":"My OSD is showing LQ 3:1 sometimes LQ 3:9 <p>Move your LQ OSD element around as it could be being obstructed by another element or it's too far to the right of the preview.</p>","title":"My OSD is showing LQ 3:1 sometimes LQ 3:9"},{"location":"quick-start/troubleshooting/#i-am-getting-telemetry-lostrecovered-and-is-getting-annoying","text":"I am getting Telemetry Lost/Recovered and is getting annoying <p>There's a handful of reasons why this is occuring, and if you have newer handset/radio, it shouldn't happen at all unless you're flying very far away using a receiver without an amplifier for its Telemetry signal (e.g. the EP receivers).</p> <ul> <li>You're on an X9D(+) or a QX7 with subpar inverter chips. Check this page on how to remedy it.</li> <li>You're on an early version of the Happymodel Slim Pro. Check this FB post for the fix from manufacturer.</li> <li>You're using a 2018 ACCST R9M, while also using a Radio with 400k or higher Baud rate. You will either have to lower the Baud rate on your radio to 115200 (QX7) or do the Resistor mod on the module as described here.</li> <li>Your module is getting loose inside its enclosure, most common on the first batches of the Happymodel ES24TX (white 3D-Printed enclosure; although the black one is only marginally better having 4 screw points instead of 2). You either have to print your own enclosure (search Thingiverse for \"expresslrs\") or find a way to tighten or snug the enclosure with the module board.</li> <li>Check the S.Port pin and connection in your module and module bay, and make sure they have a solid physical connection. On the DIY modules, particularly the full size module, the round hole/via for the Molex connector's flat pin might not be getting good connection due to cold solder joint, or insufficient solder.</li> </ul>","title":"I am getting Telemetry Lost/Recovered and is getting annoying"},{"location":"quick-start/troubleshooting/#i-need-to-plug-my-fc-a-secondthird-time-before-i-get-a-bind-led-on-receiver-is-dim-when-i-power-it-up","text":"I need to plug my FC a second/third time before I get a bind. LED on receiver is dim when I power it up <p>Update to the latest firmware as soon as you can. A batch of HM receivers have reached the market with Voltage regulators (marked SDG) that were insufficient and wasn't able to handle the higher current draw during boot up. To learn more of this issue and the fix, please check out this PR.</p>","title":"I need to plug my FC a second/third time before I get a bind. LED on receiver is dim when I power it up"},{"location":"quick-start/troubleshooting/#expresslrs-lua-script-is-stuck-at-loading","text":"ExpressLRS Lua Script is stuck at <code>Loading...</code> <p>Go back to the Radio Setup Guide and make sure your radio is prepped up for ExpressLRS.</p> <p>Also make sure your module has been flashed with v3.0 firmware. V3 Lua for V3.0-flashed modules, V2 Lua for v2.x-flashed modules (including some modules fresh from factory).</p> <p>For newly-acquired ExpressLRS modules, flashing via USB is the recommended update method.</p>","title":"ExpressLRS Lua Script is stuck at <code>Loading...</code>"},{"location":"quick-start/troubleshooting/#betaflight-lua-is-stuck-at-initializing","text":"Betaflight Lua is stuck at <code>Initializing</code> <p>Increase the TLM Ratio via the ExpressLRS Lua script to values like 1:4 or even 1:2 and retry the Betaflight Lua script.</p> <p>Also, you have to make sure you're getting more than ten (10) Telemetry sensors prior to launching the script.</p> <p>See MSP Section for more info.</p>","title":"Betaflight Lua is stuck at <code>Initializing</code>"},{"location":"quick-start/troubleshooting/#my-blackbox-log-has-stepping-on-the-rc-trace","text":"My Blackbox Log has stepping on the RC trace <p>Make sure you have disabled ADC Filter in your Radio Hardware settings.</p>","title":"My Blackbox Log has stepping on the RC trace"},{"location":"quick-start/troubleshooting/#flashingupdating","text":"<p>Tip</p> <p>Individual hardware Flashing and Updating guide can be found by using the menu on the left sidebar.</p> <p>You can also use the Search Bar on top of the page to get to your device's Flashing Guide faster.</p>","title":"Flashing/Updating"},{"location":"quick-start/troubleshooting/#invalid-serial-rx-configuration-detected","text":"Invalid serial RX configuration detected <p>This is often caused by incorrect Serial RX protocol (should be CRSF), or <code>serialrx_inverted = on</code> (should be off) or <code>serialrx_halfduplex=on</code> (should be off). The Passthrough Init section of the log will show you which setting should be corrected. See the FC Preparation Guide for the correct settings.</p>","title":"Invalid serial RX configuration detected"},{"location":"quick-start/troubleshooting/#rx-serial-not-found","text":"RX Serial not found !! <p>Make sure your Serial RX on the Ports Tab of your FC Firmware configurator is set to the correct UART. See the FC Preparation Guide for the correct settings.</p>","title":"RX Serial not found !!"},{"location":"quick-start/troubleshooting/#no-cli-available","text":"No CLI Available <p>This message can be seen on the ExpressLRS Configurator Log while using the Passthrough method and can be caused by a busy Com Port. Make sure any other Configurator Apps were closed and unplug-replug your FC to USB. You might also want to use a different USB port or cable.</p> <p>This could also mean that the FC cannot be detected by the script. This could also due to the FC being in DFU mode, which for passthrough flashing, is not needed.</p> <p>There are also Apps that are running in the background that could cause this. One of which is Cura Slicer. If there are such apps, close them first before attempting another Build and Flash. </p> <p>Unplug-replug the FC's USB before another attempt.</p>","title":"No CLI Available"},{"location":"quick-start/troubleshooting/#10-retries-but-no-success","text":"10 Retries but no Success <p>This can be due to several things:</p> <ul> <li>Incorrect bootloader is flashed or it's not flashed properly. This mainly happen on the R9 receivers. Go checkout Bootloader Flashing Guide.</li> <li>Incorrect wiring. Make sure that Rx in the Receiver is connected to a Tx pad in the FC and the Tx in the Receiver is connected to an Rx pad in the FC. Also make sure receiver is getting enough voltage (min 4v5) from the FC or voltage supply. Wiring guide is here</li> <li>Receiver is OFF. Check whether the LED on the receiver is lit, indicating it's powered and in working state.</li> <li>The UART has hardware inversion. Make sure that the UART you've connected the receiver to is not an SBUS UART that's usually have hardware inversion (most common among F4 Flight Controllers). There are Flight controllers that require you bridge a pair of pads to enable or disable the Hardware inversion of an Rx pad. You can simply try a different UART.</li> <li>The LED on the receiver is SOLID, while radio is off, could only mean that the Rx pad in the FC is being pulled LOW, putting the ESP-based receiver (EPs, ES900Rx, etc.) into Bootloader mode unintentionally, which will hinder normal passthrough operations. Feel free to try a different UART.</li> </ul>","title":"10 Retries but no Success"},{"location":"quick-start/troubleshooting/#failed-to-connect-to-esp8266-timed-out-waiting-for-packet-header","text":"Failed to connect to ESP8266: Timed out waiting for packet header. <p>This can be due to several things:</p> <ul> <li>Receiver is wired incorrectly. Please check if the Rx and Tx wires isn't swapped and connected Rx to Rx and Tx to Tx on the FC. Revisit the Receiver Wiring Guide here.</li> <li>The receiver's \"boot\" pads aren't bridged (or the button wasn't pressed and held during power up) for passthrough flashing. This is required for Passthrough flashing if the receiver is fresh from the packet and has a firmware version before 1.0.0-RC6.</li> <li>The receiver uart is putting it in Bootloader mode and is interfering with passthrough flashing. Move it into another UART.</li> </ul> <p>You can also attempt the update the via UART using an FTDI Adapter (or a USB to UART Bridge).</p> <p>Please see the Flashing guide for your particular receiver using the Sidebar on the Left.</p>","title":"Failed to connect to ESP8266: Timed out waiting for packet header."},{"location":"quick-start/troubleshooting/#i-updated-via-wifi-but-now-receiver-wont-work-and-has-solid-led","text":"I updated via WiFi but now receiver won't work and has SOLID LED <p>This is a sign that the Wifi flashing didn't go through properly due to premature power cycle. To fix this, you will have to bridge the boot pads (see here) and reflash using the Passthrough method (Telemetry option on Betaflight/iNav set to <code>OFF</code>. This is important!) or using an FTDI adapter.</p> <p>This video shows the steps albeit using vscode development environment but the ExpressLRS Configurator will work just fine. </p> <p></p> <p>To ensure that the WiFi flashing finished properly, wait until the LED on the receiver blinks slow (indicating it's looking for a TX bind) before pulling off power.</p>","title":"I updated via WiFi but now receiver won't work and has SOLID LED"},{"location":"quick-start/unbricking/","text":"<p></p>","title":"Unbricking"},{"location":"quick-start/unbricking/#help-i-bricked-my-rx","text":"<p>Take a breath, calm down, relax. If you\u2019ve had a failed update your RX or TX might be in a non-working state. The good news is that unless the hardware is damaged, it\u2019s impossible to brick any of the ExpressLRS hardware. ANY of the hardware can be recovered using the serial passthrough feature of a flight controller, or with a usb-serial adapter. </p> <p>Let\u2019s start with the RX\u2019s, since they are usually the trickiest. There are two main classes of receivers. STM32 based and ESP8285 based. If you\u2019re not sure, you probably have an ESP8285 based RX. The main difference is that the STM32 RX\u2019s don\u2019t have WiFi. </p> <p>Now, ALL the ESP8285 based RX\u2019s have a factory installed bootloader onboard which CANNOT be damaged or tampered with. You can completely screw up the upgrade and always get it back using this default bootloader. </p> <p>First, we must stop betaflight getting in the way and screwing things up with telemetry. Load up the configurator, go to the configuration page and then disable telemetry. Press save and reboot. If not already done so, the RX must be wired to the Flight controller or a USB-SERIAL adapter. </p> <p>Take note that the RX wires goes to the TX and vice versa, BOTH wires must be connected. If your receiver was already working properly and it\u2019s still wired in you\u2019ve already done this step.</p> <p>Next, we must activate the ROM bootloader. On every ESP8285 based RX there is a GPIO0 pin somewhere on the board, it may be connected to a button, or it may be a bare pad on the PCB. You must connect this pin to ground, THEN apply power. If you\u2019ve done it right the LED should be solid on. How exactly this is done depends on the type of receiver:</p> <ul> <li>If you have a receiver with a button, just hold it down while you apply power to enter the bootloader. Keep holding the button until the configurator starts uploading to the RX.</li> <li>If you have an EP1/EP2 you have to short the boot pad which is located just above GND to GND with solder. </li> </ul>","title":"HELP I BRICKED MY RX!"},{"location":"quick-start/unbricking/#happymodel-ep1-ep2-boot-pads","text":"<p></p> <p>Once the receiver is in bootloader mode, all you need to do is configure the RX in the configurator as per normal and then upload with the \u2018via_BetaflightPassthrough\u2019 method. If all goes well, you should see it upload successfully. </p>  <p>If the flashing process still fails try to move the 5V RX wire to the pin that requires LiPo to power it on. You need to power up the receiver only during the \"Passthrough Done\" stage or the \"Connecting ...\" stage.</p>  <p>If you\u2019ve still got the boot pad bridged with solder, you\u2019ll need to remove the solder before it will work again. Congratulations! You\u2019ve unbricked your receiver, go fly!</p>","title":"Happymodel EP1, EP2 boot pads:"},{"location":"quick-start/unbricking/#wall-of-text-heres-a-vid","text":"","title":"Wall of Text? Here's a vid!"},{"location":"quick-start/receivers/axis-thor/","text":"<p></p>","title":"Axis Thor"},{"location":"quick-start/receivers/axis-thor/#wiring-up-your-receiver","text":"<p>Note</p> <p>There are Flight Controllers that will pull the RX pads <code>LOW</code> which will put the ESP-based receivers into <code>Bootloader Mode</code> unintentionally. A solid LED light on these receivers even with the TX module off is a sign they are in Bootloader Mode. If this is the case, rewire the receiver to a different UART.</p>   <p></p> Axis Thor  <p>The image above show the receiver pinouts and their connections. As we're dealing with UART connection, Rx on receiver goes to a TX pad on the FC, and Tx on the receiver goes to an uninverted Rx pad on the FC.</p> <p>There are Flight Controllers that put their Receiver UART's RX pads Low, which in turn, puts the ESP-based (e.g. EP1 and EP2) receivers to Bootloader mode unintentionally. One remedy is to wire them into a different UART, or wire a pull-up resistor (300-1k ohm) between the Rx pad of the FC and a 3.3v or 5v pad, as shown below.</p>  <p></p> Wiring up receiver","title":"Wiring up your receiver"},{"location":"quick-start/receivers/axis-thor/#configuring-your-flight-controller","text":"<p>To configure your flight controller properly, please go through Configure FC page. These settings apply on INAV, Betaflight and other flight controller software.</p> <p>Ports Tab should be setup so that Serial RX is on the UART where you have soldered the receiver.</p> <p>Receiver protocol is <code>CRSF</code> with <code>serialrx_inverted = off</code> and <code>serialrx_halfduplex = off</code>.</p> <p>The next step will not be able to proceed properly and you'll have issues later if any of these are set differently. Once you have configured your Flight Controller software, close its Configurator and unplug-replug the USB cable from the FC or your computer. This will refresh the connection and you'll be ensured that the port is not busy (of high importance with the Passthrough Flashing Method).</p>","title":"Configuring your Flight Controller"},{"location":"quick-start/receivers/axis-thor/#flashing-via-wifi","text":"<ul> <li> <p>Target: <code>AXIS_THOR_2400_RX_via_WIFI</code></p> </li> <li> <p>Device Category: <code>AXIS 2.4GHz</code></p> </li> <li> <p>Device: <code>AXIS THOR 2400RX</code></p> </li> </ul>  <p></p> Flashing via WiFi","title":"Flashing via WiFi"},{"location":"quick-start/receivers/axis-thor/#method-1","text":"<p>With the receiver wired properly to your FC, select the correct target and set the Firmware Options in the ExpressLRS Configurator.</p> <p>Build the firmware. Once done, it should open a new window where the <code>AXIS_THOR_2400_RX-&lt;version&gt;.bin</code> is. Do not close this window so you can easily navigate to it once it's time to upload the firmware into the receiver.</p>  <p></p>  <p>Power your Flight Controller by either connecting a LiPo or attaching the USB cable (if the receiver gets powered from USB via a 4v5 pad). The receiver's LED will blink slowly at first, and after 20s or 30s (can be adjusted via ExpressLRS Configurator using <code>AUTO_WIFI_ON_INTERVAL</code>), it should blink fast indicating it's on Wifi Hotspot Mode.</p>  <p></p>  <p>Connect to the Wifi Network the receiver has created. It should be named something like <code>ExpressLRS RX</code> with the same <code>expresslrs</code> password as the TX Module Hotspot.</p>  <p></p>  <p>Navigate to the same web address as the TX Module (usually http://10.0.0.1). The Firmware upload page should load, and using the File Upload Form, navigate where the correct Receiver <code>AXIS_THOR_2400_RX-&lt;version&gt;.bin</code> is (like with the Tx module, you can also drag-and-drop the firmware file into the form field or use the <code>Browse</code> or <code>Choose File</code> button). Click on the Update button and the firmware file will be uploaded and the update process should commence.</p> <p>A white page should load momentarily with the message Update Success! Rebooting.... Wait a little bit (you can wait until the LED on the Receiver starts to blink slowly again) and the receiver should be updated. Power cycle the receiver and it should be able to bind with your TX module now (given you have updated the Tx Module as well, and that they have the same binding phrase and options).</p>  <p>Update for version 2.0</p> <p>Once you have updated to firmware version 2.0 or newer, the Web Update page on the Hotspot will get a few updates of its own. It will get the Update progress bar, and a Popup will be shown for Success or Error messages. Additionally, you can configure Home Network SSID and Password if you chose not to use ExpressLRS Configurator to set them. Once these are set, you can use the two methods below.</p>   <p></p>","title":"Method 1"},{"location":"quick-start/receivers/axis-thor/#method-2","text":"<p>Note</p> <p>This method will only work once the Home Network SSID and Password has been configured with the receiver.</p>  <p>With the receiver wired properly to your FC, select the right target and set your Firmware Options in the ExpressLRS Configurator.</p> <p>Build the firmware. Once done, it should open a new window where the <code>AXIS_THOR_2400_RX-&lt;version&gt;.bin</code> is. Do not close this window so you can easily navigate to it once it's time to upload the firmware into the receiver.</p>  <p></p>  <p>Power up your Flight Controller by either connecting a LiPo or attaching the USB cable (if the receiver gets powered from USB via a 4v5 pad). The receiver's LED will blink slowly at first, and after 20s or 30s (can be adjusted via ExpressLRS Configurator using <code>AUTO_WIFI_ON_INTERVAL</code>), it should blink fast indicating it's on Wifi AP Mode. The fast blink will pause and flash fast once again, indicating connection to your Home Network.</p>  <p></p>  <p>Using your browser, navigate to http://elrs_rx.local/. The Wifi Update page should load. It should show your device target along with the version of the firmware it currently has.</p> <p>Scroll down to the Firmware Update section, shown below:</p>  <p></p>  <p>Drag-and-drop the <code>AXIS_THOR_2400_RX-&lt;version&gt;.bin</code> file created by the ExpressLRS Configurator into the Choose File field, or manually navigate to the Folder by clicking the <code>Choose File</code> button. Once the correct file is selected, click the <code>Update</code>. Wait for the process to complete, indicated by a Green popup screen. </p> <p>Wait a little bit (you can wait until the LED on the Receiver starts to blink slowly again) and the receiver should be updated.</p> <p>You can now power down your Flight Controller along with the receiver.</p>","title":"Method 2"},{"location":"quick-start/receivers/axis-thor/#method-3","text":"<p>Note</p> <p>This method will only work once the Home Network SSID and Password has been configured with the receiver.</p>  <p>With the receiver wired properly to your FC, select the right target and set your Firmware Options in the ExpressLRS Configurator.</p> <p>Power up your Flight Controller by either connecting a LiPo or attaching the USB cable (if the receiver gets powered from USB via a 4v5 pad). The receiver's LED will blink slowly at first, and after 20s or 30s (can be adjusted via ExpressLRS Configurator using <code>AUTO_WIFI_ON_INTERVAL</code>), it should blink fast indicating it's on Wifi Mode.</p>  <p></p>  <p>Build &amp; Flash the firmware using the ExpressLRS Configurator. Wait for the process to complete, indicated by the \"Success\" prompt and the Receiver LED has gone back to the Slow Blink mode. You can now power down the Flight Controller.</p>  <p></p>   <p></p>","title":"Method 3"},{"location":"quick-start/receivers/axis-thor/#flashing-via-passthrough","text":"<ul> <li> <p>Target: <code>AXIS_THOR_2400_RX_via_BetaflightPassthrough</code></p> </li> <li> <p>Device Category: <code>AXIS 2.4GHz</code></p> </li> <li> <p>Device: <code>AXIS THOR 2400RX</code></p> </li> </ul>  <p></p> Flashing via Passthrough  <p>Make sure you have your receiver wired properly. Rx pad on the Receiver wired up to a Tx pad on the FC, and the Tx pad on the Receiver wired up to an Rx pad on the FC. Also make sure you have setup your FC firmware to use CRSF Protocol, and that the UART is not inverted or running in half duplex.</p> <p>For the following steps, you should be disconnected from Betaflight or INAV Configurator. Close the FC Configurator and unplug the FC from USB to refresh the connection.</p> <p>If the receiver gets powered up when you connect the FC to USB, you will need to Press and Hold the button on the receiver, connect USB and let go of the button once the LED stopped blinking and goes SOLID.</p> <p>If the receiver needs a LiPo attached to get powered up, then Press and Hold the button on the receiver, attach a LiPo, then let go once the LED in the receiver stopped blinking and goes SOLID. Then connect your FC to USB.</p>  <p>Note</p> <p>If you powered the receiver and has solid LED light, your FC is probably pulling the current UART's RX pad <code>LOW</code> which will interfere with the normal and passthrough flashing of this receiver. Find another UART and wire your receiver there instead.</p>  <p>These procedures will not be needed in subsequent passthrough flashing. This is only needed on the first time you'd update the receiver from its factory firmware.</p> <p>Select the corresponding target in the ExpressLRS Configurator, set your Firmware Options and then click Build and Flash. For first time flashing/updating, it would normally take a while.</p>  <p></p>  <p>A <code>Success</code> message will be shown once the process is complete.</p>","title":"Flashing via Passthrough"},{"location":"quick-start/receivers/axis-thor/#flashing-via-ftdi","text":"<ul> <li> <p>Target: <code>AXIS_THOR_2400_RX_via_UART</code></p> </li> <li> <p>Device Category: <code>AXIS 2.4GHz</code></p> </li> <li> <p>Device: <code>AXIS THOR 2400RX</code></p> </li> </ul>  <p></p> Flashing via UART  <p>Wire the receiver into the FTDI, with TX on receiver connected to the Rx on the FTDI, and RX on receiver connected to the Tx of the FTDI. Wire 5V and GND of the FTDI to 5V and GND of the Receiver. Press the button while powering the RX on, and release - the LED should now be solid.</p>  <p></p>  <p>Select the target and set your Firmware Options and once done, click on Build and Flash.</p>  <p></p>","title":"Flashing via FTDI"},{"location":"quick-start/receivers/betafpv2400/","text":"<p></p>","title":"BetaFPV Lite & Nano 2.4GHz"},{"location":"quick-start/receivers/betafpv2400/#wiring-up-your-receiver","text":"<p>Note</p> <p>There are Flight Controllers that will pull the RX pads <code>LOW</code> which will put the ESP-based receivers into <code>Bootloader Mode</code> unintentionally. A solid LED light on these receivers even with the TX module off is a sign they are in Bootloader Mode. If this is the case, rewire the receiver to a different UART.</p>   <p></p> BetaFPV Nano   <p></p> BetaFPV Lite (Flat &amp; Tower)  <p>The images above show the receiver pinouts and their connections. As we're dealing with UART connection, Rx on receiver goes to a TX pad on the FC, and Tx on the receiver goes to an uninverted Rx pad on the FC.</p> <p>There are Flight Controllers that put their Receiver UART's RX pads Low, which in turn, puts the ESP-based (e.g. EP1 and EP2) receivers to Bootloader mode unintentionally. One remedy is to wire them into a different UART, or wire a pull-up resistor (300-1k ohm) between the Rx pad of the FC and a 3.3v or 5v pad, as shown below.</p>  <p></p> Wiring up receiver","title":"Wiring up your receiver"},{"location":"quick-start/receivers/betafpv2400/#configuring-your-flight-controller","text":"<p>To configure your flight controller properly, please go through Configure FC page. These settings apply on INAV, Betaflight and other flight controller software.</p> <p>Ports Tab should be setup so that Serial RX is on the UART where you have soldered the receiver.</p> <p>Receiver protocol is <code>CRSF</code> with <code>serialrx_inverted = off</code> and <code>serialrx_halfduplex = off</code>.</p> <p>The next step will not be able to proceed properly and you'll have issues later if any of these are set differently. Once you have configured your Flight Controller software, close its Configurator and unplug-replug the USB cable from the FC or your computer. This will refresh the connection and you'll be ensured that the port is not busy (of high importance with the Passthrough Flashing Method).</p>","title":"Configuring your Flight Controller"},{"location":"quick-start/receivers/betafpv2400/#flashing-via-wifi","text":"<ul> <li> <p>Target: <code>BETAFPV_Nano_2400_RX_via_WIFI</code></p> </li> <li> <p>Device Category: <code>BETAFPV 2.4 GHz</code></p> </li> <li> <p>Device: <code>BETAFPV Nano 2400 RX</code>, <code>BETAFPV Lite 2400 RX</code> (Tower &amp; Flattie)</p> </li> </ul>  <p></p> Flashing via WiFi","title":"Flashing via WiFi"},{"location":"quick-start/receivers/betafpv2400/#method-1","text":"<p>With the receiver wired properly to your FC, select the correct target and set the Firmware Options in the ExpressLRS Configurator.</p> <p>Build the firmware. Once done, it should open a new window where the <code>BETAFPV_Nano_2400_RX-&lt;version&gt;.bin</code> is. Do not close this window so you can easily navigate to it once it's time to upload the firmware into the receiver.</p>  <p></p>  <p>Power your Flight Controller by either connecting a LiPo or attaching the USB cable (if the receiver gets powered from USB via a 4v5 pad). The receiver's LED will blink slowly at first, and after 20s or 30s (can be adjusted via ExpressLRS Configurator using <code>AUTO_WIFI_ON_INTERVAL</code>), it should blink fast indicating it's on Wifi Hotspot Mode.</p>  <p></p>  <p>Connect to the Wifi Network the receiver has created. It should be named something like <code>ExpressLRS RX</code> with the same <code>expresslrs</code> password as the TX Module Hotspot.</p>  <p></p>  <p>Navigate to the same web address as the TX Module (usually http://10.0.0.1). The Firmware upload page should load, and using the File Upload Form, navigate where the correct Receiver <code>BETAFPV_Nano_2400_RX-&lt;version&gt;.bin</code> is (like with the Tx module, you can also drag-and-drop the firmware file into the form field or use the <code>Browse</code> or <code>Choose File</code> button). Click on the Update button and the firmware file will be uploaded and the update process should commence.</p> <p>A white page should load momentarily with the message Update Success! Rebooting.... Wait a little bit (you can wait until the LED on the Receiver starts to blink slowly again) and the receiver should be updated. Power cycle the receiver and it should be able to bind with your TX module now (given you have updated the Tx Module as well, and that they have the same binding phrase and options).</p>  <p>Update for version 2.0</p> <p>Once you have updated to firmware version 2.0 or newer, the Web Update page on the Hotspot will get a few updates of its own. It will get the Update progress bar, and a Popup will be shown for Success or Error messages. Additionally, you can configure Home Network SSID and Password if you chose not to use ExpressLRS Configurator to set them. Once these are set, you can use the two methods below.</p>   <p></p>","title":"Method 1"},{"location":"quick-start/receivers/betafpv2400/#method-2","text":"<p>Note</p> <p>This method will only work once the Home Network SSID and Password has been configured with the receiver.</p>  <p>With the receiver wired properly to your FC, select the right target and set your Firmware Options in the ExpressLRS Configurator.</p> <p>Build the firmware. Once done, it should open a new window where the <code>BETAFPV_Nano_2400_RX-&lt;version&gt;.bin</code> is. Do not close this window so you can easily navigate to it once it's time to upload the firmware into the receiver.</p>  <p></p>  <p>Power up your Flight Controller by either connecting a LiPo or attaching the USB cable (if the receiver gets powered from USB via a 4v5 pad). The receiver's LED will blink slowly at first, and after 20s or 30s (can be adjusted via ExpressLRS Configurator using <code>AUTO_WIFI_ON_INTERVAL</code>), it should blink fast indicating it's on Wifi AP Mode. The fast blink will pause and flash fast once again, indicating connection to your Home Network.</p>  <p></p>  <p>Using your browser, navigate to http://elrs_rx.local/. The Wifi Update page should load. It should show your device target along with the version of the firmware it currently has.</p> <p>Scroll down to the Firmware Update section, shown below:</p>  <p></p>  <p>Drag-and-drop the <code>BETAFPV_Nano_2400_RX-&lt;version&gt;.bin</code> file created by the ExpressLRS Configurator into the Choose File field, or manually navigate to the Folder by clicking the <code>Choose File</code> button. Once the correct file is selected, click the <code>Update</code>. Wait for the process to complete, indicated by a Green popup screen. </p> <p>Wait a little bit (you can wait until the LED on the Receiver starts to blink slowly again) and the receiver should be updated.</p> <p>You can now power down your Flight Controller along with the receiver.</p>","title":"Method 2"},{"location":"quick-start/receivers/betafpv2400/#method-3","text":"<p>Note</p> <p>This method will only work once the Home Network SSID and Password has been configured with the receiver.</p>  <p>With the receiver wired properly to your FC, select the right target and set your Firmware Options in the ExpressLRS Configurator.</p> <p>Power up your Flight Controller by either connecting a LiPo or attaching the USB cable (if the receiver gets powered from USB via a 4v5 pad). The receiver's LED will blink slowly at first, and after 20s or 30s (can be adjusted via ExpressLRS Configurator using <code>AUTO_WIFI_ON_INTERVAL</code>), it should blink fast indicating it's on Wifi Mode.</p>  <p></p>  <p>Build &amp; Flash the firmware using the ExpressLRS Configurator. Wait for the process to complete, indicated by the \"Success\" prompt and the Receiver LED has gone back to the Slow Blink mode. You can now power down the Flight Controller.</p>  <p></p>   <p></p>","title":"Method 3"},{"location":"quick-start/receivers/betafpv2400/#flashing-via-passthrough","text":"<ul> <li> <p>Target: <code>BETAFPV_Nano_2400_RX_via_BetaflightPassthrough</code></p> </li> <li> <p>Device Category: <code>BETAFPV 2.4 GHz</code></p> </li> <li> <p>Device: <code>BETAFPV Nano 2400 RX</code>, <code>BETAFPV Lite 2400 RX</code> (Tower &amp; Flattie)</p> </li> </ul>  <p></p> Flashing via Passthrough  <p>Make sure you have your receiver wired properly. Rx pad on the Receiver wired up to a Tx pad on the FC, and the Tx pad on the Receiver wired up to an Rx pad on the FC. Also make sure you have setup your FC firmware to use CRSF Protocol, and that the UART is not inverted or running in half duplex.</p> <p>For the following steps, you should be disconnected from Betaflight or INAV Configurator. Close the FC Configurator and unplug the FC from USB to refresh the connection.</p> <p>If the receiver gets powered up when you connect the FC to USB, you will need to Press and Hold the button on the receiver, connect USB and let go of the button once the LED stopped blinking and goes SOLID.</p> <p>If the receiver needs a LiPo attached to get powered up, then Press and Hold the button on the receiver, attach a LiPo, then let go once the LED in the receiver stopped blinking and goes SOLID. Then connect your FC to USB.</p>  <p>Note</p> <p>If you powered the receiver and has solid LED light, your FC is probably pulling the current UART's RX pad <code>LOW</code> which will interfere with the normal and passthrough flashing of this receiver. Find another UART and wire your receiver there instead.</p>  <p>These procedures will not be needed in subsequent passthrough flashing. This is only needed on the first time you'd update the receiver from its factory firmware.</p> <p>Select the corresponding target in the ExpressLRS Configurator, set your Firmware Options and then click Build and Flash. For first time flashing/updating, it would normally take a while.</p>  <p></p>  <p>A <code>Success</code> message will be shown once the process is complete.</p>","title":"Flashing via Passthrough"},{"location":"quick-start/receivers/betafpv2400/#flashing-via-ftdi","text":"<ul> <li> <p>Target: <code>BETAFPV_Nano_2400_RX_via_UART</code></p> </li> <li> <p>Device Category: <code>BETAFPV 2.4 GHz</code></p> </li> <li> <p>Device: <code>BETAFPV Nano 2400 RX</code>, <code>BETAFPV Lite 2400 RX</code> (Tower &amp; Flattie)</p> </li> </ul>  <p></p> Flashing via UART  <p>Wire the receiver into the FTDI, with TX on receiver connected to the Rx on the FTDI, and RX on receiver connected to the Tx of the FTDI. Wire 5V and GND of the FTDI to 5V and GND of the Receiver. Press the button while powering the RX on, and release - the LED should now be solid.</p>  <p></p>  <p>Select the target and set your Firmware Options and once done, click on Build and Flash.</p>  <p></p>","title":"Flashing via FTDI"},{"location":"quick-start/receivers/betafpv900/","text":"<p></p>","title":"BetaFPV Nano 900Mhz"},{"location":"quick-start/receivers/betafpv900/#wiring-up-your-receiver","text":"<p>Note</p> <p>There are Flight Controllers that will pull the RX pads <code>LOW</code> which will put the ESP-based receivers into <code>Bootloader Mode</code> unintentionally. A solid LED light on these receivers even with the TX module off is a sign they are in Bootloader Mode. If this is the case, rewire the receiver to a different UART.</p>   <p></p> BetaFPV Nano  <p>The image above show the receiver pinouts and their connections. As we're dealing with UART connection, Rx on receiver goes to a TX pad on the FC, and Tx on the receiver goes to an uninverted Rx pad on the FC.</p> <p>There are Flight Controllers that put their Receiver UART's RX pads Low, which in turn, puts the ESP-based (e.g. EP1 and EP2) receivers to Bootloader mode unintentionally. One remedy is to wire them into a different UART, or wire a pull-up resistor (300-1k ohm) between the Rx pad of the FC and a 3.3v or 5v pad, as shown below.</p>  <p></p> Wiring up receiver","title":"Wiring up your receiver"},{"location":"quick-start/receivers/betafpv900/#configuring-your-flight-controller","text":"<p>To configure your flight controller properly, please go through Configure FC page. These settings apply on INAV, Betaflight and other flight controller software.</p> <p>Ports Tab should be setup so that Serial RX is on the UART where you have soldered the receiver.</p> <p>Receiver protocol is <code>CRSF</code> with <code>serialrx_inverted = off</code> and <code>serialrx_halfduplex = off</code>.</p> <p>The next step will not be able to proceed properly and you'll have issues later if any of these are set differently. Once you have configured your Flight Controller software, close its Configurator and unplug-replug the USB cable from the FC or your computer. This will refresh the connection and you'll be ensured that the port is not busy (of high importance with the Passthrough Flashing Method).</p>","title":"Configuring your Flight Controller"},{"location":"quick-start/receivers/betafpv900/#flashing-via-wifi","text":"<ul> <li> <p>Target: <code>BETAFPV_900_RX_via_WIFI</code></p> </li> <li> <p>Device Category: <code>BETAFPV 900 MHz</code></p> </li> <li> <p>Device: <code>BETAFPV 900 RX</code></p> </li> </ul>  <p></p> Flashing via WiFi","title":"Flashing via WiFi"},{"location":"quick-start/receivers/betafpv900/#method-1","text":"<p>With the receiver wired properly to your FC, select the correct target and set the Firmware Options in the ExpressLRS Configurator.</p> <p>Build the firmware. Once done, it should open a new window where the <code>BETAFPV_900_RX-&lt;version&gt;.bin</code> is. Do not close this window so you can easily navigate to it once it's time to upload the firmware into the receiver.</p>  <p></p>  <p>Power your Flight Controller by either connecting a LiPo or attaching the USB cable (if the receiver gets powered from USB via a 4v5 pad). The receiver's LED will blink slowly at first, and after 20s or 30s (can be adjusted via ExpressLRS Configurator using <code>AUTO_WIFI_ON_INTERVAL</code>), it should blink fast indicating it's on Wifi Hotspot Mode.</p>  <p></p>  <p>Connect to the Wifi Network the receiver has created. It should be named something like <code>ExpressLRS RX</code> with the same <code>expresslrs</code> password as the TX Module Hotspot.</p>  <p></p>  <p>Navigate to the same web address as the TX Module (usually http://10.0.0.1). The Firmware upload page should load, and using the File Upload Form, navigate where the correct Receiver <code>BETAFPV_900_RX-&lt;version&gt;.bin</code> is (like with the Tx module, you can also drag-and-drop the firmware file into the form field or use the <code>Browse</code> or <code>Choose File</code> button). Click on the Update button and the firmware file will be uploaded and the update process should commence.</p> <p>A white page should load momentarily with the message Update Success! Rebooting.... Wait a little bit (you can wait until the LED on the Receiver starts to blink slowly again) and the receiver should be updated. Power cycle the receiver and it should be able to bind with your TX module now (given you have updated the Tx Module as well, and that they have the same binding phrase and options).</p>  <p>Update for version 2.0</p> <p>Once you have updated to firmware version 2.0 or newer, the Web Update page on the Hotspot will get a few updates of its own. It will get the Update progress bar, and a Popup will be shown for Success or Error messages. Additionally, you can configure Home Network SSID and Password if you chose not to use ExpressLRS Configurator to set them. Once these are set, you can use the two methods below.</p>   <p></p>","title":"Method 1"},{"location":"quick-start/receivers/betafpv900/#method-2","text":"<p>Note</p> <p>This method will only work once the Home Network SSID and Password has been configured with the receiver.</p>  <p>With the receiver wired properly to your FC, select the right target and set your Firmware Options in the ExpressLRS Configurator.</p> <p>Build the firmware. Once done, it should open a new window where the <code>BETAFPV_900_RX-&lt;version&gt;.bin</code> is. Do not close this window so you can easily navigate to it once it's time to upload the firmware into the receiver.</p>  <p></p>  <p>Power up your Flight Controller by either connecting a LiPo or attaching the USB cable (if the receiver gets powered from USB via a 4v5 pad). The receiver's LED will blink slowly at first, and after 20s or 30s (can be adjusted via ExpressLRS Configurator using <code>AUTO_WIFI_ON_INTERVAL</code>), it should blink fast indicating it's on Wifi AP Mode. The fast blink will pause and flash fast once again, indicating connection to your Home Network.</p>  <p></p>  <p>Using your browser, navigate to http://elrs_rx.local/. The Wifi Update page should load. It should show your device target along with the version of the firmware it currently has.</p> <p>Scroll down to the Firmware Update section, shown below:</p>  <p></p>  <p>Drag-and-drop the <code>BETAFPV_900_RX-&lt;version&gt;.bin</code> file created by the ExpressLRS Configurator into the Choose File field, or manually navigate to the Folder by clicking the <code>Choose File</code> button. Once the correct file is selected, click the <code>Update</code>. Wait for the process to complete, indicated by a Green popup screen. </p> <p>Wait a little bit (you can wait until the LED on the Receiver starts to blink slowly again) and the receiver should be updated.</p> <p>You can now power down your Flight Controller along with the receiver.</p>","title":"Method 2"},{"location":"quick-start/receivers/betafpv900/#method-3","text":"<p>Note</p> <p>This method will only work once the Home Network SSID and Password has been configured with the receiver.</p>  <p>With the receiver wired properly to your FC, select the right target and set your Firmware Options in the ExpressLRS Configurator.</p> <p>Power up your Flight Controller by either connecting a LiPo or attaching the USB cable (if the receiver gets powered from USB via a 4v5 pad). The receiver's LED will blink slowly at first, and after 20s or 30s (can be adjusted via ExpressLRS Configurator using <code>AUTO_WIFI_ON_INTERVAL</code>), it should blink fast indicating it's on Wifi Mode.</p>  <p></p>  <p>Build &amp; Flash the firmware using the ExpressLRS Configurator. Wait for the process to complete, indicated by the \"Success\" prompt and the Receiver LED has gone back to the Slow Blink mode. You can now power down the Flight Controller.</p>  <p></p>   <p></p>","title":"Method 3"},{"location":"quick-start/receivers/betafpv900/#flashing-via-passthrough","text":"<ul> <li> <p>Target: <code>BETAFPV_900_RX_via_BetaflightPassthrough</code></p> </li> <li> <p>Device Category: <code>BETAFPV 900 MHz</code></p> </li> <li> <p>Device: <code>BETAFPV 900 RX</code></p> </li> </ul>  <p></p> Flashing via Passthrough  <p>Make sure you have your receiver wired properly. Rx pad on the Receiver wired up to a Tx pad on the FC, and the Tx pad on the Receiver wired up to an Rx pad on the FC. Also make sure you have setup your FC firmware to use CRSF Protocol, and that the UART is not inverted or running in half duplex.</p> <p>For the following steps, you should be disconnected from Betaflight or INAV Configurator. Close the FC Configurator and unplug the FC from USB to refresh the connection.</p> <p>If the receiver gets powered up when you connect the FC to USB, you will need to Press and Hold the button on the receiver, connect USB and let go of the button once the LED stopped blinking and goes SOLID.</p> <p>If the receiver needs a LiPo attached to get powered up, then Press and Hold the button on the receiver, attach a LiPo, then let go once the LED in the receiver stopped blinking and goes SOLID. Then connect your FC to USB.</p>  <p>Note</p> <p>If you powered the receiver and has solid LED light, your FC is probably pulling the current UART's RX pad <code>LOW</code> which will interfere with the normal and passthrough flashing of this receiver. Find another UART and wire your receiver there instead.</p>  <p>These procedures will not be needed in subsequent passthrough flashing. This is only needed on the first time you'd update the receiver from its factory firmware.</p> <p>Select the corresponding target in the ExpressLRS Configurator, set your Firmware Options and then click Build and Flash. For first time flashing/updating, it would normally take a while.</p>  <p></p>  <p>A <code>Success</code> message will be shown once the process is complete.</p>","title":"Flashing via Passthrough"},{"location":"quick-start/receivers/betafpv900/#flashing-via-ftdi","text":"<ul> <li> <p>Target: <code>BETAFPV_900_RX_via_UART</code></p> </li> <li> <p>Device Category: <code>BETAFPV 900 MHz</code></p> </li> <li> <p>Device: <code>BETAFPV 900 RX</code></p> </li> </ul>  <p></p> Flashing via UART  <p>Wire the receiver into the FTDI, with TX on receiver connected to the Rx on the FTDI, and RX on receiver connected to the Tx of the FTDI. Wire 5V and GND of the FTDI to 5V and GND of the Receiver. Press the button while powering the RX on, and release - the LED should now be solid.</p>  <p></p>  <p>Select the target and set your Firmware Options and once done, click on Build and Flash.</p>  <p></p>","title":"Flashing via FTDI"},{"location":"quick-start/receivers/configuring-fc/","text":"<p></p>","title":"Configuring FC"},{"location":"quick-start/receivers/configuring-fc/#serial-rx-setup","text":"<p>Once you've wired up your Receiver to your Flight Controller, you need to setup the UART for Serial RX. In the example below, the Receiver is wired to UART1 (Tx1 and Rx1 pads), and so the Serial RX column should be enabled on UART1 in the Ports Tab.</p>  <p></p>   <p></p>","title":"Serial RX Setup"},{"location":"quick-start/receivers/configuring-fc/#protocol","text":"<p>Similar to your OpenTX/EdgeTX Radio, ExpressLRS will be using the CRSF protocol between the receiver and the FC firmware (Betaflight/iNav/emuflight), so on the \"Configuration\" tab, you need to select \"Serial-based Receiver\" on the \"Receiver\" panel, and select \"CRSF\" as the Protocol. Telemetry is optional here and will enable your Flight Controller to send Flight Data back to your Radio like Battery Level, GPS Data, etc. but sending Telemetry will reduce your Channel update rate as it will use up bandwidth and time frames.</p>  <p>Note</p> <p>Betaflight 4.3.0 has moved the Receiver configuration into the Receiver Tab.</p>   <p></p>   <p></p>   <p></p>","title":"Protocol"},{"location":"quick-start/receivers/configuring-fc/#software-inversion-and-duplex-modes","text":"<p>The CRSF Protocol requires a full UART pair, uninverted and in full-duplex mode. To check for these settings, use the CLI of your Flight Controller firmware and execute <code>get serialrx</code>.</p> <ul> <li><code>serialrx_inverted</code> should be OFF; configure it with <code>set serialrx_inverted = off</code>.</li> <li><code>serialrx_halfduplex</code> should be OFF; configure it with <code>set serialrx_halfduplex = off</code>.</li> <li>Don't forget to use <code>save</code> once you're done setting these up.</li> </ul>  <p>Important</p> <p>Close your Flight Controller Configurator once you've set it up for ExpressLRS. Keeping it open could prevent the next steps from completing properly, particularly flashing via Passthrough. You must also unplug the FC from USB before proceeding to the next steps to refresh the connection.</p>  <p>Use the Navigation Menu to proceed to the Flashing Guides under the section <code>Flashing Receivers</code>.</p>","title":"Software Inversion and Duplex Modes"},{"location":"quick-start/receivers/diy2400/","text":"<p></p>","title":"DIY 2400RX"},{"location":"quick-start/receivers/diy2400/#flashing-via-passthrough","text":"<ul> <li>Targets: <ul> <li><code>DIY_2400_RX_ESP8285_SX1280_via_BetaflightPassthrough</code></li> <li><code>DIY_2400_RX_STM32_CCG_Nano_v0_5_via_BetaflightPassthrough</code></li> </ul> </li> </ul>","title":"Flashing via Passthrough"},{"location":"quick-start/receivers/diy2400/#flashing-via-stlink","text":"<ul> <li>Target: <code>DIY_2400_RX_STM32_CCG_Nano_v0_5_via_STLINK</code></li> </ul>","title":"Flashing via STLink"},{"location":"quick-start/receivers/diy2400/#flashing-via-wifi","text":"<ul> <li>Target: <code>DIY_2400_RX_ESP8285_SX1280_via_WIFI</code></li> </ul>","title":"Flashing via WiFi"},{"location":"quick-start/receivers/diy2400/#flashing-via-ftdi","text":"<ul> <li>Target: <code>DIY_2400_RX_ESP8285_SX1280_via_UART</code></li> </ul> <p>Please consult the Hardware Repo for your particular receiver.</p>","title":"Flashing via FTDI"},{"location":"quick-start/receivers/diy900/","text":"<p></p>","title":"DIY 900RX"},{"location":"quick-start/receivers/diy900/#flashing-via-passthrough","text":"<ul> <li>Target: <code>DIY_900_RX_ESP8285_SX127x_via_BetaflightPassthrough</code></li> </ul>","title":"Flashing via Passthrough"},{"location":"quick-start/receivers/diy900/#flashing-via-ftdi","text":"<ul> <li>Target: <code>DIY_900_RX_ESP8285_SX127x_via_UART</code></li> </ul> <p>Please consult the Hardware Repo for your particular receiver.</p>","title":"Flashing via FTDI"},{"location":"quick-start/receivers/flash2400/","text":"<p></p>","title":"NamimnoRC Flash"},{"location":"quick-start/receivers/flash2400/#check-your-target","text":"<p>There are more <code>ESP8285</code> based RXes in the market due to massive shortage of <code>STM32</code> Chips. These support WiFi updating, and can be easily distinguished with a few tricks. The simplest way to tell is if on the rear of the RX (the side without the U.fl/SMD antenna) there is a large white component with the label RainSun (pictured below). If this is not there, you have an STM32 based target, if it is you have an <code>_ESP_</code> target, and can update using Wifi!</p>  <p></p> RainSun Antenna   <p>Note</p> <p>New versions of the receiver also have the PCB Wifi Antenna, and doesn't have the Rainsun SMD Antenna mentioned above. These will use the same ESP-based Target, not the STM-based target.</p>","title":"Check your Target"},{"location":"quick-start/receivers/flash2400/#wiring-up-your-receiver","text":"<p>Note</p> <p>There are Flight Controllers that will pull the RX pads <code>LOW</code> which will put the ESP-based receivers into <code>Bootloader Mode</code> unintentionally. A solid LED light on these receivers even with the TX module off is a sign they are in Bootloader Mode. If this is the case, rewire the receiver to a different UART.</p>   <p></p> Flash v1; ESP-based   <p></p> Flash V2 SMD; ESP-based   <p></p> Flash V2 T-Dipole; ESP-based   <p></p> Flash V2 Diversity; ESP-based  <p>The images above show the receiver pinouts and their connections. As we're dealing with UART connection, Rx on receiver goes to a TX pad on the FC, and Tx on the receiver goes to an uninverted Rx pad on the FC.</p> <p>There are Flight Controllers that put their Receiver UART's RX pads Low, which in turn, puts the ESP-based (e.g. EP1 and EP2) receivers to Bootloader mode unintentionally. One remedy is to wire them into a different UART, or wire a pull-up resistor (300-1k ohm) between the Rx pad of the FC and a 3.3v or 5v pad, as shown below.</p>  <p></p> Wiring up receiver","title":"Wiring up your receiver"},{"location":"quick-start/receivers/flash2400/#configuring-your-flight-controller","text":"<p>To configure your flight controller properly, please go through Configure FC page. These settings apply on INAV, Betaflight and other flight controller software.</p> <p>Ports Tab should be setup so that Serial RX is on the UART where you have soldered the receiver.</p> <p>Receiver protocol is <code>CRSF</code> with <code>serialrx_inverted = off</code> and <code>serialrx_halfduplex = off</code>.</p> <p>The next step will not be able to proceed properly and you'll have issues later if any of these are set differently. Once you have configured your Flight Controller software, close its Configurator and unplug-replug the USB cable from the FC or your computer. This will refresh the connection and you'll be ensured that the port is not busy (of high importance with the Passthrough Flashing Method).</p>","title":"Configuring your Flight Controller"},{"location":"quick-start/receivers/flash2400/#flashing-via-passthrough","text":"<ul> <li> <p>Targets: </p> <ul> <li><code>NamimnoRC_FLASH_2400_ESP_RX_via_BetaflightPassthrough</code> </li> <li><code>NamimnoRC_FLASH_2400_RX_via_BetaflightPassthrough</code></li> <li><code>NamimnoRC_FLASH_2400_ESP_RX_PA_via_BetaflightPassthrough</code></li> </ul> </li> <li> <p>Device Category: </p> <ul> <li><code>NamimnoRC FLASH 2.4 GHz</code></li> </ul> </li> <li> <p>Device:</p> <ul> <li><code>NamimnoRC FLASH 2400 ESP RX</code></li> <li><code>NamimnoRC FLASH 2400 RX</code></li> <li><code>NamimnoRC FLASH 2400 ESP Diversity RX</code></li> </ul> </li> </ul>  <p></p> Flashing via Passthrough","title":"Flashing via Passthrough"},{"location":"quick-start/receivers/flash2400/#stm-based-receivers","text":"<p>Once wired properly to your FC, connect USB. Did your receiver powered up too (with both LEDs lit)? If so, disconnect USB, hold the bind button on your receiver, and reconnect to USB. The LED should start alternating between the Green and Red LEDs. Once it's alternating, you can then let go of the Bind Button.</p> <p>If your receiver didn't get powered from USB, have a lipo ready and continue with the next steps. On the ExpressLRS Configurator, with your Firmware Options set, click on Build &amp; Flash. Like on the TX module, it will take a while on the first time. Watch out for the <code>PASSTHROUGH INIT</code> stage. This stage will check your FC Configuration for the Serial RX UART (Software Inversion via \"set serialrx_inverted\" and Half Duplex mode via \"set serialrx_halfduplex\" will be checked; both should be off.)</p>  <p></p>  <p>Once <code>Retry...</code> lines appear, connect a LiPo if your receiver isn't powered by the USB (i.e. power up your receiver and FC). On subsequent flash, you can have the LiPo plugged in and receiver powered up from the start.</p> <p>Wait for this process to finish. It's done once the \"Success\" prompt is shown.</p>","title":"STM-based receivers"},{"location":"quick-start/receivers/flash2400/#esp-based-receivers","text":"<p>Make sure you have your receiver wired properly. Rx pad on the Receiver wired up to a Tx pad on the FC, and the Tx pad on the Receiver wired up to an Rx pad on the FC. Also make sure you have setup your FC firmware to use CRSF Protocol, and that the UART is not inverted or running in half duplex.</p> <p>For the following steps, you should be disconnected from Betaflight or INAV Configurator. Close the FC Configurator and unplug the FC from USB to refresh the connection.</p> <p>You will need to bridge the <code>Boot</code> pads on the receiver the first time you'll be updating via this method. The Wiring Guide shows where the <code>Boot</code> pads are. A solid LED indicates the receiver is in <code>Bootloader</code> mode when the TX module is OFF (Solid LED also indicates Radio+module &amp; Receiver is bound and has connection). </p>  <p>Note</p> <p>If you power the receiver and it has solid LED light, your FC is probably pulling the current UART's RX pad <code>LOW</code> which will interfere with the normal and passthrough flashing of this receiver. Find another UART and wire your receiver there instead.</p>  <p>These procedures will not be needed in subsequent passthrough flashing. This is only needed on the first time you'd update the receiver from its factory firmware.</p> <p>Select the corresponding target in the ExpressLRS Configurator, set your Firmware Options and then click Build and Flash. For first time flashing/updating, it would normally take a while.</p>  <p></p>  <p>A <code>Success</code> message will be shown once the process is complete.</p>","title":"ESP-based receivers"},{"location":"quick-start/receivers/flash2400/#updating-via-wifi-esp-only-recommended","text":"<ul> <li> <p>Target: </p> <ul> <li><code>NamimnoRC_FLASH_2400_ESP_RX_via_WIFI</code> </li> <li><code>NamimnoRC_FLASH_2400_ESP_RX_PA_via_WIFI</code></li> </ul> </li> <li> <p>Device Category: </p> <ul> <li><code>NamimnoRC FLASH 2.4 GHz</code></li> </ul> </li> <li> <p>Device:</p> <ul> <li><code>NamimnoRC FLASH 2400 ESP RX</code></li> <li><code>NamimnoRC FLASH 2400 ESP Diversity RX</code></li> </ul> </li> </ul>  <p></p> Updating via WiFi","title":"Updating via WiFi (ESP Only - Recommended)"},{"location":"quick-start/receivers/flash2400/#method-1","text":"<p>With the receiver wired properly to your FC, select the right target and set your Firmware Options in the ExpressLRS Configurator.</p> <p>Build the firmware. Once done, it should open a new window where the <code>NamimnoRC_FLASH_2400_ESP_RX-&lt;version&gt;.bin</code> or <code>NamimnoRC_FLASH_2400_ESP_RX_PA-&lt;version&gt;.bin</code> file is. Do not close this window so you can easily navigate to it once it's time to upload the firmware into the receiver.</p>  <p></p>  <p>Power your Flight Controller by either connecting a LiPo or attaching the USB cable (if the receiver gets powered from USB via a 4v5 pad). The receiver's LED will blink slowly at first, and after 20s or 30s (can be adjusted via ExpressLRS Configurator using <code>AUTO_WIFI_ON_INTERVAL</code>), it should blink fast indicating it's on Wifi Hotspot Mode.</p>  <p></p>  <p>Connect to the Wifi Network the receiver has created. It should be named something like <code>ExpressLRS RX</code> with the same <code>expresslrs</code> password as the TX Module Hotspot.</p>  <p></p>  <p>Navigate to the same web address as the TX Module (usually http://10.0.0.1). The Firmware upload page should load, and using the File Upload Form, navigate where the correct Receiver <code>NamimnoRC_FLASH_2400_ESP_RX-&lt;version&gt;.bin</code> or <code>NamimnoRC_FLASH_2400_ESP_RX_PA-&lt;version&gt;.bin</code> file is (like with the Tx module, you can also drag-and-drop the firmware file into the form field or use the <code>Browse</code> or <code>Choose File</code> button). Click on the Update button and the firmware file will be uploaded and the update process should commence.</p> <p>A white page should load momentarily with the message Update Success! Rebooting.... Wait a little bit (you can wait until the LED on the Receiver starts to blink slowly again) and the receiver should be updated. Power cycle the receiver and it should be able to bind with your TX module now (given you have updated the Tx Module as well, and that they have the same binding phrase and options).</p>  <p>Update for version 2.0</p> <p>Once you have updated to firmware version 2.0 or newer, the Web Update page on the Hotspot will get a few updates of its own. It will get the Update progress bar, and a Popup will be shown for Success or Error messages. Additionally, you can configure Home Network SSID and Password if you chose not to use ExpressLRS Configurator to set them. Once these are set, you can use the two methods below.</p>   <p></p>","title":"Method 1"},{"location":"quick-start/receivers/flash2400/#method-2","text":"<p>Note</p> <p>This method will only work once the Home Network SSID and Password has been configured with the receiver.</p>  <p>With the receiver wired properly to your FC, select the right target and set your Firmware Options in the ExpressLRS Configurator.</p> <p>Build the firmware. Once done, it should open a new window where the <code>NamimnoRC_FLASH_2400_ESP_RX-&lt;version&gt;.bin</code>  or <code>NamimnoRC_FLASH_2400_ESP_RX_PA-&lt;version&gt;.bin</code> file is. Do not close this window so you can easily navigate to it once it's time to upload the firmware into the receiver.</p>  <p></p>  <p>Power up your Flight Controller by either connecting a LiPo or attaching the USB cable (if the receiver gets powered from USB via a 4v5 pad). The receiver's LED will blink slowly at first, and after 20s or 30s (can be adjusted via ExpressLRS Configurator using <code>AUTO_WIFI_ON_INTERVAL</code>), it should blink fast indicating it's on Wifi AP Mode. The fast blink will pause and flash fast once again, indicating connection to your Home Network.</p>  <p></p>  <p>Using your browser, navigate to http://elrs_rx.local/. The Wifi Update page should load. It should show your device target along with the version of the firmware it currently has.</p> <p>Scroll down to the Firmware Update section, shown below:</p>  <p></p>  <p>Drag-and-drop the <code>NamimnoRC_FLASH_2400_ESP_RX-&lt;version&gt;.bin</code> or <code>NamimnoRC_FLASH_2400_ESP_RX_PA-&lt;version&gt;.bin</code> file created by the ExpressLRS Configurator into the Choose File field, or manually navigate to the Folder by clicking the <code>Choose File</code> button. Once the correct file is selected, click the <code>Update</code>. Wait for the process to complete, indicated by a Green popup screen. </p> <p>Wait a little bit (you can wait until the LED on the Receiver starts to blink slowly again) and the receiver should be updated.</p> <p>You can now power down your Flight Controller along with the receiver.</p>","title":"Method 2"},{"location":"quick-start/receivers/flash2400/#method-3","text":"<p>Note</p> <p>This method will only work once the Home Network SSID and Password has been configured with the receiver.</p>  <p>With the receiver wired properly to your FC, select the right target and set your Firmware Options in the ExpressLRS Configurator.</p> <p>Power up your Flight Controller by either connecting a LiPo or attaching the USB cable (if the receiver gets powered from USB via a 4v5 pad). The receiver's LED will blink slowly at first, and after 20s or 30s (can be adjusted via ExpressLRS Configurator using <code>AUTO_WIFI_ON_INTERVAL</code>), it should blink fast indicating it's on Wifi Mode.</p>  <p></p>  <p>Build &amp; Flash the firmware using the ExpressLRS Configurator. Wait for the process to complete, indicated by the \"Success\" prompt and the Receiver LED has gone back to the Slow Blink mode. You can now power down the Flight Controller.</p>  <p></p>   <p></p>","title":"Method 3"},{"location":"quick-start/receivers/flash2400/#updating-via-ftdi-esp-only","text":"<ul> <li> <p>Target: </p> <ul> <li><code>NamimnoRC_FLASH_2400_ESP_RX_via_UART</code> </li> <li><code>NamimnoRC_FLASH_2400_ESP_RX_PA_via_UART</code></li> </ul> </li> <li> <p>Device Category: </p> <ul> <li><code>NamimnoRC FLASH 2.4 GHz</code></li> </ul> </li> <li> <p>Device: </p> <ul> <li><code>NamimnoRC FLASH 2400 ESP RX</code></li> <li><code>NamimnoRC FLASH 2400 ESP Diversity RX</code></li> </ul> </li> </ul>  <p></p> Updating via UART  <p>Wire the receiver into the FTDI, with the TX on receiver connected to the Rx on the FTDI, and the RX on receiver connected to the Tx of the FTDI. Wire 5V and GND of the FTDI to 5V and GND of the Receiver. Press the button while powering the RX on, and release - the LED should now be solid.</p>  <p></p>  <p>Select the target and set your Firmware Options and once done, click on Build and Flash.</p>  <p></p>","title":"Updating via FTDI (ESP Only)"},{"location":"quick-start/receivers/flash2400/#updating-via-stlink-stm32-only","text":"<ul> <li> <p>Target: <code>NamimnoRC_FLASH_2400_RX_via_STLINK</code></p> </li> <li> <p>Device Category: <code>NamimnoRC FLASH 2.4 GHz</code></p> </li> <li> <p>Device: <code>NamimnoRC FLASH 2400 RX</code></p> </li> </ul>  <p></p> Updating via STLink  <p>The units provided to the documentation team did not have STM32 chips due to the chip shortage, however, the following should apply. Wire CLK, 3v3, GND and DIO to the recievers STLink pins.</p> <p>Select the target and set your Firmware Options and once done, click on Build and Flash.</p>  <p></p>","title":"Updating via STLink (STM32 Only)"},{"location":"quick-start/receivers/geprc2400/","text":"<p></p>","title":"GEPRC Nano 2.4GHz"},{"location":"quick-start/receivers/geprc2400/#wiring-up-your-receiver","text":"<p>Note</p> <p>There are Flight Controllers that will pull the RX pads <code>LOW</code> which will put the ESP-based receivers into <code>Bootloader Mode</code> unintentionally. A solid LED light on these receivers even with the TX module off is a sign they are in Bootloader Mode. If this is the case, rewire the receiver to a different UART.</p>   <p></p> GEPRC Nano   <p></p> GEPRC Nano SE  <p>The images above show the receiver pinouts and their connections. As we're dealing with UART connection, Rx on receiver goes to a TX pad on the FC, and Tx on the receiver goes to an uninverted Rx pad on the FC.</p> <p>There are Flight Controllers that put their Receiver UART's RX pads Low, which in turn, puts the ESP-based (e.g. EP1 and EP2) receivers to Bootloader mode unintentionally. One remedy is to wire them into a different UART, or wire a pull-up resistor (300-1k ohm) between the Rx pad of the FC and a 3.3v or 5v pad, as shown below.</p>  <p></p> Wiring up receiver","title":"Wiring up your receiver"},{"location":"quick-start/receivers/geprc2400/#configuring-your-flight-controller","text":"<p>To configure your flight controller properly, please go through Configure FC page. These settings apply on INAV, Betaflight and other flight controller software.</p> <p>Ports Tab should be setup so that Serial RX is on the UART where you have soldered the receiver.</p> <p>Receiver protocol is <code>CRSF</code> with <code>serialrx_inverted = off</code> and <code>serialrx_halfduplex = off</code>.</p> <p>The next step will not be able to proceed properly and you'll have issues later if any of these are set differently. Once you have configured your Flight Controller software, close its Configurator and unplug-replug the USB cable from the FC or your computer. This will refresh the connection and you'll be ensured that the port is not busy (of high importance with the Passthrough Flashing Method).</p>","title":"Configuring your Flight Controller"},{"location":"quick-start/receivers/geprc2400/#flashing-via-wifi","text":"<ul> <li> <p>Target: <code>GEPRC_Nano_2400_RX_via_WIFI</code></p> </li> <li> <p>Device Category: <code>GEPRC 2.4 GHz</code></p> </li> <li> <p>Device: <code>GEPRC Nano 2.4GHz</code></p> </li> </ul>  <p></p> Flashing via WiFi","title":"Flashing via WiFi"},{"location":"quick-start/receivers/geprc2400/#method-1","text":"<p>With the receiver wired properly to your FC, select the correct target and set the Firmware Options in the ExpressLRS Configurator.</p> <p>Build the firmware. Once done, it should open a new window where the <code>GEPRC_Nano_2400_RX-&lt;version&gt;.bin</code> is. Do not close this window so you can easily navigate to it once it's time to upload the firmware into the receiver.</p>  <p></p>  <p>Power your Flight Controller by either connecting a LiPo or attaching the USB cable (if the receiver gets powered from USB via a 4v5 pad). The receiver's LED will blink slowly at first, and after 20s or 30s (can be adjusted via ExpressLRS Configurator using <code>AUTO_WIFI_ON_INTERVAL</code>), it should blink fast indicating it's on Wifi Hotspot Mode.</p>  <p></p>  <p>Connect to the Wifi Network the receiver has created. It should be named something like <code>ExpressLRS RX</code> with the same <code>expresslrs</code> password as the TX Module Hotspot.</p>  <p></p>  <p>Navigate to the same web address as the TX Module (usually http://10.0.0.1). The Firmware upload page should load, and using the File Upload Form, navigate where the correct Receiver <code>GEPRC_Nano_2400_RX-&lt;version&gt;.bin</code> is (like with the Tx module, you can also drag-and-drop the firmware file into the form field or use the <code>Browse</code> or <code>Choose File</code> button). Click on the Update button and the firmware file will be uploaded and the update process should commence.</p> <p>A white page should load momentarily with the message Update Success! Rebooting.... Wait a little bit (you can wait until the LED on the Receiver starts to blink slowly again) and the receiver should be updated. Power cycle the receiver and it should be able to bind with your TX module now (given you have updated the Tx Module as well, and that they have the same binding phrase and options).</p>  <p>Update for version 2.0</p> <p>Once you have updated to firmware version 2.0 or newer, the Web Update page on the Hotspot will get a few updates of its own. It will get the Update progress bar, and a Popup will be shown for Success or Error messages. Additionally, you can configure Home Network SSID and Password if you chose not to use ExpressLRS Configurator to set them. Once these are set, you can use the two methods below.</p>   <p></p>","title":"Method 1"},{"location":"quick-start/receivers/geprc2400/#method-2","text":"<p>Note</p> <p>This method will only work once the Home Network SSID and Password has been configured with the receiver.</p>  <p>With the receiver wired properly to your FC, select the right target and set your Firmware Options in the ExpressLRS Configurator.</p> <p>Build the firmware. Once done, it should open a new window where the <code>GEPRC_Nano_2400_RX-&lt;version&gt;.bin</code> is. Do not close this window so you can easily navigate to it once it's time to upload the firmware into the receiver.</p>  <p></p>  <p>Power up your Flight Controller by either connecting a LiPo or attaching the USB cable (if the receiver gets powered from USB via a 4v5 pad). The receiver's LED will blink slowly at first, and after 20s or 30s (can be adjusted via ExpressLRS Configurator using <code>AUTO_WIFI_ON_INTERVAL</code>), it should blink fast indicating it's on Wifi AP Mode. The fast blink will pause and flash fast once again, indicating connection to your Home Network.</p>  <p></p>  <p>Using your browser, navigate to http://elrs_rx.local/. The Wifi Update page should load. It should show your device target along with the version of the firmware it currently has.</p> <p>Scroll down to the Firmware Update section, shown below:</p>  <p></p>  <p>Drag-and-drop the <code>GEPRC_Nano_2400_RX-&lt;version&gt;.bin</code> file created by the ExpressLRS Configurator into the Choose File field, or manually navigate to the Folder by clicking the <code>Choose File</code> button. Once the correct file is selected, click the <code>Update</code>. Wait for the process to complete, indicated by a Green popup screen. </p> <p>Wait a little bit (you can wait until the LED on the Receiver starts to blink slowly again) and the receiver should be updated.</p> <p>You can now power down your Flight Controller along with the receiver.</p>","title":"Method 2"},{"location":"quick-start/receivers/geprc2400/#method-3","text":"<p>Note</p> <p>This method will only work once the Home Network SSID and Password has been configured with the receiver.</p>  <p>With the receiver wired properly to your FC, select the right target and set your Firmware Options in the ExpressLRS Configurator.</p> <p>Power up your Flight Controller by either connecting a LiPo or attaching the USB cable (if the receiver gets powered from USB via a 4v5 pad). The receiver's LED will blink slowly at first, and after 20s or 30s (can be adjusted via ExpressLRS Configurator using <code>AUTO_WIFI_ON_INTERVAL</code>), it should blink fast indicating it's on Wifi Mode.</p>  <p></p>  <p>Build &amp; Flash the firmware using the ExpressLRS Configurator. Wait for the process to complete, indicated by the \"Success\" prompt and the Receiver LED has gone back to the Slow Blink mode. You can now power down the Flight Controller.</p>  <p></p>   <p></p>","title":"Method 3"},{"location":"quick-start/receivers/geprc2400/#flashing-via-passthrough","text":"<ul> <li> <p>Target: <code>GEPRC_Nano_2400_RX_via_BetaflightPassthrough</code></p> </li> <li> <p>Device Category: <code>GEPRC 2.4 GHz</code></p> </li> <li> <p>Device: <code>GEPRC Nano 2.4GHz</code></p> </li> </ul>  <p></p> Flashing via Passthrough  <p>Make sure you have your receiver wired properly. Rx pad on the Receiver wired up to a Tx pad on the FC, and the Tx pad on the Receiver wired up to an Rx pad on the FC. Also make sure you have setup your FC firmware to use CRSF Protocol, and that the UART is not inverted or running in half duplex.</p> <p>For the following steps, you should be disconnected from Betaflight or INAV Configurator. Close the FC Configurator and unplug the FC from USB to refresh the connection.</p> <p>If the receiver gets powered up when you connect the FC to USB, you will need to Press and Hold the button on the receiver, connect USB and let go of the button once the LED stopped blinking and goes SOLID.</p> <p>If the receiver needs a LiPo attached to get powered up, then Press and Hold the button on the receiver, attach a LiPo, then let go once the LED in the receiver stopped blinking and goes SOLID. Then connect your FC to USB.</p>  <p>Note</p> <p>If you powered the receiver and has solid LED light, your FC is probably pulling the current UART's RX pad <code>LOW</code> which will interfere with the normal and passthrough flashing of this receiver. Find another UART and wire your receiver there instead.</p>  <p>These procedures will not be needed in subsequent passthrough flashing. This is only needed on the first time you'd update the receiver from its factory firmware.</p> <p>Select the corresponding target in the ExpressLRS Configurator, set your Firmware Options and then click Build and Flash. For first time flashing/updating, it would normally take a while.</p>  <p></p>  <p>A <code>Success</code> message will be shown once the process is complete.</p>","title":"Flashing via Passthrough"},{"location":"quick-start/receivers/geprc2400/#flashing-via-ftdi","text":"<ul> <li> <p>Target: <code>GEPRC_Nano_2400_RX_via_UART</code></p> </li> <li> <p>Device Category: <code>GEPRC 2.4 GHz</code></p> </li> <li> <p>Device: <code>GEPRC Nano 2.4GHz</code></p> </li> </ul>  <p></p> Flashing via UART  <p>Wire the receiver into the FTDI, with TX on receiver connected to the Rx on the FTDI, and RX on receiver connected to the Tx of the FTDI. Wire 5V and GND of the FTDI to 5V and GND of the Receiver. Press the button while powering the RX on, and release - the LED should now be solid.</p>  <p></p>  <p>Select the target and set your Firmware Options and once done, click on Build and Flash.</p>  <p></p>","title":"Flashing via FTDI"},{"location":"quick-start/receivers/geprc900/","text":"<p></p>","title":"GEPRC Nano 900MHz"},{"location":"quick-start/receivers/geprc900/#wiring-up-your-receiver","text":"<p>Note</p> <p>There are Flight Controllers that will pull the RX pads <code>LOW</code> which will put the ESP-based receivers into <code>Bootloader Mode</code> unintentionally. A solid LED light on these receivers even with the TX module off is a sign they are in Bootloader Mode. If this is the case, rewire the receiver to a different UART.</p>   <p></p> GEPRC Nano 900MHz  <p>The image above show the receiver pinouts and their connections. As we're dealing with UART connection, Rx on receiver goes to a TX pad on the FC, and Tx on the receiver goes to an uninverted Rx pad on the FC.</p> <p>There are Flight Controllers that put their Receiver UART's RX pads Low, which in turn, puts the ESP-based (e.g. EP1 and EP2) receivers to Bootloader mode unintentionally. One remedy is to wire them into a different UART, or wire a pull-up resistor (300-1k ohm) between the Rx pad of the FC and a 3.3v or 5v pad, as shown below.</p>  <p></p> Wiring up receiver","title":"Wiring up your receiver"},{"location":"quick-start/receivers/geprc900/#configuring-your-flight-controller","text":"<p>To configure your flight controller properly, please go through Configure FC page. These settings apply on INAV, Betaflight and other flight controller software.</p> <p>Ports Tab should be setup so that Serial RX is on the UART where you have soldered the receiver.</p> <p>Receiver protocol is <code>CRSF</code> with <code>serialrx_inverted = off</code> and <code>serialrx_halfduplex = off</code>.</p> <p>The next step will not be able to proceed properly and you'll have issues later if any of these are set differently. Once you have configured your Flight Controller software, close its Configurator and unplug-replug the USB cable from the FC or your computer. This will refresh the connection and you'll be ensured that the port is not busy (of high importance with the Passthrough Flashing Method).</p>","title":"Configuring your Flight Controller"},{"location":"quick-start/receivers/geprc900/#flashing-via-wifi","text":"<ul> <li> <p>Target: <code>GEPRC_Nano_900_RX_via_WIFI</code></p> </li> <li> <p>Device Category: <code>GEPRC 900 MHz</code></p> </li> <li> <p>Device: <code>GEPRC Nano 900MHz</code></p> </li> </ul>  <p></p> Flashing via WiFi","title":"Flashing via WiFi"},{"location":"quick-start/receivers/geprc900/#method-1","text":"<p>With the receiver wired properly to your FC, select the correct target and set the Firmware Options in the ExpressLRS Configurator.</p> <p>Build the firmware. Once done, it should open a new window where the <code>GEPRC_Nano_900_RX-&lt;version&gt;.bin</code> is. Do not close this window so you can easily navigate to it once it's time to upload the firmware into the receiver.</p>  <p></p>  <p>Power your Flight Controller by either connecting a LiPo or attaching the USB cable (if the receiver gets powered from USB via a 4v5 pad). The receiver's LED will blink slowly at first, and after 20s or 30s (can be adjusted via ExpressLRS Configurator using <code>AUTO_WIFI_ON_INTERVAL</code>), it should blink fast indicating it's on Wifi Hotspot Mode.</p>  <p></p>  <p>Connect to the Wifi Network the receiver has created. It should be named something like <code>ExpressLRS RX</code> with the same <code>expresslrs</code> password as the TX Module Hotspot.</p>  <p></p>  <p>Navigate to the same web address as the TX Module (usually http://10.0.0.1). The Firmware upload page should load, and using the File Upload Form, navigate where the correct Receiver <code>GEPRC_Nano_900_RX-&lt;version&gt;.bin</code> is (like with the Tx module, you can also drag-and-drop the firmware file into the form field or use the <code>Browse</code> or <code>Choose File</code> button). Click on the Update button and the firmware file will be uploaded and the update process should commence.</p> <p>A white page should load momentarily with the message Update Success! Rebooting.... Wait a little bit (you can wait until the LED on the Receiver starts to blink slowly again) and the receiver should be updated. Power cycle the receiver and it should be able to bind with your TX module now (given you have updated the Tx Module as well, and that they have the same binding phrase and options).</p>  <p>Update for version 2.0</p> <p>Once you have updated to firmware version 2.0 or newer, the Web Update page on the Hotspot will get a few updates of its own. It will get the Update progress bar, and a Popup will be shown for Success or Error messages. Additionally, you can configure Home Network SSID and Password if you chose not to use ExpressLRS Configurator to set them. Once these are set, you can use the two methods below.</p>   <p></p>","title":"Method 1"},{"location":"quick-start/receivers/geprc900/#method-2","text":"<p>Note</p> <p>This method will only work once the Home Network SSID and Password has been configured with the receiver</p>  <p>With the receiver wired properly to your FC, select the right target and set your Firmware Options in the ExpressLRS Configurator.</p> <p>Build the firmware. Once done, it should open a new window where the <code>GEPRC_Nano_900_RX-&lt;version&gt;.bin</code> is. Do not close this window so you can easily navigate to it once it's time to upload the firmware into the receiver.</p>  <p></p>  <p>Power up your Flight Controller by either connecting a LiPo or attaching the USB cable (if the receiver gets powered from USB via a 4v5 pad). The receiver's LED will blink slowly at first, and after 20s or 30s (can be adjusted via ExpressLRS Configurator using <code>AUTO_WIFI_ON_INTERVAL</code>), it should blink fast indicating it's on Wifi AP Mode. The fast blink will pause and flash fast once again, indicating connection to your Home Network.</p>  <p></p>  <p>Using your browser, navigate to http://elrs_rx.local/. The Wifi Update page should load. It should show your device target along with the version of the firmware it currently has.</p> <p>Scroll down to the Firmware Update section, shown below:</p>  <p></p>  <p>Drag-and-drop the <code>GEPRC_Nano_900_RX-&lt;version&gt;.bin</code> file created by the ExpressLRS Configurator into the Choose File field, or manually navigate to the Folder by clicking the <code>Choose File</code> button. Once the correct file is selected, click the <code>Update</code>. Wait for the process to complete, indicated by a Green popup screen. </p> <p>Wait a little bit (you can wait until the LED on the Receiver starts to blink slowly again) and the receiver should be updated.</p> <p>You can now power down your Flight Controller along with the receiver.</p>","title":"Method 2"},{"location":"quick-start/receivers/geprc900/#method-3","text":"<p>Note</p> <p>This method will only work once the Home Network SSID and Password has been configured with the receiver.</p>  <p>With the receiver wired properly to your FC, select the right target and set your Firmware Options in the ExpressLRS Configurator.</p> <p>Power up your Flight Controller by either connecting a LiPo or attaching the USB cable (if the receiver gets powered from USB via a 4v5 pad). The receiver's LED will blink slowly at first, and after 20s or 30s (can be adjusted via ExpressLRS Configurator using <code>AUTO_WIFI_ON_INTERVAL</code>), it should blink fast indicating it's on Wifi Mode.</p>  <p></p>  <p>Build &amp; Flash the firmware using the ExpressLRS Configurator. Wait for the process to complete, indicated by the \"Success\" prompt and the Receiver LED has gone back to the Slow Blink mode. You can now power down the Flight Controller.</p>  <p></p>   <p></p>","title":"Method 3"},{"location":"quick-start/receivers/geprc900/#flashing-via-passthrough","text":"<ul> <li> <p>Target: <code>GEPRC_Nano_900_RX_via_BetaflightPassthrough</code></p> </li> <li> <p>Device Category: <code>GEPRC 900 MHz</code></p> </li> <li> <p>Device: <code>GEPRC Nano 900MHz</code></p> </li> </ul>  <p></p> Flashing via Passthrough  <p>Make sure you have your receiver wired properly. Rx pad on the Receiver wired up to a Tx pad on the FC, and the Tx pad on the Receiver wired up to an Rx pad on the FC. Also make sure you have setup your FC firmware to use CRSF Protocol, and that the UART is not inverted or running in half duplex.</p> <p>For the following steps, you should be disconnected from Betaflight or INAV Configurator. Close the FC Configurator and unplug the FC from USB to refresh the connection.</p> <p>If the receiver gets powered up when you connect the FC to USB, you will need to Press and Hold the button on the receiver, connect USB and let go of the button once the LED stopped blinking and goes SOLID.</p> <p>If the receiver needs a LiPo attached to get powered up, then Press and Hold the button on the receiver, attach a LiPo, then let go once the LED in the receiver stopped blinking and goes SOLID. Then connect your FC to USB.</p>  <p>Note</p> <p>If you powered the receiver and has solid LED light, your FC is probably pulling the current UART's RX pad <code>LOW</code> which will interfere with the normal and passthrough flashing of this receiver. Find another UART and wire your receiver there instead.</p>  <p>These procedures will not be needed in subsequent passthrough flashing. This is only needed on the first time you'd update the receiver from its factory firmware.</p> <p>Select the corresponding target in the ExpressLRS Configurator, set your Firmware Options and then click Build and Flash. For first time flashing/updating, it would normally take a while.</p>  <p></p>  <p>A <code>Success</code> message will be shown once the process is complete.</p>","title":"Flashing via Passthrough"},{"location":"quick-start/receivers/geprc900/#flashing-via-ftdi","text":"<ul> <li> <p>Target: <code>GEPRC_Nano_900_RX_via_UART</code></p> </li> <li> <p>Device Category: <code>GEPRC 900 MHz</code></p> </li> <li> <p>Device: <code>GEPRC Nano 900MHz</code></p> </li> </ul>  <p></p> Flashing via UART  <p>Wire the receiver into the FTDI, with TX on receiver connected to the Rx on the FTDI, and RX on receiver connected to the Tx of the FTDI. Wire 5V and GND of the FTDI to 5V and GND of the Receiver. Press the button while powering the RX on, and release - the LED should now be solid.</p>  <p></p>  <p>Select the target and set your Firmware Options and once done, click on Build and Flash.</p>  <p></p>","title":"Flashing via FTDI"},{"location":"quick-start/receivers/ghost2400/","text":"<p></p>","title":"IMRC Ghost"},{"location":"quick-start/receivers/ghost2400/#flashing-via-stlink-ghost-attozepto-rxs","text":"<ul> <li> <p>Target: <code>GHOST_ATTO_2400_RX_via_STLINK</code></p> </li> <li> <p>Device Category: <code>ImmersionRC Ghost</code></p> </li> <li> <p>Device: <code>GHOST ATTO 2400 RX</code></p> </li> </ul>  <p></p> Flashing via STLink  <p>Flashing the Ghost RX's is currently a 1 WAY flash. Once you flash ExpressLRS to these RX's you will not be able to use them with Ghost TX.  You will need a <code>StLink V2</code> to flash the RX's.</p>  <p></p> IMRC Ghost  <p>Connect your STLink into <code>GND</code>, <code>DIO</code>, <code>CLK</code>, <code>3.3V</code> of the receiver. Select the <code>GHOST_ATTO_2400_via_STLINK</code> target, set your Firmware Options and hit Build &amp; Flash on the ExpressLRS Configurator.</p>  <p></p>  <p>Once done, wire your receiver to your Flight Controller as normal (i.e. Rx to Tx, and Tx to Rx).</p>","title":"Flashing via STLink (Ghost Atto/Zepto RX's)"},{"location":"quick-start/receivers/ghost2400/#updating-via-passthrough","text":"<ul> <li> <p>Target: <code>GHOST_ATTO_2400_RX_via_BetaflightPassthrough</code></p> </li> <li> <p>Device Category: <code>ImmersionRC Ghost</code></p> </li> <li> <p>Device: <code>GHOST ATTO 2400 RX</code></p> </li> </ul>  <p></p> Updating via Passthrough  <p>After flashing via STLink, the <code>GHOST_ATTO_2400_RX_via_BetaflightPassthrough</code> target may now be used for future firmware updates. Select the target and set your Firmware Options and once done, click on Build and Flash.</p>  <p></p>","title":"Updating via Passthrough"},{"location":"quick-start/receivers/hglrc-hermes2400/","text":"<p></p>","title":"HGLRC Hermes 2.4GHz"},{"location":"quick-start/receivers/hglrc-hermes2400/#wiring-up-your-receiver","text":"<p>Note</p> <p>There are Flight Controllers that will pull the RX pads <code>LOW</code> which will put the ESP-based receivers into <code>Bootloader Mode</code> unintentionally. A solid LED light on these receivers even with the TX module off is a sign they are in Bootloader Mode. If this is the case, rewire the receiver to a different UART.</p>   <p></p> HGLRC Hermes 2.4GHz  <p>The image above show the receiver pinouts and their connections. As we're dealing with UART connection, Rx on receiver goes to a TX pad in the FC, and Tx on Receiver goes to an uninverted Rx pad on the FC. It also shows where the Boot pads are.</p> <p>There are Flight Controllers that put their Receiver UART's RX pads Low, which in turn, puts the ESP-based (e.g. EP1 and EP2) receivers to Bootloader mode unintentionally. One remedy is to wire them into a different UART, or wire a pull-up resistor (300-1k ohm) between the Rx pad of the FC and a 3.3v or 5v pad, as shown below.</p>  <p></p> Wiring up receiver","title":"Wiring up your receiver"},{"location":"quick-start/receivers/hglrc-hermes2400/#configuring-your-flight-controller","text":"<p>To configure your flight controller properly, please go through Configure FC page. These settings apply on INAV, Betaflight and other flight controller software.</p> <p>Ports Tab should be setup so that Serial RX is on the UART where you have soldered the receiver.</p> <p>Receiver protocol is <code>CRSF</code> with <code>serialrx_inverted = off</code> and <code>serialrx_halfduplex = off</code>.</p> <p>The next step will not be able to proceed properly and you'll have issues later if any of these are set differently. Once you have configured your Flight Controller software, close its Configurator and unplug-replug the USB cable from the FC or your computer. This will refresh the connection and you'll be ensured that the port is not busy (of high importance with the Passthrough Flashing Method).</p>","title":"Configuring your Flight Controller"},{"location":"quick-start/receivers/hglrc-hermes2400/#flashing-via-wifi","text":"<ul> <li> <p>Target: <code>HGLRC_Hermes_2400_RX_via_WIFI</code></p> </li> <li> <p>Device Category: <code>HGLRC 2.4 GHz</code></p> </li> <li> <p>Device: <code>HGLRC Hermes 2400 RX</code></p> </li> </ul>  <p></p> Flashing via WiFi","title":"Flashing via WiFi"},{"location":"quick-start/receivers/hglrc-hermes2400/#method-1","text":"<p>With the receiver wired properly to your FC, select the correct target and set the Firmware Options in the ExpressLRS Configurator.</p> <p>Build the firmware. Once done, it should open a new window where the <code>HGLRC_Hermes_2400_RX-&lt;version&gt;.bin</code> is. Do not close this window so you can easily navigate to it once it's time to upload the firmware into the receiver.</p>  <p></p>  <p>Power your Flight Controller by either connecting a LiPo or attaching the USB cable (if the receiver gets powered from USB via a 4v5 pad). The receiver's LED will blink slowly at first, and after 20s or 30s (can be adjusted via ExpressLRS Configurator using <code>AUTO_WIFI_ON_INTERVAL</code>), it should blink fast indicating it's on Wifi Hotspot Mode.</p>  <p></p>  <p>Connect to the Wifi Network the receiver has created. It should be named something like <code>ExpressLRS RX</code> with the same <code>expresslrs</code> password as the TX Module Hotspot.</p>  <p></p>  <p>Navigate to the same web address as the TX Module (usually http://10.0.0.1). The Firmware upload page should load, and using the File Upload Form, navigate where the correct Receiver <code>HGLRC_Hermes_2400_RX-&lt;version&gt;.bin</code> is (like with the Tx module, you can also drag-and-drop the firmware file into the form field or use the <code>Browse</code> or <code>Choose File</code> button). Click on the Update button and the firmware file will be uploaded and the update process should commence.</p> <p>A white page should load momentarily with the message Update Success! Rebooting.... Wait a little bit (you can wait until the LED on the Receiver starts to blink slowly again) and the receiver should be updated. Power cycle and your module and receiver should now be bound (given you have updated the Tx Module as well, and that they have the same binding phrase and options).</p>  <p>Update for version 2.0</p> <p>Once you have updated to firmware version 2.0 or newer, the Web Update page on the Hotspot will get a few updates of its own. It will get the Update progress bar, and a Popup will be shown for Success or Error messages. Additionally, you can configure Home Network SSID and Password if you chose not to use ExpressLRS Configurator to set them. Once these are set, you can use the two methods below.</p>   <p></p>","title":"Method 1"},{"location":"quick-start/receivers/hglrc-hermes2400/#method-2","text":"<p>Note</p> <p>This method will only work once the Home Network SSID and Password has been configured with the receiver.</p>  <p>With the receiver wired properly to your FC, select the right target and set your Firmware Options in the ExpressLRS Configurator.</p> <p>Build the firmware. Once done, it should open a new window where the <code>HGLRC_Hermes_2400_RX-&lt;version&gt;.bin</code> is. Do not close this window so you can easily navigate to it once it's time to upload the firmware into the receiver.</p>  <p></p>  <p>Power up your Flight Controller by either connecting a LiPo or attaching the USB cable (if the receiver gets powered from USB via a 4v5 pad). The receiver's LED will blink slowly at first, and after 20s or 30s (can be adjusted via ExpressLRS Configurator using <code>AUTO_WIFI_ON_INTERVAL</code>), it should blink fast indicating it's on Wifi AP Mode. The fast blink will pause and flash fast once again, indicating connection to your Home Network.</p>  <p></p>  <p>Using your browser, navigate to http://elrs_rx.local/. The Wifi Update page should load. It should show your device target along with the version of the firmware it currently has.</p> <p>Scroll down to the Firmware Update section, shown below:</p>  <p></p>  <p>Drag-and-drop the <code>HGLRC_Hermes_2400_RX-&lt;version&gt;.bin</code> file created by the ExpressLRS Configurator into the Choose File field, or manually navigate to the Folder by clicking the <code>Choose File</code> button. Once the correct file is selected, click the <code>Update</code>. Wait for the process to complete, indicated by a Green popup screen. </p> <p>Wait a little bit (you can wait until the LED on the Receiver starts to blink slowly again) and the receiver should be updated.</p> <p>You can now power down your Flight Controller along with the receiver.</p>","title":"Method 2"},{"location":"quick-start/receivers/hglrc-hermes2400/#method-3","text":"<p>Note</p> <p>This method will only work once the Home Network SSID and Password has been configured with the receiver.</p>  <p>With the receiver wired properly to your FC, select the right target and set your Firmware Options in the ExpressLRS Configurator.</p> <p>Power up your Flight Controller by either connecting a LiPo or attaching the USB cable (if the receiver gets powered from USB via a 4v5 pad). The receiver's LED will blink slowly at first, and after 20s or 30s (can be adjusted via ExpressLRS Configurator using <code>AUTO_WIFI_ON_INTERVAL</code>), it should blink fast indicating it's on Wifi Mode.</p>  <p></p>  <p>Build &amp; Flash the firmware using the ExpressLRS Configurator. Wait for the process to complete, indicated by the \"Success\" prompt and the Receiver LED has gone back to the Slow Blink mode. You can now power down the Flight Controller.</p>  <p></p>   <p></p>","title":"Method 3"},{"location":"quick-start/receivers/hglrc-hermes2400/#flashing-via-passthrough","text":"<ul> <li> <p>Target: <code>HGLRC_Hermes_2400_RX_via_BetaflightPassthrough</code></p> </li> <li> <p>Device Category: <code>HGLRC 2.4 GHz</code></p> </li> <li> <p>Device: <code>HGLRC Hermes 2400 RX</code></p> </li> </ul>  <p></p> Flashing via Passthrough  <p>Make sure you have your receiver wired properly. Rx pad on the Receiver wired up to a Tx pad on the FC, and the Tx pad on the Receiver wired up to an Rx pad on the FC. Also make sure you have setup your FC firmware to use CRSF Protocol, and that the UART is not inverted or running in half duplex.</p> <p>For the following steps, you should be disconnected from Betaflight or INAV Configurator. Close the FC Configurator and unplug the FC from USB to refresh the connection.</p> <p>You will need to bridge the <code>Boot</code> pads on the receiver the first time you'll be updating via this method. The Wiring Guide shows where the <code>Boot</code> pads are. A solid LED indicates the receiver is in <code>Bootloader</code> mode when the TX module is OFF (Solid LED also indicates Radio+module &amp; Receiver is bound and has connection). </p>  <p>Note</p> <p>If you haven't bridged the <code>Boot</code> pads but the receiver has solid LED light, your FC is probably pulling the current UART's RX pad <code>LOW</code> which will interfere with the normal and passthrough flashing of this receiver. Find another UART and wire your receiver there instead.</p>  <p>These procedures will not be needed in subsequent passthrough flashing. This is only needed on the first time you'd update the receiver from its factory firmware.</p> <p>Select the corresponding target in the ExpressLRS Configurator, set your Firmware Options and then click Build and Flash. For first time flashing/updating, it would normally take a while.</p>  <p></p>  <p>A <code>Success</code> message will be shown once the process is complete.</p>","title":"Flashing via Passthrough"},{"location":"quick-start/receivers/hglrc-hermes2400/#flashing-via-ftdi","text":"<ul> <li> <p>Target: <code>HGLRC_Hermes_2400_RX_via_UART</code></p> </li> <li> <p>Device Category: <code>HGLRC 2.4 GHz</code></p> </li> <li> <p>Device: <code>HGLRC Hermes 2400 RX</code></p> </li> </ul>  <p></p> Flashing via UART  <p>Wire the receiver into the FTDI, with TX on receiver connected to the Rx on the FTDI, and RX on receiver connected to the Tx of the FTDI. Wire 5V and GND of the FTDI to 5V and GND of the Receiver. Solder the boot pads together to manually put the receiver into bootloader mode upon power up. Now connect your FTDI Adapter to a USB port in your computer.</p>  <p></p>  <p>Select the target and set your Firmware Options and once done, click on Build and Flash.</p>  <p></p>","title":"Flashing via FTDI"},{"location":"quick-start/receivers/hglrc-hermes900/","text":"<p></p>","title":"HGLRC Hermes 900MHz"},{"location":"quick-start/receivers/hglrc-hermes900/#wiring-up-your-receiver","text":"<p>Note</p> <p>There are Flight Controllers that will pull the RX pads <code>LOW</code> which will put the ESP-based receivers into <code>Bootloader Mode</code> unintentionally. A solid LED light on these receivers even with the TX module off is a sign they are in Bootloader Mode. If this is the case, rewire the receiver to a different UART.</p>   <p></p> HGLRC Hermes 900MHz  <p>The image above show the receiver pinouts and their connections. As we're dealing with UART connection, Rx on receiver goes to a TX pad in the FC, and Tx on Receiver goes to an uninverted Rx pad on the FC.</p> <p>There are Flight Controllers that put their Receiver UART's RX pads Low, which in turn, puts the ESP-based (e.g. EP1 and EP2) receivers to Bootloader mode unintentionally. One remedy is to wire them into a different UART, or wire a pull-up resistor (300-1k ohm) between the Rx pad of the FC and a 3.3v or 5v pad, as shown below.</p>  <p></p> Wiring up receiver","title":"Wiring up your receiver"},{"location":"quick-start/receivers/hglrc-hermes900/#configuring-your-flight-controller","text":"<p>To configure your flight controller properly, please go through Configure FC page. These settings apply on INAV, Betaflight and other flight controller software.</p> <p>Ports Tab should be setup so that Serial RX is on the UART where you have soldered the receiver.</p> <p>Receiver protocol is <code>CRSF</code> with <code>serialrx_inverted = off</code> and <code>serialrx_halfduplex = off</code>.</p> <p>The next step will not be able to proceed properly and you'll have issues later if any of these are set differently. Once you have configured your Flight Controller software, close its Configurator and unplug-replug the USB cable from the FC or your computer. This will refresh the connection and you'll be ensured that the port is not busy (of high importance with the Passthrough Flashing Method).</p>","title":"Configuring your Flight Controller"},{"location":"quick-start/receivers/hglrc-hermes900/#flashing-via-wifi","text":"<ul> <li> <p>Target: <code>HGLRC_Hermes_900_RX_via_WIFI</code></p> </li> <li> <p>Device Category: <code>HGLRC 900 MHz</code></p> </li> <li> <p>Device: <code>HGLRC Hermes 900 RX</code></p> </li> </ul>  <p></p> Flashing via WiFi","title":"Flashing via WiFi"},{"location":"quick-start/receivers/hglrc-hermes900/#method-1","text":"<p>With the receiver wired properly to your FC, select the correct target and set the Firmware Options in the ExpressLRS Configurator.</p> <p>Build the firmware. Once done, it should open a new window where the <code>HGLRC_Hermes_900_RX-&lt;version&gt;.bin</code> is. Do not close this window so you can easily navigate to it once it's time to upload the firmware into the receiver.</p>  <p></p>  <p>Power your Flight Controller by either connecting a LiPo or attaching the USB cable (if the receiver gets powered from USB via a 4v5 pad). The receiver's LED will blink slowly at first, and after 20s or 30s (can be adjusted via ExpressLRS Configurator using <code>AUTO_WIFI_ON_INTERVAL</code>), it should blink fast indicating it's on Wifi Hotspot Mode.</p>  <p></p>  <p>Connect to the Wifi Network the receiver has created. It should be named something like <code>ExpressLRS RX</code> with the same <code>expresslrs</code> password as the TX Module Hotspot.</p>  <p></p>  <p>Navigate to the same web address as the TX Module (usually http://10.0.0.1). The Firmware upload page should load, and using the File Upload Form, navigate where the correct Receiver <code>HGLRC_Hermes_900_RX-&lt;version&gt;.bin</code> is (like with the Tx module, you can also drag-and-drop the firmware file into the form field or use the <code>Browse</code> or <code>Choose File</code> button). Click on the Update button and the firmware file will be uploaded and the update process should commence.</p> <p>A white page should load momentarily with the message Update Success! Rebooting.... Wait a little bit (you can wait until the LED on the Receiver starts to blink slowly again) and the receiver should be updated. Power cycle and your module and receiver should now be bound (given you have updated the Tx Module as well, and that they have the same binding phrase and options).</p>  <p>Update for version 2.0</p> <p>Once you have updated to firmware version 2.0 or newer, the Web Update page on the Hotspot will get a few updates of its own. It will get the Update progress bar, and a Popup will be shown for Success or Error messages. Additionally, you can configure Home Network SSID and Password if you chose not to use ExpressLRS Configurator to set them. Once these are set, you can use the two methods below.</p>   <p></p>","title":"Method 1"},{"location":"quick-start/receivers/hglrc-hermes900/#method-2","text":"<p>Note</p> <p>This method will only work once the Home Network SSID and Password has been configured with the receiver.</p>  <p>With the receiver wired properly to your FC, select the right target and set your Firmware Options in the ExpressLRS Configurator.</p> <p>Build the firmware. Once done, it should open a new window where the <code>HGLRC_Hermes_900_RX-&lt;version&gt;.bin</code> is. Do not close this window so you can easily navigate to it once it's time to upload the firmware into the receiver.</p>  <p></p>  <p>Power up your Flight Controller by either connecting a LiPo or attaching the USB cable (if the receiver gets powered from USB via a 4v5 pad). The receiver's LED will blink slowly at first, and after 20s or 30s (can be adjusted via ExpressLRS Configurator using <code>AUTO_WIFI_ON_INTERVAL</code>), it should blink fast indicating it's on Wifi AP Mode. The fast blink will pause and flash fast once again, indicating connection to your Home Network.</p>  <p></p>  <p>Using your browser, navigate to http://elrs_rx.local/. The Wifi Update page should load. It should show your device target along with the version of the firmware it currently has.</p> <p>Scroll down to the Firmware Update section, shown below:</p>  <p></p>  <p>Drag-and-drop the <code>HGLRC_Hermes_900_RX-&lt;version&gt;.bin</code> file created by the ExpressLRS Configurator into the Choose File field, or manually navigate to the Folder by clicking the <code>Choose File</code> button. Once the correct file is selected, click the <code>Update</code>. Wait for the process to complete, indicated by a Green popup screen. </p> <p>Wait a little bit (you can wait until the LED on the Receiver starts to blink slowly again) and the receiver should be updated.</p> <p>You can now power down your Flight Controller along with the receiver.</p>","title":"Method 2"},{"location":"quick-start/receivers/hglrc-hermes900/#method-3","text":"<p>Note</p> <p>This method will only work once the Home Network SSID and Password has been configured with the receiver.</p>  <p>With the receiver wired properly to your FC, select the right target and set your Firmware Options in the ExpressLRS Configurator.</p> <p>Power up your Flight Controller by either connecting a LiPo or attaching the USB cable (if the receiver gets powered from USB via a 4v5 pad). The receiver's LED will blink slowly at first, and after 20s or 30s (can be adjusted via ExpressLRS Configurator using <code>AUTO_WIFI_ON_INTERVAL</code>), it should blink fast indicating it's on Wifi Mode.</p>  <p></p>  <p>Build &amp; Flash the firmware using the ExpressLRS Configurator. Wait for the process to complete, indicated by the \"Success\" prompt and the Receiver LED has gone back to the Slow Blink mode. You can now power down the Flight Controller.</p>  <p></p>   <p></p>","title":"Method 3"},{"location":"quick-start/receivers/hglrc-hermes900/#flashing-via-passthrough","text":"<ul> <li> <p>Target: <code>HGLRC_Hermes_900_RX_via_BetaflightPassthrough</code></p> </li> <li> <p>Device Category: <code>HGLRC 900 MHz</code></p> </li> <li> <p>Device: <code>HGLRC Hermes 900 RX</code></p> </li> </ul>  <p></p> Flashing via Passthrough  <p>Make sure you have your receiver wired properly. Rx pad on the Receiver wired up to a Tx pad on the FC, and the Tx pad on the Receiver wired up to an Rx pad on the FC. Also make sure you have setup your FC firmware to use CRSF Protocol, and that the UART is not inverted or running in half duplex.</p> <p>For the following steps, you should be disconnected from Betaflight or INAV Configurator. Close the FC Configurator and unplug the FC from USB to refresh the connection.</p> <p>If the receiver gets powered up when you connect the FC to USB, you will need to Press and Hold the button on the receiver, connect USB and let go of the button once the LED stopped blinking and goes SOLID.</p> <p>If the receiver needs a LiPo attached to get powered up, then Press and Hold the button on the receiver, attach a LiPo, then let go once the LED in the receiver stopped blinking and goes SOLID. Then connect your FC to USB.</p>  <p>Note</p> <p>If you powered the receiver and has solid LED light, your FC is probably pulling the current UART's RX pad <code>LOW</code> which will interfere with the normal and passthrough flashing of this receiver. Find another UART and wire your receiver there instead.</p>  <p>These procedures will not be needed in subsequent passthrough flashing. This is only needed on the first time you'd update the receiver from its factory firmware.</p> <p>Select the corresponding target in the ExpressLRS Configurator, set your Firmware Options and then click Build and Flash. For first time flashing/updating, it would normally take a while.</p>  <p></p>  <p>A <code>Success</code> message will be shown once the process is complete.</p>","title":"Flashing via Passthrough"},{"location":"quick-start/receivers/hglrc-hermes900/#flashing-via-ftdi","text":"<ul> <li> <p>Target: <code>HGLRC_Hermes_900_RX_via_UART</code></p> </li> <li> <p>Device Category: <code>HGLRC 900 MHz</code></p> </li> <li> <p>Device: <code>HGLRC Hermes 900 RX</code></p> </li> </ul>  <p></p> Flashing via UART  <p>Wire the receiver into the FTDI, with TX on receiver connected to the Rx on the FTDI, and RX on receiver connected to the Tx of the FTDI. Wire 5V and GND of the FTDI to 5V and GND of the Receiver. Press the button while powering the RX on, and release - the LED should now be solid.</p>  <p></p>  <p>Select the target and set your Firmware Options and once done, click on Build and Flash.</p>  <p></p>","title":"Flashing via FTDI"},{"location":"quick-start/receivers/hmep2400/","text":"<p></p>","title":"Happymodel EP"},{"location":"quick-start/receivers/hmep2400/#wiring-up-your-receiver","text":"<p>Note</p> <p>There are Flight Controllers that will pull the RX pads <code>LOW</code> which will put the ESP-based receivers into <code>Bootloader Mode</code> unintentionally. A solid LED light on these receivers even with the TX module off is a sign they are in Bootloader Mode. If this is the case, rewire the receiver to a different UART.</p>   <p></p>  <p>The image above show the receiver pinouts and their connections. As we're dealing with UART connection, Rx on the receiver goes to a TX pad on the FC, and Tx on the receiver goes to an uninverted Rx pad on the FC.</p> <p>There are Flight Controllers that put their Receiver UART's RX pads Low, which in turn, puts the ESP-based (e.g. EP1 and EP2) receivers to Bootloader mode unintentionally. One remedy is to wire them into a different UART, or wire a pull-up resistor (300-1k ohm) between the Rx pad of the FC and a 3.3v or 5v pad, as shown below.</p>  <p></p> Wiring up receiver  <p>Also of note is that the EP receivers require their Boot pads (see figure above) be bridged on first time Passthrough Flash from their factory firmwares. After the first passthrough flashing, the bridge needs to be removed, and should no longer needed for subsequent passthrough flashing.</p> <p>Flashing via Wifi doesn't need the Boot Pads bridged. Moreover, if it is bridged, the receiver will stay in bootloader mode and won't activate its WiFi Mode.</p>","title":"Wiring up your receiver"},{"location":"quick-start/receivers/hmep2400/#configuring-your-flight-controller","text":"<p>To configure your flight controller properly, please go through Configure FC page. These settings apply on INAV, Betaflight and other flight controller software.</p> <p>Ports Tab should be setup so that Serial RX is on the UART where you have soldered the receiver.</p> <p>Receiver protocol is <code>CRSF</code> with <code>serialrx_inverted = off</code> and <code>serialrx_halfduplex = off</code>.</p> <p>The next step will not be able to proceed properly and you'll have issues later if any of these are set differently. Once you have configured your Flight Controller software, close its Configurator and unplug-replug the USB cable from the FC or your computer. This will refresh the connection and you'll be ensured that the port is not busy (of high importance with the Passthrough Flashing Method).</p>","title":"Configuring your Flight Controller"},{"location":"quick-start/receivers/hmep2400/#flashing-via-wifi","text":"<ul> <li> <p>Target: <code>HappyModel_EP_2400_RX_via_WIFI</code></p> </li> <li> <p>Device Category: <code>Happymodel 2.4 GHz</code></p> </li> <li> <p>Device: <code>HappyModel EP 2400 RX</code></p> </li> </ul>  <p></p> Flashing via WiFi","title":"Flashing via WiFi"},{"location":"quick-start/receivers/hmep2400/#method-1","text":"<p>(Recommended as first-flash method)</p> <p>Before your proceed, make sure you have the receiver wired properly to your FC.</p> <p>Build the firmware using the ExpressLRS Configurator using the correct Target and Firmware Options. Once done, it should open a new window where the <code>HappyModel_EP_2400_RX-&lt;version&gt;.bin</code> is. Do not close this window so you can easily navigate to it once it's time to upload the firmware into the receiver.</p>  <p></p>  <p>Power your Flight Controller by either connecting a LiPo or attaching the USB cable (if receiver gets powered from USB via a 4v5 pad). Receiver's LED will blink slow at first, and after 20s or 30s (can be adjusted via ExpressLRS Configurator using <code>AUTO_WIFI_ON_INTERVAL</code>), it should blink fast indicating it's on Wifi Hotspot Mode.</p>  <p></p>  <p>Connect to the Wifi Network the receiver has created. It should be named something like <code>ExpressLRS RX</code> with the same <code>expresslrs</code> password as the TX Module Hotspot.</p>  <p></p>  <p>Navigate to the same web address as the TX Module (usually http://10.0.0.1). The Firmware upload page should load, and using the File Upload Form, navigate where the correct Receiver <code>HappyModel_EP_2400_RX-&lt;version&gt;.bin</code> is (like with the Tx module, you can also drag-and-drop the firmware file into the form field or use the <code>Browse</code> or <code>Choose File</code> button). Click on Update button and the firmware file will be uploaded and the update process should commence. </p> <p>A white page should load momentarily with the message Update Success! Rebooting.... Wait a little bit (you can wait until the LED on the Receiver starts to blink slowly again) and the receiver should be updated. Power cycle the receiver and it should be able to bind with your TX module now (given you have updated the Tx Module as well, and that they have the same binding phrase and options).</p>  <p>Update for version 2.0</p> <p>Once you have updated to firmware version 2.0 or newer, the Web Update page on the Hotspot will get a few updates of its own. It will get the Update progress bar, and a Popup will be shown for Success or Error messages. Additionally, you can configure Home Network SSID and Password if you chose not to use ExpressLRS Configurator to set them. Once these are set, you can use the two methods below.</p>   <p></p>","title":"Method 1"},{"location":"quick-start/receivers/hmep2400/#method-2","text":"<p>Note</p> <p>This method will only work once the Home Network SSID and Password has been configured with the receiver.</p>  <p>With the receiver wired properly to your FC, select the right target and set your Firmware Options in the ExpressLRS Configurator.</p> <p>Build the firmware. Once done, it should open a new window where the <code>HappyModel_EP_2400_RX-&lt;version&gt;.bin</code> is. Do not close this window so you can easily navigate to it once it's time to upload the firmware into the receiver.</p>  <p></p>  <p>Power up your Flight Controller by either connecting a LiPo or attaching the USB cable (if the receiver gets powered from USB via a 4v5 pad). The receiver's LED will blink slowly at first, and after 20s or 30s (can be adjusted via ExpressLRS Configurator using <code>AUTO_WIFI_ON_INTERVAL</code>), it should blink fast indicating it's on Wifi AP Mode. The fast blink will pause and flash fast once again, indicating connection to your Home Network.</p>  <p></p>  <p>Using your browser, navigate to http://elrs_rx.local/. The Wifi Update page should load. It should show your device target along with the version of the firmware it currently has.</p> <p>Scroll down to the Firmware Update section, shown below:</p>  <p></p>  <p>Drag-and-drop the <code>HappyModel_EP_2400_RX-&lt;version&gt;.bin</code> file created by the ExpressLRS Configurator into the Choose File field, or manually navigate to the Folder by clicking the <code>Choose File</code> button. Once the correct file is selected, click the <code>Update</code>. Wait for the process to complete, indicated by a Green popup screen. </p> <p>Wait a little bit (you can wait until the LED on the Receiver starts to blink slowly again) and the receiver should be updated.</p> <p>You can now power down your Flight Controller along with the receiver.</p>","title":"Method 2"},{"location":"quick-start/receivers/hmep2400/#method-3","text":"<p>Note</p> <p>This method will only work once the Home Network SSID and Password has been configured with the receiver.</p>  <p>With the receiver wired properly to your FC, select the right target and set your Firmware Options in the ExpressLRS Configurator.</p> <p>Power up your Flight Controller by either connecting a LiPo or attaching the USB cable (if the receiver gets powered from USB via a 4v5 pad). The receiver's LED will blink slowly at first, and after 20s or 30s (can be adjusted via ExpressLRS Configurator using <code>AUTO_WIFI_ON_INTERVAL</code>), it should blink fast indicating it's on Wifi Mode.</p>  <p></p>  <p>Build &amp; Flash the firmware using the ExpressLRS Configurator. Wait for the process to complete, indicated by the \"Success\" prompt and the Receiver LED has gone back to the Slow Blink mode. You can now power down the Flight Controller.</p>  <p></p>   <p></p>","title":"Method 3"},{"location":"quick-start/receivers/hmep2400/#flashing-via-passthrough","text":"<ul> <li> <p>Target: <code>HappyModel_EP_2400_RX_via_BetaflightPassthrough</code></p> </li> <li> <p>Device Category: <code>Happymodel 2.4 GHz</code></p> </li> <li> <p>Device: <code>HappyModel EP 2400 RX</code></p> </li> </ul>  <p></p> Flashing via Passthrough  <p>Make sure you have your receiver wired properly. Rx pad on the Receiver wired up to a Tx pad on the FC, and the Tx pad on the Receiver wired up to an Rx pad on the FC. Also make sure you have setup your FC firmware to use CRSF Protocol, and that the UART is not inverted or running in half duplex.</p> <p>For the following steps, you should be disconnected from Betaflight or INAV Configurator. Close the FC Configurator and unplug the FC from USB to refresh the connection.</p> <p>You will need to bridge the <code>Boot</code> pads on the receiver the first time you'll be updating via this method. The Wiring Guide shows where the <code>Boot</code> pads are. A solid LED indicates the receiver is in <code>Bootloader</code> mode when the TX module is OFF (Solid LED also indicates Radio+module &amp; Receiver is bound and has connection). </p>  <p>Note</p> <p>If you haven't bridged the <code>Boot</code> pads but the receiver has solid LED light, your FC is probably pulling the current UART's RX pad <code>LOW</code> which will interfere with the normal and passthrough flashing of this receiver. Find another UART and wire your receiver there instead.</p>  <p>Bridging the <code>Boot</code> pads is no longer needed past 1.0.0-RC6. </p> <p>Power your FC with a LiPo, or if receiver is powered via USB (receiver is connected to a 4v5 pad), connect the FC to your USB port. Using the ExpressLRS Configurator, with the correct Target selected and Firmware Options set, click on Build &amp; Flash. Wait for the process to finish and you should be greeted with the \"Success\" banner.</p>  <p></p>  <p>Unplug USB and LiPo, and removed the solder on the bridged <code>Boot</code> pads. You no longer need it (past 1.0.0-RC6). Power your TX Module and then your FC to verify you are bound and has connection.</p>","title":"Flashing via Passthrough"},{"location":"quick-start/receivers/hmep2400/#flashing-via-ftdi","text":"<ul> <li> <p>Target: <code>HappyModel_EP_2400_RX_via_UART</code></p> </li> <li> <p>Device Category: <code>Happymodel 2.4 GHz</code></p> </li> <li> <p>Device: <code>HappyModel EP 2400 RX</code></p> </li> </ul>  <p></p> Flashing via UART  <p>Wire the receiver into the FTDI, with TX on receiver connected to the Rx on the FTDI, and RX on receiver connected to the Tx of the FTDI. Wire 5V and GND of the FTDI to 5V and GND of the Receiver. Short the boot pad while powering the RX on, and release - the LED should now be solid.</p>  <p></p>  <p>Select the target and set your Firmware Options then click on Build and Flash.</p>  <p></p>  <p>Once the process is done, unsolder the receiver from the FTDI Adapter, unbridge the boot pads and rewire it into your FC as per the Wiring Guide.</p>","title":"Flashing via FTDI"},{"location":"quick-start/receivers/hmes900/","text":"<p></p>","title":"Happymodel ES900RX"},{"location":"quick-start/receivers/hmes900/#es900rx","text":"","title":"ES900RX"},{"location":"quick-start/receivers/hmes900/#wiring-up-your-receiver","text":"<p>Note</p> <p>There are Flight Controllers that will pull the RX pads <code>LOW</code> which will put the ESP-based receivers into <code>Bootloader Mode</code> unintentionally. A solid LED light on these receivers even with the TX module off is a sign they are in Bootloader Mode. If this is the case, rewire the receiver to a different UART.</p>   <p></p> Happymodel ES900RX  <p>The image above show the receiver pinouts and their connections. As we're dealing with UART connection, Rx on receiver goes to a TX pad on the FC, and Tx on the receiver goes to an uninverted Rx pad on the FC.</p> <p>There are Flight Controllers that put their Receiver UART's RX pads Low, which in turn, puts the ESP-based (e.g. EP1 and EP2) receivers to Bootloader mode unintentionally. One remedy is to wire them into a different UART, or wire a pull-up resistor (300-1k ohm) between the Rx pad of the FC and a 3.3v or 5v pad, as shown below.</p>  <p></p> Wiring up receiver  <p>Also of note is that the ESP-based receivers require their Boot pads (see figure above) be bridged on first time Passthrough Flash from their factory firmwares. After the first passthrough flashing, the bridge needs to be removed, and is no longer needed for subsequent passthrough flashing.</p> <p>Flashing via Wifi doesn't need the Boot Pads bridged. Moreover, if it is bridged, the receiver will stay in bootloader mode and won't activate its WiFi Mode.</p>","title":"Wiring up your receiver"},{"location":"quick-start/receivers/hmes900/#configuring-your-flight-controller","text":"<p>To configure your flight controller properly, please go through Configure FC page. These settings apply on INAV, Betaflight and other flight controller software.</p> <p>Ports Tab should be setup so that Serial RX is on the UART where you have soldered the receiver.</p> <p>Receiver protocol is <code>CRSF</code> with <code>serialrx_inverted = off</code> and <code>serialrx_halfduplex = off</code>.</p> <p>The next step will not be able to proceed properly and you'll have issues later if any of these are set differently. Once you have configured your Flight Controller software, close its Configurator and unplug-replug the USB cable from the FC or your computer. This will refresh the connection and you'll be ensured that the port is not busy (of high importance with the Passthrough Flashing Method).</p>","title":"Configuring your Flight Controller"},{"location":"quick-start/receivers/hmes900/#flashing-via-passthrough","text":"<ul> <li> <p>Target: <code>HappyModel_RX_ES900RX_via_BetaflightPassthrough</code></p> </li> <li> <p>Device Category: <code>Happymodel 900 MHz</code></p> </li> <li> <p>Device: <code>HappyModel RX ES900RX</code></p> </li> </ul>  <p></p> Flashing via Passthrough  <p>Make sure you have your receiver wired properly. Rx pad on the Receiver wired up to a Tx pad on the FC, and the Tx pad on the Receiver wired up to an Rx pad on the FC. Also make sure you have setup your FC firmware to use CRSF Protocol, and that the UART is not inverted or running in half duplex.</p> <p>For the following steps, you should be disconnected from Betaflight or INAV Configurator. Close the FC Configurator and unplug the FC from USB to refresh the connection.</p> <p>You will need to bridge the <code>Boot</code> pads on the receiver the first time you'll be updating via this method. The Wiring Guide shows where the <code>Boot</code> pads are. A solid LED indicates the receiver is in <code>Bootloader</code> mode when the TX module is OFF (Solid LED also indicates Radio+module &amp; Receiver is bound and has connection). </p>  <p>Note</p> <p>If you powered the receiver and has solid LED light, your FC is probably pulling the current UART's RX pad <code>LOW</code> which will interfere with the normal and passthrough flashing of this receiver. Find another UART and wire your receiver there instead.</p>  <p>These procedures will not be needed in subsequent passthrough flashing. This is only needed on the first time you'd update the receiver from its factory firmware.</p> <p>Select the corresponding target in the ExpressLRS Configurator, set your Firmware Options and then click Build and Flash. For first time flashing/updating, it would normally take a while.</p>  <p></p>  <p>A <code>Success</code> message will be shown once the process is complete.</p>","title":"Flashing via Passthrough"},{"location":"quick-start/receivers/hmes900/#flashing-via-wifi","text":"<ul> <li> <p>Target: <code>HappyModel_RX_ES900RX_via_Wifi</code></p> </li> <li> <p>Device Category: <code>Happymodel 900 MHz</code></p> </li> <li> <p>Device: <code>HappyModel RX ES900RX</code></p> </li> </ul>  <p></p> Flashing via WiFi","title":"Flashing via Wifi"},{"location":"quick-start/receivers/hmes900/#method-1","text":"<p>(Recommended as first-flash method)</p> <p>With the receiver wired properly to your FC, select the right target and set your Firmware Options in the ExpressLRS Configurator.</p> <p>Build the firmware. Once done, it should open a new window where the <code>HappyModel_RX_ES900RX-&lt;version&gt;.bin</code> is. Do not close this window so you can easily navigate to it once it's time to upload the firmware into the receiver.</p>  <p></p>  <p>Power your Flight Controller by either connecting a LiPo or attaching the USB cable (if the receiver gets powered from USB via a 4v5 pad). The receiver's LED will blink slowly at first, and after 20s or 30s (can be adjusted via ExpressLRS Configurator using <code>AUTO_WIFI_ON_INTERVAL</code>), it should blink fast indicating it's on Wifi Hotspot Mode.</p>  <p></p>  <p>Connect to the Wifi Network the receiver has created. It should be named something like <code>ExpressLRS RX</code> with the same <code>expresslrs</code> password as the TX Module Hotspot.</p>  <p></p>  <p>Navigate to the same web address as the TX Module (usually http://10.0.0.1). The Firmware upload page should load, and using the File Upload Form, navigate where the correct Receiver <code>HappyModel_RX_ES900RX-&lt;version&gt;.bin</code> is (like with the Tx module, you can also drag-and-drop the firmware file into the form field or use the <code>Browse</code> or <code>Choose File</code> button). Click on the Update button and the firmware file will be uploaded and the update process should commence.</p> <p>A white page should load momentarily with the message Update Success! Rebooting.... Wait a little bit (you can wait until the LED on the Receiver starts to blink slowly again) and the receiver should be updated. Power cycle the receiver and it should be able to bind with your TX module now (given you have updated the Tx Module as well, and that they have the same binding phrase and options).</p>  <p>Update for version 2.0</p> <p>Once you have updated to firmware version 2.0 or newer, the Web Update page on the Hotspot will get a few updates of its own. It will get the Update progress bar, and a Popup will be shown for Success or Error messages. Additionally, you can configure Home Network SSID and Password if you chose not to use ExpressLRS Configurator to set them. Once these are set, you can use the two methods below.</p>   <p></p>","title":"Method 1"},{"location":"quick-start/receivers/hmes900/#method-2","text":"<p>Note</p> <p>This method will only work once the Home Network SSID and Password has been configured with the receiver.</p>  <p>With the receiver wired properly to your FC, select the right target and set your Firmware Options in the ExpressLRS Configurator.</p> <p>Build the firmware. Once done, it should open a new window where the <code>HappyModel_RX_ES900RX-&lt;version&gt;.bin</code> is. Do not close this window so you can easily navigate to it once it's time to upload the firmware into the receiver.</p>  <p></p>  <p>Power up your Flight Controller by either connecting a LiPo or attaching the USB cable (if the receiver gets powered from USB via a 4v5 pad). The receiver's LED will blink slowly at first, and after 20s or 30s (can be adjusted via ExpressLRS Configurator using <code>AUTO_WIFI_ON_INTERVAL</code>), it should blink fast indicating it's on Wifi AP Mode. The fast blink will pause and flash fast once again, indicating connection to your Home Network.</p>  <p></p>  <p>Using your browser, navigate to http://elrs_rx.local/. The Wifi Update page should load. It should show your device target along with the version of the firmware it currently has.</p> <p>Scroll down to the Firmware Update section, shown below:</p>  <p></p>  <p>Drag-and-drop the <code>HappyModel_RX_ES900RX-&lt;version&gt;.bin</code> file created by the ExpressLRS Configurator into the Choose File field, or manually navigate to the Folder by clicking the <code>Choose File</code> button. Once the correct file is selected, click the <code>Update</code>. Wait for the process to complete, indicated by a Green popup screen. </p> <p>Wait a little bit (you can wait until the LED on the Receiver starts to blink slowly again) and the receiver should be updated.</p> <p>You can now power down your Flight Controller along with the receiver.</p>","title":"Method 2"},{"location":"quick-start/receivers/hmes900/#method-3","text":"<p>Note</p> <p>This method will only work once the Home Network SSID and Password has been configured with the receiver.</p>  <p>With the receiver wired properly to your FC, select the right target and set your Firmware Options in the ExpressLRS Configurator.</p> <p>Power up your Flight Controller by either connecting a LiPo or attaching the USB cable (if the receiver gets powered from USB via a 4v5 pad). The receiver's LED will blink slowly at first, and after 20s or 30s (can be adjusted via ExpressLRS Configurator using <code>AUTO_WIFI_ON_INTERVAL</code>), it should blink fast indicating it's on Wifi Mode.</p>  <p></p>  <p>Build &amp; Flash the firmware using the ExpressLRS Configurator. Wait for the process to complete, indicated by the \"Success\" prompt and the Receiver LED has gone back to the Slow Blink mode. You can now power down the Flight Controller.</p>  <p></p>   <p></p>","title":"Method 3"},{"location":"quick-start/receivers/hmes900/#es915868rx-discontinued","text":"","title":"ES915/868RX (Discontinued)"},{"location":"quick-start/receivers/hmes900/#flashing-via-passthrough_1","text":"<ul> <li> <p>Target: <code>HappyModel_RX_ES915RX_via_BetaflightPassthrough</code></p> </li> <li> <p>Device Category: <code>Happymodel 900 MHz</code></p> </li> <li> <p>Device: <code>HappyModel RX ES915RX</code></p> </li> </ul>  <p></p> Flashing via Passthrough   <p></p> Happymodel ES915RX  <p>Once wired properly to your FC as shown above, connect your FC to USB. Did your receiver powered up too (with both LEDs lit)? If so, disconnect USB, hold the bind button on your receiver, and reconnect to USB. The LED should start alternating between the Green and Red LEDs. Once it's alternating, you can then let go of the Bind Button.</p> <p>If your receiver didn't get powered from USB, have a lipo ready and continue with the next steps. On the ExpressLRS Configurator, with your Firmware Options set, click on Build &amp; Flash. Like on the TX module, it will take a while on the first time. Watch out for the <code>Passthrough Init</code> stage. This stage will check your FC Configuration for the Serial RX UART (Software Inversion via \"set serialrx_inverted\" and Half Duplex mode via \"set serialrx_halfduplex\" will be checked; both should be off.)</p>  <p></p>  <p>Once <code>Retry...</code> lines appear, connect a LiPo if your receiver isn't powered by the USB (i.e. power up your receiver and FC). On subsequent flash, you can have the LiPo plugged in and receiver powered up from the start.</p> <p>Wait for this process to finish. It's done once the \"Success\" prompt is shown.</p>","title":"Flashing via Passthrough"},{"location":"quick-start/receivers/hmes900/#flashing-via-stlink","text":"<ul> <li> <p>Target: <code>HappyModel_RX_ES915RX_via_STLINK</code></p> </li> <li> <p>Device Category: <code>Happymodel 900 MHz</code></p> </li> <li> <p>Device: <code>HappyModel RX ES915RX</code></p> </li> </ul>  <p></p> Flashing via STLink   <p></p> Happymodel ES915RX  <p>Connect your STLink into <code>GND</code>, <code>DIO</code>, <code>CLK</code>, <code>3V3</code> of the receiver. These pads are marked clearly in the top left of the image above.</p> <p>Using the correct target specific for your receiver, set your Firmware Options and hit Build &amp; Flash on the ExpressLRS Configurator.</p>  <p></p>  <p>Once done, wire your receiver to your Flight Controller. Passthrough flashing can now be used for updating the receiver.</p>","title":"Flashing via STLink"},{"location":"quick-start/receivers/hmpp2400/","text":"<p></p>","title":"Happymodel PP"},{"location":"quick-start/receivers/hmpp2400/#wiring-up-your-receiver","text":"<p></p> Happymodel PP  <p>The image above show the receiver pinout and their connections. As we're dealing with UART connection, Rx on receiver goes to a TX pad in the FC, and Tx on Receiver goes to an uninverted Rx pad on the FC.</p>  <p>Note</p> <p>The PP doesn't have a <code>Boot</code> pad so there's no need to bridge any pads.</p>","title":"Wiring up your receiver"},{"location":"quick-start/receivers/hmpp2400/#configuring-your-flight-controller","text":"<p>To configure your flight controller properly, please go through Configure FC page. These settings apply on INAV, Betaflight and other flight controller software.</p> <p>Ports Tab should be setup so that Serial RX is on the UART where you have soldered the receiver.</p> <p>Receiver protocol is <code>CRSF</code> with <code>serialrx_inverted = off</code> and <code>serialrx_halfduplex = off</code>.</p> <p>The next step will not be able to proceed properly and you'll have issues later if any of these are set differently. Once you have configured your Flight Controller software, close its Configurator and unplug-replug the USB cable from the FC or your computer. This will refresh the connection and you'll be ensured that the port is not busy (of high importance with the Passthrough Flashing Method).</p>","title":"Configuring your Flight Controller"},{"location":"quick-start/receivers/hmpp2400/#flashing-via-passthrough","text":"<ul> <li> <p>Target: <code>HappyModel_PP_2400_RX_via_BetaflightPassthrough</code></p> </li> <li> <p>Device Category: <code>Happymodel 2.4 GHz</code></p> </li> <li> <p>Device: <code>HappyModel PP 2400 RX</code></p> </li> </ul>  <p></p> Flashing via Passthrough  <p>The PP receivers do not have Wifi, and so, it can only be updated via Passthrough or STLink(see below).</p> <p>For the following steps, you should be disconnected from Betaflight or INAV Configurator. Close the FC Configurator and unplug the FC from USB to refresh the connection.</p> <p>Once wired, power up your FC by connecting a LiPo or, if the receiver is getting powered via USB, connect your USB cable to a vacant port.</p> <p>Using the ExpressLRS Configurator, with the correct Target selected and Firmware Options set, hit Build &amp; Flash. Wait a bit for the process to finish and you should see a \"Success\" banner. </p>  <p></p>  <p>Power-cycle the FC and verify receiver connects to the Tx module (power up the Tx first, then the Receiver).</p>","title":"Flashing via Passthrough"},{"location":"quick-start/receivers/hmpp2400/#flashing-via-stlink","text":"<ul> <li> <p>Target: <code>HappyModel_PP_2400_RX_via_STLINK</code></p> </li> <li> <p>Device Category: <code>Happymodel 2.4 GHz</code></p> </li> <li> <p>Device: <code>HappyModel PP 2400 RX</code></p> </li> </ul>  <p></p> Flashing via STLink   <p></p>  <p>This will require connecting a ST Link to CLK, DIO, 5V and GND.</p> <p>Then with the correct Target selected and Firmware Options set, click Build &amp; Flash in the ExpressLRS Configurator. Wait for the process to finish and you should see the \"Success\" banner.</p>  <p></p>  <p>Once done, wire your receiver to Flight Controller and you should be ready for the next steps.</p>","title":"Flashing via STLink"},{"location":"quick-start/receivers/iflight2400/","text":"<p></p>","title":"iFlight 2.4GHz"},{"location":"quick-start/receivers/iflight2400/#wiring-up-your-receiver","text":"<p>Note</p> <p>There are Flight Controllers that will pull the RX pads <code>LOW</code> which will put the ESP-based receivers into <code>Bootloader Mode</code> unintentionally. A solid LED light on these receivers even with the TX module off is a sign they are in Bootloader Mode. If this is the case, rewire the receiver to a different UART.</p>   <p></p> IFlight 2.4GHz   <p></p> IFlight 2.4GHz  <p>The images above show the receiver pinouts and their connections. As we're dealing with UART connection, Rx on receiver goes to a TX pad on the FC, and Tx on the receiver goes to an uninverted Rx pad on the FC.</p> <p>There are Flight Controllers that put their Receiver UART's RX pads Low, which in turn, puts the ESP-based (e.g. EP1 and EP2) receivers to Bootloader mode unintentionally. One remedy is to wire them into a different UART, or wire a pull-up resistor (300-1k ohm) between the Rx pad of the FC and a 3.3v or 5v pad, as shown below.</p>  <p></p> Wiring up receiver","title":"Wiring up your receiver"},{"location":"quick-start/receivers/iflight2400/#configuring-your-flight-controller","text":"<p>To configure your flight controller properly, please go through Configure FC page. These settings apply on INAV, Betaflight and other flight controller software.</p> <p>Ports Tab should be setup so that Serial RX is on the UART where you have soldered the receiver.</p> <p>Receiver protocol is <code>CRSF</code> with <code>serialrx_inverted = off</code> and <code>serialrx_halfduplex = off</code>.</p> <p>The next step will not be able to proceed properly and you'll have issues later if any of these are set differently. Once you have configured your Flight Controller software, close its Configurator and unplug-replug the USB cable from the FC or your computer. This will refresh the connection and you'll be ensured that the port is not busy (of high importance with the Passthrough Flashing Method).</p>","title":"Configuring your Flight Controller"},{"location":"quick-start/receivers/iflight2400/#flashing-via-wifi","text":"<ul> <li> <p>Target: <code>iFlight_2400_RX_via_WIFI</code></p> </li> <li> <p>Device Category: <code>iFlight 2.4 GHz</code></p> </li> <li> <p>Device: <code>iFlight 2400 RX</code></p> </li> </ul>  <p></p> Flashing via WiFi","title":"Flashing via WiFi"},{"location":"quick-start/receivers/iflight2400/#method-1","text":"<p>With the receiver wired properly to your FC, select the correct target and set the Firmware Options in the ExpressLRS Configurator.</p> <p>Build the firmware. Once done, it should open a new window where the <code>iFlight_2400_RX-&lt;version&gt;.bin</code> is. Do not close this window so you can easily navigate to it once it's time to upload the firmware into the receiver.</p>  <p></p>  <p>Power your Flight Controller by either connecting a LiPo or attaching the USB cable (if the receiver gets powered from USB via a 4v5 pad). The receiver's LED will blink slowly at first, and after 20s or 30s (can be adjusted via ExpressLRS Configurator using <code>AUTO_WIFI_ON_INTERVAL</code>), it should blink fast indicating it's on Wifi Hotspot Mode.</p>  <p></p>  <p>Connect to the Wifi Network the receiver has created. It should be named something like <code>ExpressLRS RX</code> with the same <code>expresslrs</code> password as the TX Module Hotspot.</p>  <p></p>  <p>Navigate to the same web address as the TX Module (usually http://10.0.0.1). The Firmware upload page should load, and using the File Upload Form, navigate where the correct Receiver <code>iFlight_2400_RX-&lt;version&gt;.bin</code> is (like with the Tx module, you can also drag-and-drop the firmware file into the form field or use the <code>Browse</code> or <code>Choose File</code> button). Click on the Update button and the firmware file will be uploaded and the update process should commence.</p> <p>A white page should load momentarily with the message Update Success! Rebooting.... Wait a little bit (you can wait until the LED on the Receiver starts to blink slowly again) and the receiver should be updated. Power cycle the receiver and it should be able to bind with your TX module now (given you have updated the Tx Module as well, and that they have the same binding phrase and options).</p>  <p>Update for version 2.0</p> <p>Once you have updated to firmware version 2.0 or newer, the Web Update page on the Hotspot will get a few updates of its own. It will get the Update progress bar, and a Popup will be shown for Success or Error messages. Additionally, you can configure Home Network SSID and Password if you chose not to use ExpressLRS Configurator to set them. Once these are set, you can use the two methods below.</p>   <p></p>","title":"Method 1"},{"location":"quick-start/receivers/iflight2400/#method-2","text":"<p>Note</p> <p>This method will only work once the Home Network SSID and Password has been configured with the receiver.</p>  <p>With the receiver wired properly to your FC, select the right target and set your Firmware Options in the ExpressLRS Configurator.</p> <p>Build the firmware. Once done, it should open a new window where the <code>iFlight_2400_RX-&lt;version&gt;.bin</code> is. Do not close this window so you can easily navigate to it once it's time to upload the firmware into the receiver.</p>  <p></p>  <p>Power up your Flight Controller by either connecting a LiPo or attaching the USB cable (if the receiver gets powered from USB via a 4v5 pad). The receiver's LED will blink slowly at first, and after 20s or 30s (can be adjusted via ExpressLRS Configurator using <code>AUTO_WIFI_ON_INTERVAL</code>), it should blink fast indicating it's on Wifi AP Mode. The fast blink will pause and flash fast once again, indicating connection to your Home Network.</p>  <p></p>  <p>Using your browser, navigate to http://elrs_rx.local/. The Wifi Update page should load. It should show your device target along with the version of the firmware it currently has.</p> <p>Scroll down to the Firmware Update section, shown below:</p>  <p></p>  <p>Drag-and-drop the <code>iFlight_2400_RX-&lt;version&gt;.bin</code> file created by the ExpressLRS Configurator into the Choose File field, or manually navigate to the Folder by clicking the <code>Choose File</code> button. Once the correct file is selected, click the <code>Update</code>. Wait for the process to complete, indicated by a Green popup screen. </p> <p>Wait a little bit (you can wait until the LED on the Receiver starts to blink slowly again) and the receiver should be updated.</p> <p>You can now power down your Flight Controller along with the receiver.</p>","title":"Method 2"},{"location":"quick-start/receivers/iflight2400/#method-3","text":"<p>Note</p> <p>This method will only work once the Home Network SSID and Password has been configured with the receiver.</p>  <p>With the receiver wired properly to your FC, select the right target and set your Firmware Options in the ExpressLRS Configurator.</p> <p>Power up your Flight Controller by either connecting a LiPo or attaching the USB cable (if the receiver gets powered from USB via a 4v5 pad). The receiver's LED will blink slowly at first, and after 20s or 30s (can be adjusted via ExpressLRS Configurator using <code>AUTO_WIFI_ON_INTERVAL</code>), it should blink fast indicating it's on Wifi Mode.</p>  <p></p>  <p>Build &amp; Flash the firmware using the ExpressLRS Configurator. Wait for the process to complete, indicated by the \"Success\" prompt and the Receiver LED has gone back to the Slow Blink mode. You can now power down the Flight Controller.</p>  <p></p>   <p></p>","title":"Method 3"},{"location":"quick-start/receivers/iflight2400/#flashing-via-passthrough","text":"<ul> <li> <p>Target: <code>iFlight_2400_RX_via_BetaflightPassthrough</code></p> </li> <li> <p>Device Category: <code>iFlight 2.4 GHz</code></p> </li> <li> <p>Device: <code>iFlight 2400 RX</code></p> </li> </ul>  <p></p> Flashing via Passthrough  <p>Make sure you have your receiver wired properly. Rx pad on the Receiver wired up to a Tx pad on the FC, and the Tx pad on the Receiver wired up to an Rx pad on the FC. Also make sure you have setup your FC firmware to use CRSF Protocol, and that the UART is not inverted or running in half duplex.</p> <p>For the following steps, you should be disconnected from Betaflight or INAV Configurator. Close the FC Configurator and unplug the FC from USB to refresh the connection.</p> <p>If the receiver gets powered up when you connect the FC to USB, you will need to Press and Hold the button on the receiver, connect USB and let go of the button once the LED stopped blinking and goes SOLID.</p> <p>If the receiver needs a LiPo attached to get powered up, then Press and Hold the button on the receiver, attach a LiPo, then let go once the LED in the receiver stopped blinking and goes SOLID. Then connect your FC to USB.</p>  <p>Note</p> <p>If you powered the receiver and has solid LED light, your FC is probably pulling the current UART's RX pad <code>LOW</code> which will interfere with the normal and passthrough flashing of this receiver. Find another UART and wire your receiver there instead.</p>  <p>These procedures will not be needed in subsequent passthrough flashing. This is only needed on the first time you'd update the receiver from its factory firmware.</p> <p>Select the corresponding target in the ExpressLRS Configurator, set your Firmware Options and then click Build and Flash. For first time flashing/updating, it would normally take a while.</p>  <p></p>  <p>A <code>Success</code> message will be shown once the process is complete.</p>","title":"Flashing via Passthrough"},{"location":"quick-start/receivers/iflight2400/#flashing-via-ftdi","text":"<ul> <li> <p>Target: <code>iFlight_2400_RX_via_UART</code></p> </li> <li> <p>Device Category: <code>iFlight 2.4 GHz</code></p> </li> <li> <p>Device: <code>iFlight 2400 RX</code></p> </li> </ul>  <p></p> Flashing via UART  <p>Wire the receiver into the FTDI, with TX on receiver connected to the Rx on the FTDI, and RX on receiver connected to the Tx of the FTDI. Wire 5V and GND of the FTDI to 5V and GND of the Receiver. Press the button while powering the RX on, and release - the LED should now be solid.</p>  <p></p>  <p>Select the target and set your Firmware Options and once done, click on Build and Flash.</p>  <p></p>","title":"Flashing via FTDI"},{"location":"quick-start/receivers/iflight900/","text":"<p></p>","title":"iFlight 900MHz"},{"location":"quick-start/receivers/iflight900/#wiring-up-your-receiver","text":"<p>Note</p> <p>There are Flight Controllers that will pull the RX pads <code>LOW</code> which will put the ESP-based receivers into <code>Bootloader Mode</code> unintentionally. A solid LED light on these receivers even with the TX module off is a sign they are in Bootloader Mode. If this is the case, rewire the receiver to a different UART.  </p>   <p></p> IFlight 900MHz  <p>The image above show the receiver pinouts and their connections. As we're dealing with UART connection, Rx on receiver goes to a TX pad on the FC, and Tx on the receiver goes to an uninverted Rx pad on the FC.</p> <p>There are Flight Controllers that put their Receiver UART's RX pads Low, which in turn, puts the ESP-based (e.g. EP1 and EP2) receivers to Bootloader mode unintentionally. One remedy is to wire them into a different UART, or wire a pull-up resistor (300-1k ohm) between the Rx pad of the FC and a 3.3v or 5v pad, as shown below.</p>  <p></p> Wiring up receiver","title":"Wiring up your receiver"},{"location":"quick-start/receivers/iflight900/#configuring-your-flight-controller","text":"<p>To configure your flight controller properly, please go through Configure FC page. These settings apply on INAV, Betaflight and other flight controller software.</p> <p>Ports Tab should be setup so that Serial RX is on the UART where you have soldered the receiver.</p> <p>Receiver protocol is <code>CRSF</code> with <code>serialrx_inverted = off</code> and <code>serialrx_halfduplex = off</code>.</p> <p>The next step will not be able to proceed properly and you'll have issues later if any of these are set differently. Once you have configured your Flight Controller software, close its Configurator and unplug-replug the USB cable from the FC or your computer. This will refresh the connection and you'll be ensured that the port is not busy (of high importance with the Passthrough Flashing Method).</p>","title":"Configuring your Flight Controller"},{"location":"quick-start/receivers/iflight900/#flashing-via-wifi","text":"<ul> <li> <p>Target: <code>iFlight_900_RX_via_WIFI</code></p> </li> <li> <p>Device Category: <code>iFlight 900 MHz</code></p> </li> <li> <p>Device: <code>iFlight 900 RX</code></p> </li> </ul>  <p></p> Flashing via WiFi","title":"Flashing via WiFi"},{"location":"quick-start/receivers/iflight900/#method-1","text":"<p>With the receiver wired properly to your FC, select the correct target and set the Firmware Options in the ExpressLRS Configurator.</p> <p>Build the firmware. Once done, it should open a new window where the <code>iFlight_900_RX-&lt;version&gt;.bin</code> is. Do not close this window so you can easily navigate to it once it's time to upload the firmware into the receiver.</p>  <p></p>  <p>Power your Flight Controller by either connecting a LiPo or attaching the USB cable (if the receiver gets powered from USB via a 4v5 pad). The receiver's LED will blink slowly at first, and after 20s or 30s (can be adjusted via ExpressLRS Configurator using <code>AUTO_WIFI_ON_INTERVAL</code>), it should blink fast indicating it's on Wifi Hotspot Mode.</p>  <p></p>  <p>Connect to the Wifi Network the receiver has created. It should be named something like <code>ExpressLRS RX</code> with the same <code>expresslrs</code> password as the TX Module Hotspot.</p>  <p></p>  <p>Navigate to the same web address as the TX Module (usually http://10.0.0.1). The Firmware upload page should load, and using the File Upload Form, navigate where the correct Receiver <code>iFlight_900_RX-&lt;version&gt;.bin</code> is (like with the Tx module, you can also drag-and-drop the firmware file into the form field or use the <code>Browse</code> or <code>Choose File</code> button). Click on the Update button and the firmware file will be uploaded and the update process should commence.</p> <p>A white page should load momentarily with the message Update Success! Rebooting.... Wait a little bit (you can wait until the LED on the Receiver starts to blink slowly again) and the receiver should be updated. Power cycle the receiver and it should be able to bind with your TX module now (given you have updated the Tx Module as well, and that they have the same binding phrase and options).</p>  <p>Update for version 2.0</p> <p>Once you have updated to firmware version 2.0 or newer, the Web Update page on the Hotspot will get a few updates of its own. It will get the Update progress bar, and a Popup will be shown for Success or Error messages. Additionally, you can configure Home Network SSID and Password if you chose not to use ExpressLRS Configurator to set them. Once these are set, you can use the two methods below.</p>   <p></p>","title":"Method 1"},{"location":"quick-start/receivers/iflight900/#method-2","text":"<p>Note</p> <p>This method will only work once the Home Network SSID and Password has been configured with the receiver.</p>  <p>With the receiver wired properly to your FC, select the right target and set your Firmware Options in the ExpressLRS Configurator.</p> <p>Build the firmware. Once done, it should open a new window where the <code>iFlight_900_RX-&lt;version&gt;.bin</code> is. Do not close this window so you can easily navigate to it once it's time to upload the firmware into the receiver.</p>  <p></p>  <p>Power up your Flight Controller by either connecting a LiPo or attaching the USB cable (if the receiver gets powered from USB via a 4v5 pad). The receiver's LED will blink slowly at first, and after 20s or 30s (can be adjusted via ExpressLRS Configurator using <code>AUTO_WIFI_ON_INTERVAL</code>), it should blink fast indicating it's on Wifi AP Mode. The fast blink will pause and flash fast once again, indicating connection to your Home Network.</p>  <p></p>  <p>Using your browser, navigate to http://elrs_rx.local/. The Wifi Update page should load. It should show your device target along with the version of the firmware it currently has.</p> <p>Scroll down to the Firmware Update section, shown below:</p>  <p></p>  <p>Drag-and-drop the <code>iFlight_900_RX-&lt;version&gt;.bin</code> file created by the ExpressLRS Configurator into the Choose File field, or manually navigate to the Folder by clicking the <code>Choose File</code> button. Once the correct file is selected, click the <code>Update</code>. Wait for the process to complete, indicated by a Green popup screen. </p> <p>Wait a little bit (you can wait until the LED on the Receiver starts to blink slowly again) and the receiver should be updated.</p> <p>You can now power down your Flight Controller along with the receiver.</p>","title":"Method 2"},{"location":"quick-start/receivers/iflight900/#method-3","text":"<p>Note</p> <p>This method will only work once the Home Network SSID and Password has been configured with the receiver.</p>  <p>With the receiver wired properly to your FC, select the right target and set your Firmware Options in the ExpressLRS Configurator.</p> <p>Power up your Flight Controller by either connecting a LiPo or attaching the USB cable (if the receiver gets powered from USB via a 4v5 pad). The receiver's LED will blink slowly at first, and after 20s or 30s (can be adjusted via ExpressLRS Configurator using <code>AUTO_WIFI_ON_INTERVAL</code>), it should blink fast indicating it's on Wifi Mode.</p>  <p></p>  <p>Build &amp; Flash the firmware using the ExpressLRS Configurator. Wait for the process to complete, indicated by the \"Success\" prompt and the Receiver LED has gone back to the Slow Blink mode. You can now power down the Flight Controller.</p>  <p></p>   <p></p>","title":"Method 3"},{"location":"quick-start/receivers/iflight900/#flashing-via-passthrough","text":"<ul> <li> <p>Target: <code>iFlight_900_RX_via_BetaflightPassthrough</code></p> </li> <li> <p>Device Category: <code>iFlight 900 MHz</code></p> </li> <li> <p>Device: <code>iFlight 900 RX</code></p> </li> </ul>  <p></p> Flashing via Passthrough  <p>Make sure you have your receiver wired properly. Rx pad on the Receiver wired up to a Tx pad on the FC, and the Tx pad on the Receiver wired up to an Rx pad on the FC. Also make sure you have setup your FC firmware to use CRSF Protocol, and that the UART is not inverted or running in half duplex.</p> <p>For the following steps, you should be disconnected from Betaflight or INAV Configurator. Close the FC Configurator and unplug the FC from USB to refresh the connection.</p> <p>If the receiver gets powered up when you connect the FC to USB, you will need to Press and Hold the button on the receiver, connect USB and let go of the button once the LED stopped blinking and goes SOLID.</p> <p>If the receiver needs a LiPo attached to get powered up, then Press and Hold the button on the receiver, attach a LiPo, then let go once the LED in the receiver stopped blinking and goes SOLID. Then connect your FC to USB.</p>  <p>Note</p> <p>If you powered the receiver and has solid LED light, your FC is probably pulling the current UART's RX pad <code>LOW</code> which will interfere with the normal and passthrough flashing of this receiver. Find another UART and wire your receiver there instead.</p>  <p>These procedures will not be needed in subsequent passthrough flashing. This is only needed on the first time you'd update the receiver from its factory firmware.</p> <p>Select the corresponding target in the ExpressLRS Configurator, set your Firmware Options and then click Build and Flash. For first time flashing/updating, it would normally take a while.</p>  <p></p>  <p>A <code>Success</code> message will be shown once the process is complete.</p>","title":"Flashing via Passthrough"},{"location":"quick-start/receivers/iflight900/#flashing-via-ftdi","text":"<ul> <li> <p>Target: <code>iFlight_900_RX_via_UART</code></p> </li> <li> <p>Device Category: <code>iFlight 900 MHz</code></p> </li> <li> <p>Device: <code>iFlight 900 RX</code></p> </li> </ul>  <p></p> Flashing via UART  <p>Wire the receiver into the FTDI, with TX on receiver connected to the Rx on the FTDI, and RX on receiver connected to the Tx of the FTDI. Wire 5V and GND of the FTDI to 5V and GND of the Receiver. Press the button while powering the RX on, and release - the LED should now be solid.</p>  <p></p>  <p>Select the target and set your Firmware Options and once done, click on Build and Flash.</p>  <p></p>","title":"Flashing via FTDI"},{"location":"quick-start/receivers/jumper-aion/","text":"<p></p>","title":"Jumper Aion Nano"},{"location":"quick-start/receivers/jumper-aion/#wiring-up-your-receiver","text":"<p>Note</p> <p>There are Flight Controllers that will pull the RX pads <code>LOW</code> which will put the ESP-based receivers into <code>Bootloader Mode</code> unintentionally. A solid LED light on these receivers even with the TX module off is a sign they are in Bootloader Mode. If this is the case, rewire the receiver to a different UART.</p>   <p></p> Jumper Aion Nano  <p>The image above show the receiver pinouts and their connections. As we're dealing with UART connection, Rx on receiver goes to a TX pad on the FC, and Tx on the receiver goes to an uninverted Rx pad on the FC.</p> <p>There are Flight Controllers that put their Receiver UART's RX pads Low, which in turn, puts the ESP-based (e.g. EP1 and EP2) receivers to Bootloader mode unintentionally. One remedy is to wire them into a different UART, or wire a pull-up resistor (300-1k ohm) between the Rx pad of the FC and a 3.3v or 5v pad, as shown below.</p>  <p></p> Wiring up receiver","title":"Wiring up your receiver"},{"location":"quick-start/receivers/jumper-aion/#configuring-your-flight-controller","text":"<p>To configure your flight controller properly, please go through Configure FC page. These settings apply on INAV, Betaflight and other flight controller software.</p> <p>Ports Tab should be setup so that Serial RX is on the UART where you have soldered the receiver.</p> <p>Receiver protocol is <code>CRSF</code> with <code>serialrx_inverted = off</code> and <code>serialrx_halfduplex = off</code>.</p> <p>The next step will not be able to proceed properly and you'll have issues later if any of these are set differently. Once you have configured your Flight Controller software, close its Configurator and unplug-replug the USB cable from the FC or your computer. This will refresh the connection and you'll be ensured that the port is not busy (of high importance with the Passthrough Flashing Method).</p>","title":"Configuring your Flight Controller"},{"location":"quick-start/receivers/jumper-aion/#flashing-via-wifi","text":"<ul> <li> <p>Target: <code>Jumper_AION_Mini_2400_RX_via_WIFI</code></p> </li> <li> <p>Device Category: <code>Jumper 2.4 GHz</code></p> </li> <li> <p>Device: <code>Jumper AION Mini 2400 RX</code></p> </li> </ul>  <p></p> Flashing via WiFi","title":"Flashing via WiFi"},{"location":"quick-start/receivers/jumper-aion/#method-1","text":"<p>With the receiver wired properly to your FC, select the correct target and set the Firmware Options in the ExpressLRS Configurator.</p> <p>Build the firmware. Once done, it should open a new window where the <code>Jumper_AION_Mini_2400_RX-&lt;version&gt;.bin</code> is. Do not close this window so you can easily navigate to it once it's time to upload the firmware into the receiver.</p>  <p></p>  <p>Power your Flight Controller by either connecting a LiPo or attaching the USB cable (if the receiver gets powered from USB via a 4v5 pad). The receiver's LED will blink slowly at first, and after 20s or 30s (can be adjusted via ExpressLRS Configurator using <code>AUTO_WIFI_ON_INTERVAL</code>), it should blink fast indicating it's on Wifi Hotspot Mode.</p>  <p></p>  <p>Connect to the Wifi Network the receiver has created. It should be named something like <code>ExpressLRS RX</code> with the same <code>expresslrs</code> password as the TX Module Hotspot.</p>  <p></p>  <p>Navigate to the same web address as the TX Module (usually http://10.0.0.1). The Firmware upload page should load, and using the File Upload Form, navigate where the correct Receiver <code>Jumper_AION_Mini_2400_RX-&lt;version&gt;.bin</code> is (like with the Tx module, you can also drag-and-drop the firmware file into the form field or use the <code>Browse</code> or <code>Choose File</code> button). Click on the Update button and the firmware file will be uploaded and the update process should commence.</p> <p>A white page should load momentarily with the message Update Success! Rebooting.... Wait a little bit (you can wait until the LED on the Receiver starts to blink slowly again) and the receiver should be updated. Power cycle the receiver and it should be able to bind with your TX module now (given you have updated the Tx Module as well, and that they have the same binding phrase and options).</p>  <p>Update for version 2.0</p> <p>Once you have updated to firmware version 2.0 or newer, the Web Update page on the Hotspot will get a few updates of its own. It will get the Update progress bar, and a Popup will be shown for Success or Error messages. Additionally, you can configure Home Network SSID and Password if you chose not to use ExpressLRS Configurator to set them. Once these are set, you can use the two methods below.</p>   <p></p>","title":"Method 1"},{"location":"quick-start/receivers/jumper-aion/#method-2","text":"<p>Note</p> <p>This method will only work once the Home Network SSID and Password has been configured with the receiver.</p>  <p>With the receiver wired properly to your FC, select the right target and set your Firmware Options in the ExpressLRS Configurator.</p> <p>Build the firmware. Once done, it should open a new window where the <code>Jumper_AION_Mini_2400_RX-&lt;version&gt;.bin</code> is. Do not close this window so you can easily navigate to it once it's time to upload the firmware into the receiver.</p>  <p></p>  <p>Power up your Flight Controller by either connecting a LiPo or attaching the USB cable (if the receiver gets powered from USB via a 4v5 pad). The receiver's LED will blink slowly at first, and after 20s or 30s (can be adjusted via ExpressLRS Configurator using <code>AUTO_WIFI_ON_INTERVAL</code>), it should blink fast indicating it's on Wifi AP Mode. The fast blink will pause and flash fast once again, indicating connection to your Home Network.</p>  <p></p>  <p>Using your browser, navigate to http://elrs_rx.local/. The Wifi Update page should load. It should show your device target along with the version of the firmware it currently has.</p> <p>Scroll down to the Firmware Update section, shown below:</p>  <p></p>  <p>Drag-and-drop the <code>Jumper_AION_Mini_2400_RX-&lt;version&gt;.bin</code> file created by the ExpressLRS Configurator into the Choose File field, or manually navigate to the Folder by clicking the <code>Choose File</code> button. Once the correct file is selected, click the <code>Update</code>. Wait for the process to complete, indicated by a Green popup screen. </p> <p>Wait a little bit (you can wait until the LED on the Receiver starts to blink slowly again) and the receiver should be updated.</p> <p>You can now power down your Flight Controller along with the receiver.</p>","title":"Method 2"},{"location":"quick-start/receivers/jumper-aion/#method-3","text":"<p>Note</p> <p>This method will only work once the Home Network SSID and Password has been configured with the receiver.</p>  <p>With the receiver wired properly to your FC, select the right target and set your Firmware Options in the ExpressLRS Configurator.</p> <p>Power up your Flight Controller by either connecting a LiPo or attaching the USB cable (if the receiver gets powered from USB via a 4v5 pad). The receiver's LED will blink slowly at first, and after 20s or 30s (can be adjusted via ExpressLRS Configurator using <code>AUTO_WIFI_ON_INTERVAL</code>), it should blink fast indicating it's on Wifi Mode.</p>  <p></p>  <p>Build &amp; Flash the firmware using the ExpressLRS Configurator. Wait for the process to complete, indicated by the \"Success\" prompt and the Receiver LED has gone back to the Slow Blink mode. You can now power down the Flight Controller.</p>  <p></p>   <p></p>","title":"Method 3"},{"location":"quick-start/receivers/jumper-aion/#flashing-via-passthrough","text":"<ul> <li> <p>Target: <code>Jumper_AION_Mini_2400_RX_via_BetaflightPassthrough</code></p> </li> <li> <p>Device Category: <code>Jumper 2.4 GHz</code></p> </li> <li> <p>Device: <code>Jumper AION Mini 2400 RX</code></p> </li> </ul>  <p></p> Flashing via Passthrough  <p>Make sure you have wired your receiver properly. Rx pad on the Receiver wired up to a Tx pad on the FC, and the Tx pad on the Receiver wired up to an Rx pad on the FC. Also make sure you have setup your FC firmware to use CRSF Protocol, and that the UART is not inverted or running in half duplex.</p> <p>For the following steps, you should be disconnected from Betaflight or INAV Configurator. Close the FC Configurator and unplug the FC from USB to refresh the connection.</p> <p>If the receiver gets powered up when you connect the FC to USB, you will need to Press and Hold the button on the receiver, connect USB and let go of the button once the LED stopped blinking and goes SOLID.</p> <p>If the receiver needs a LiPo attached to get powered up, then Press and Hold the button on the receiver, attach a LiPo, then let go once the LED in the receiver stopped blinking and goes SOLID. Then connect your FC to USB.</p>  <p>Note</p> <p>If you powered the receiver and has solid LED light, your FC is probably pulling the current UART's RX pad <code>LOW</code> which will interfere with the normal and passthrough flashing of this receiver. Find another UART and wire your receiver there instead.</p>  <p>These procedures will not be needed in subsequent passthrough flashing. This is only needed on the first time you'd update the receiver from its factory firmware.</p> <p>Select the corresponding target in the ExpressLRS Configurator, set your Firmware Options and then click Build and Flash. For first time flashing/updating, it would normally take a while.</p> <p>A <code>Success</code> message will be shown once the process is complete.</p>","title":"Flashing via Passthrough"},{"location":"quick-start/receivers/jumper-aion/#flashing-via-ftdi","text":"<ul> <li> <p>Target: <code>Jumper_AION_Mini_2400_RX_via_UART</code></p> </li> <li> <p>Device Category: <code>Jumper 2.4 GHz</code></p> </li> <li> <p>Device: <code>Jumper AION Mini 2400 RX</code></p> </li> </ul>  <p></p> Flashing via UART  <p>Wire the receiver into the FTDI, with TX on receiver connected to the Rx on the FTDI, and RX on receiver connected to the Tx of the FTDI. Wire 5V and GND of the FTDI to 5V and GND of the Receiver. Press the button while powering the RX on, and release - the LED should now be solid.</p>  <p></p>  <p>Select the target and set your Firmware Options and once done, click on Build and Flash.</p>  <p></p>","title":"Flashing via FTDI"},{"location":"quick-start/receivers/jumper900/","text":"<p></p>","title":"Jumper R9 Mini"},{"location":"quick-start/receivers/jumper900/#flashing-via-stlink","text":"<ul> <li> <p>Target: <code>Jumper_RX_R900MINI_via_STLINK</code></p> </li> <li> <p>Device Category: <code>Jumper R900</code></p> </li> <li> <p>Device: <code>Jumper RX R900MINI</code></p> </li> </ul>  <p></p> Flashing via STLink  <p>Wire it up to your STLink V2 as follows:</p> <p>Wire <code>+ = 3v3</code>, <code>- = GND</code>, <code>C = CLK</code> and <code>D = DIO</code> to their respective pins on the RX from the StLink.</p>  <p></p> Jumper R9 Mini  <p>Because those pins are so small one option is to only solder a wire on the <code>CLK</code> and <code>DIO</code> then power it with the 5v pin with an external power source. </p> <p>Disable 'Readout Protection'. To do this download the ST-LINK Utility and follow this quick how to video. Or alternatively under linux you can use OpenOCD.</p> <p>How to video:</p>    <p>Using the correct target specific for your receiver, and your Firmware Options set, click Build &amp; Flash on the ExpressLRS Configurator.</p>  <p></p>  <p>After the flash is successful, desolder the STLink and connect RX2 and TX2 (you will need to solder on the STM32 pins, see picture) to a flight controller and setting up the receiver with the CRSF serial protocol.</p>","title":"Flashing via STLink"},{"location":"quick-start/receivers/jumper900/#updating-via-passthrough","text":"<ul> <li> <p>Target: <code>Jumper_RX_R900MINI_via_BetaflightPassthrough</code></p> </li> <li> <p>Device Category: <code>Jumper R900</code></p> </li> <li> <p>Device: <code>Jumper RX R900MINI</code></p> </li> </ul>  <p></p> Updating via Passthrough  <p>After flashing via STLink, the <code>Jumper_RX_R900MINI_via_BetaflightPassthrough</code> target may now be used for future firmware updates. Select the target and set your Firmware Options and once done, click on Build and Flash.</p>  <p></p>","title":"Updating via Passthrough"},{"location":"quick-start/receivers/matek2400/","text":"<p></p>","title":"Matek R24"},{"location":"quick-start/receivers/matek2400/#wiring-up-your-receiver","text":"<p>Note</p> <p>There are Flight Controllers that will pull the RX pads <code>LOW</code> which will put the ESP-based receivers into <code>Bootloader Mode</code> unintentionally. A solid LED light on these receivers even with the TX module off is a sign they are in Bootloader Mode. If this is the case, rewire the receiver to a different UART.</p>   <p></p> R24-D Diversity   <p></p> R24-S SMD  <p>The images above show the receiver pinouts and their connections. As we're dealing with UART connection, Rx on receiver goes to a TX pad on the FC, and Tx on the receiver goes to an uninverted Rx pad on the FC.</p> <p>There are Flight Controllers that put their Receiver UART's RX pads Low, which in turn, puts the ESP-based (e.g. EP1 and EP2) receivers to Bootloader mode unintentionally. One remedy is to wire them into a different UART, or wire a pull-up resistor (300-1k ohm) between the Rx pad of the FC and a 3.3v or 5v pad, as shown below.</p>  <p></p> Wiring up receiver","title":"Wiring up your receiver"},{"location":"quick-start/receivers/matek2400/#configuring-your-flight-controller","text":"<p>To configure your flight controller properly, please go through Configure FC page. These settings apply on INAV, Betaflight and other flight controller software.</p> <p>Ports Tab should be setup so that Serial RX is on the UART where you have soldered the receiver.</p> <p>Receiver protocol is <code>CRSF</code> with <code>serialrx_inverted = off</code> and <code>serialrx_halfduplex = off</code>.</p> <p>The next step will not be able to proceed properly and you'll have issues later if any of these are set differently. Once you have configured your Flight Controller software, close its Configurator and unplug-replug the USB cable from the FC or your computer. This will refresh the connection and you'll be ensured that the port is not busy (of high importance with the Passthrough Flashing Method).</p>","title":"Configuring your Flight Controller"},{"location":"quick-start/receivers/matek2400/#flashing-via-wifi","text":"<ul> <li> <p>Target: <code>MATEK_2400_RX_via_WIFI</code></p> </li> <li> <p>Device Category: <code>Matek 2.4 GHz</code></p> </li> <li> <p>Device: <code>Matek 2400 RX</code></p> </li> </ul>  <p></p> Flashing via WiFi","title":"Flashing via Wifi"},{"location":"quick-start/receivers/matek2400/#method-1","text":"<p>(Recommended as first-flash method)</p> <p>Before your proceed, make sure you have the receiver wired properly to your FC.</p> <p>Build the firmware using the ExpressLRS Configurator using the correct Target and Firmware Options. Once done, it should open a new window where the <code>MATEK_2400_RX-&lt;version&gt;.bin</code> is. Do not close this window so you can easily navigate to it once it's time to upload the firmware into the receiver.</p>  <p></p>  <p>Power your Flight Controller by either connecting a LiPo or attaching the USB cable (if receiver gets powered from USB via a 4v5 pad). Receiver's LED will blink slow at first, and after 20s or 30s (can be adjusted via ExpressLRS Configurator using <code>AUTO_WIFI_ON_INTERVAL</code>), it should blink fast indicating it's on Wifi Hotspot Mode.</p>  <p></p>  <p>Connect to the Wifi Network the receiver has created. It should be named something like <code>ExpressLRS RX</code> with the same <code>expresslrs</code> password as the TX Module Hotspot.</p>  <p></p>  <p>Navigate to the same web address as the TX Module (usually http://10.0.0.1). The Firmware upload page should load, and using the File Upload Form, navigate where the correct Receiver <code>MATEK_2400_RX-&lt;version&gt;.bin</code> is (you can drag-and-drop the firmware file into the form field or use the <code>Browse</code> or <code>Choose File</code> button). Click on Update button and the firmware file will be uploaded and the update process should commence. </p> <p>A white page should load momentarily with the message Update Success! Rebooting.... Wait a little bit (you can wait until the LED on the Receiver starts to blink slowly again) and the receiver should be updated. Power cycle the receiver and it should be able to bind with your TX module now (given you have updated the Tx Module as well, and that they have the same binding phrase and options).</p>  <p>Update for version 2.0</p> <p>Once you have updated to firmware version 2.0 or newer, the Web Update page on the Hotspot will get a few updates of its own. It will get the Update progress bar, and a Popup will be shown for Success or Error messages. Additionally, you can configure Home Network SSID and Password if you chose not to use ExpressLRS Configurator to set them. Once these are set, you can use the two methods below.</p>   <p></p>","title":"Method 1"},{"location":"quick-start/receivers/matek2400/#method-2","text":"<p>Note</p> <p>This method will only work once the Home Network SSID and Password has been configured with the receiver.</p>  <p>With the receiver wired properly to your FC, select the right target and set your Firmware Options in the ExpressLRS Configurator.</p> <p>Build the firmware. Once done, it should open a new window where the <code>MATEK_2400_RX-&lt;version&gt;.bin</code> is. Do not close this window so you can easily navigate to it once it's time to upload the firmware into the receiver.</p>  <p></p>  <p>Power up your Flight Controller by either connecting a LiPo or attaching the USB cable (if the receiver gets powered from USB via a 4v5 pad). The receiver's LED will blink slowly at first, and after 20s or 30s (can be adjusted via ExpressLRS Configurator using <code>AUTO_WIFI_ON_INTERVAL</code>), it should blink fast indicating it's on Wifi AP Mode. The fast blink will pause and flash fast once again, indicating connection to your Home Network.</p>  <p></p>  <p>Using your browser, navigate to http://elrs_rx.local/. The Wifi Update page should load. It should show your device target along with the version of the firmware it currently has.</p> <p>Scroll down to the Firmware Update section, shown below:</p>  <p></p>  <p>Drag-and-drop the <code>MATEK_2400_RX-&lt;version&gt;.bin</code> file created by the ExpressLRS Configurator into the Choose File field, or manually navigate to the Folder by clicking the <code>Choose File</code> button. Once the correct file is selected, click the <code>Update</code>. Wait for the process to complete, indicated by a Green popup screen. </p> <p>Wait a little bit (you can wait until the LED on the Receiver starts to blink slowly again) and the receiver should be updated.</p> <p>You can now power down your Flight Controller along with the receiver.</p>","title":"Method 2"},{"location":"quick-start/receivers/matek2400/#method-3","text":"<p>Note</p> <p>This method will only work once the Home Network SSID and Password has been configured with the receiver.</p>  <p>With the receiver wired properly to your FC, select the right target and set your Firmware Options in the ExpressLRS Configurator.</p> <p>Power up your Flight Controller by either connecting a LiPo or attaching the USB cable (if the receiver gets powered from USB via a 4v5 pad). The receiver's LED will blink slowly at first, and after 20s or 30s (can be adjusted via ExpressLRS Configurator using <code>AUTO_WIFI_ON_INTERVAL</code>), it should blink fast indicating it's on Wifi Mode.</p>  <p></p>  <p>Build &amp; Flash the firmware using the ExpressLRS Configurator. Wait for the process to complete, indicated by the \"Success\" prompt and the Receiver LED has gone back to the Slow Blink mode. You can now power down the Flight Controller.</p>  <p></p>   <p></p>","title":"Method 3"},{"location":"quick-start/receivers/matek2400/#flashing-via-passthrough","text":"<ul> <li> <p>Target: <code>MATEK_2400_RX_via_BetaflightPassthrough</code></p> </li> <li> <p>Device Category: <code>Matek 2.4 GHz</code></p> </li> <li> <p>Device: <code>Matek 2400 RX</code></p> </li> </ul>  <p></p> Flashing via Passthrough  <p>Make sure you have your receiver wired properly. Rx pad on the Receiver wired up to a Tx pad on the FC, and the Tx pad on the Receiver wired up to an Rx pad on the FC. Also make sure you have setup your FC firmware to use CRSF Protocol, and that the UART is not inverted or running in half duplex.</p> <p>For the following steps, you should be disconnected from Betaflight or INAV Configurator. Close the FC Configurator and unplug the FC from USB to refresh the connection.</p> <p>Power your FC with a LiPo, or if receiver is powered via USB (receiver is connected to a 4v5 pad), connect the FC to your USB port.</p>  <p>Note</p> <p>If you powered the receiver and has solid LED light, your FC is probably pulling the current UART's RX pad <code>LOW</code> which will interfere with the normal and passthrough flashing of this receiver. Find another UART and wire your receiver there instead.</p>  <p>Using the ExpressLRS Configurator, with the correct Target selected and Firmware Options set, click on Build &amp; Flash. Wait for the process to finish and you should be greeted with the \"Success\" banner.</p>  <p></p>  <p>Unplug USB and/or LiPo. Power your TX Module and then your FC to verify you are bound and has connection.</p>","title":"Flashing via Passthrough"},{"location":"quick-start/receivers/matek2400/#flashing-via-uart","text":"<ul> <li> <p>Target: <code>MATEK_2400_RX_via_UART</code></p> </li> <li> <p>Device Category: <code>Matek 2.4 GHz</code></p> </li> <li> <p>Device: <code>Matek 2400 RX</code></p> </li> </ul>  <p></p> Flashing via UART  <p>Wire the receiver into the FTDI, with TX on receiver connected to the Rx on the FTDI, and RX on receiver connected to the Tx of the FTDI. Wire 5V and GND of the FTDI to 5V and GND of the Receiver. Press the button while powering the RX on, and release - the LED should now be solid.</p>  <p></p>  <p>Select the target and set your Firmware Options and once done, click on Build and Flash.</p>  <p></p>","title":"Flashing via UART"},{"location":"quick-start/receivers/r9/","text":"<p></p>","title":"Frsky R9"},{"location":"quick-start/receivers/r9/#bootloaders","text":"<p>The R9Mini/R9MM, R9MX and R9Slim+ require ExpressLRS Bootloaders to be flashed before the ExpressLRS firmware. The R9Slim doesn't have a bootloader and first time flash requires STLink.</p> <p>Download the bootloader <code>.frk</code> file for your respective receiver. The files are as follows:</p> <ul> <li>R9mm/mini: <code>r9mm_elrs_bl.frk</code> (14kb) or <code>r9mm_no_btn_elrs_bl.frk</code> (14kb) (no_btn bootloader is only used if your bind/boot button on the receiver is faulty or has gone bad.)</li> <li>R9mx: <code>r9mx_elrs_bl.frk</code> (20kb)</li> <li>R9Slim+ (ACCST): <code>r9slim_plus_elrs_bl.frk</code> (14kb)</li> <li>R9Slim+ (ACCESS/OTA): <code>r9slim_plus_ota_elrs_bl.frk</code> (18kb)</li> </ul> <p>Copy the relevant file to your handset's SD card (You can put it inside <code>/FIRMWARE</code> folder for easy access).</p> <p>Wire the receiver to your radio's Smart Port, as shown:</p>  <p></p>  <p>Next, flash the <code>.frk</code> via the <code>S.port</code> flashing option in <code>OpenTX</code> or <code>EdgeTX</code>  (It helps if the External RF module is set to <code>PPM</code> mode.) </p> <ul> <li>Navigate in OpenTX to the TOOLS menu (hold SYS button)</li> <li>Press Page once to the SD-HC CARD page, then select the <code>FIRMWARE</code> folder</li> <li>Flash the frk file by holding OK/Enter and selecting \"Flash external module\"</li> </ul> <p>Once done, unplug the receiver and your bootloader is flashed.</p>  <p>FYI</p> <p>You only need to flash the Bootloader ONCE. After it's flashed into the receiver, you don't have to reflash it in every update.</p> <p>R9Slim doesn't have a bootloader. As such, you need to flash it first via FTDI.</p>","title":"Bootloaders"},{"location":"quick-start/receivers/r9/#troubleshooting-no-sync","text":"<ul> <li>Setting the External RF module to <code>PPM</code> mode helps.</li> <li>Check if the receiver has its LED lit up or if it's powered.</li> <li>Check whether you've set your <code>Max Bauds</code> to <code>115200</code>, especially if you're using a QX7 or an X9D (on OneBit Firmwares or EdgeTX). If so, put it back to 400k and try again.</li> </ul>","title":"Troubleshooting No Sync"},{"location":"quick-start/receivers/r9/#wiring-up-your-receiver","text":"<p></p> Wiring up receiver   <p>Note</p> <p>This will be the same wiring you'll use for flying and the subsequent firmware updates (via Passthrough). Forget the factory wiring guide!</p> <p>R9Slim need to be flashed via STLink first before you wire it up to your Flight Controller.</p>","title":"Wiring up your receiver"},{"location":"quick-start/receivers/r9/#configuring-your-flight-controller","text":"<p>To configure your flight controller properly, please go through Configure FC page. These settings apply on INAV, Betaflight and other flight controller software.</p> <p>Ports Tab should be setup so that Serial RX is on the UART where you have soldered the receiver.</p> <p>Receiver protocol is <code>CRSF</code> with <code>serialrx_inverted = off</code> and <code>serialrx_halfduplex = off</code>.</p> <p>The next step will not be able to proceed properly and you'll have issues later if any of these are set differently. Once you have configured your Flight Controller software, close its Configurator and unplug-replug the USB cable from the FC or your computer. This will refresh the connection and you'll be ensured that the port is not busy.</p>","title":"Configuring your Flight Controller"},{"location":"quick-start/receivers/r9/#flashing-via-passthrough-works-with-betaflight-inav","text":"<ul> <li> <p>Targets:</p> <ul> <li><code>Frsky_RX_R9MM_R9MINI_via_BetaflightPassthrough</code></li> <li><code>Frsky_RX_R9MX_via_BetaflightPassthrough</code></li> <li><code>Frsky_RX_R9SLIM_via_BetaflightPassthrough</code></li> <li><code>Frsky_RX_R9SLIMPLUS_via_BetaflightPassthrough</code></li> <li><code>Frsky_RX_R9SLIMPLUS_OTA_via_BetaflightPassthrough</code></li> </ul> </li> <li> <p>Device Category: </p> <ul> <li><code>Frsky R9</code></li> </ul> </li> <li> <p>Device:</p> <ul> <li><code>Frsky RX R9MM R9MINI</code></li> <li><code>Frsky RX R9MX</code></li> <li><code>Frsky RX R9SLIM</code> (If already flashed via STLink)</li> <li><code>Frsky RX R9SLIMPLUS</code></li> <li><code>Frsky RX R9SLIMPLUS OTA</code></li> </ul> </li> </ul>  <p></p> Flashing via Passthrough  <p>Make sure the correct Bootloader has been flashed to the receiver prior to wiring it up to your flight controller. Using the wiring guide above, find a free, uninverted UART in your FC. You can use your FC's wiring guide for a Crossfire or Ghost receiver.</p> <p>Set up your Flight Controller for ExpressLRS. Make sure you have set Serial RX to the right UART (RX &amp; TX Pair) under the Ports Tab. Follow the FC Configuration Guide.</p> <p>Once your Flight Controller is configured, you should disconnect from Betaflight or INAV Configurator. Close your FC Configurator and unplug the USB to refresh the connection.</p> <p>Plug in the Flight Controller to USB. Did your receiver powered up too (with both LEDs lit)? If so, disconnect USB, hold the bind button on your receiver, and reconnect to USB. The LED should start alternating between the Green and Red LEDs. Once it's alternating, you can then let go of the Bind Button.</p> <p>If your receiver didn't get powered from USB, have a lipo ready and continue with the next steps. On the ExpressLRS Configurator, with your Firmware Options set, click on Build &amp; Flash. Like on the TX module, it will take a while on the first time. Watch out for the <code>Passthrough Init</code> stage. This stage will check your FC Configuration for the Serial RX UART (Software Inversion via \"set serialrx_inverted\" and Half Duplex mode via \"set serialrx_halfduplex\" will be checked; both should be off.)</p>  <p></p>  <p>Once <code>Retry...</code> lines appear, connect a LiPo if your receiver isn't powered by the USB (i.e. power up your FC and receiver). On subsequent flash, you can have the LiPo plugged in and receiver powered up from the start prior to connecting the USB.</p> <p>Wait for this process to finish. It's done once the \"Success\" prompt is shown.</p>","title":"Flashing via Passthrough (works with Betaflight, INAV)"},{"location":"quick-start/receivers/r9/#flashing-via-stlink","text":"<p>Warning</p> <p>R9Slim requires this as the first flashing method. This is irreversible, meaning you cannot put back Frsky firmware.</p>  <ul> <li> <p>Targets:</p> <ul> <li><code>Frsky_RX_R9MM_R9MINI_via_STLINK</code></li> <li><code>Frsky_RX_R9MX_via_STLINK</code></li> <li><code>Frsky_RX_R9SLIM_via_STLINK</code></li> <li><code>Frsky_RX_R9SLIMPLUS_via_STLINK</code></li> <li><code>Frsky_RX_R9SLIMPLUS_OTA_via_STLINK</code></li> </ul> </li> <li> <p>Device Category: </p> <ul> <li><code>Frsky R9</code></li> </ul> </li> <li> <p>Device:</p> <ul> <li><code>Frsky RX R9MM R9MINI</code></li> <li><code>Frsky RX R9MX</code></li> <li><code>Frsky RX R9SLIM</code></li> <li><code>Frsky RX R9SLIMPLUS</code></li> <li><code>Frsky RX R9SLIMPLUS OTA</code></li> </ul> </li> </ul>  <p></p> Flashing via STLink   <p>Warning</p> <p>This method is irreversible. It will remove the ability to reflash back to Frsky firmware. Make sure your STLink dongle is properly recognized by your System as such (Drivers are installed, etc.).</p>  <p>Wire up the Receiver to your STLink using <code>3v3</code>, <code>GND</code>, <code>CLK</code> and <code>DIO</code>. </p>  <p></p> R9Mini/R9MM    <p></p> R9MX    <p></p> R9Slim/R9Slim+   <p>Disable 'Readout Protection'. To do this download the ST-LINK Utility and follow this quick how to video. Or alternatively under linux you can use OpenOCD. </p> <p>How to video:</p>    <p>After doing so, <code>Disconnect</code> from STLink Utility.</p> <p>Using the correct target specific for your receiver, set your Firmware Options and hit Build &amp; Flash on the ExpressLRS Configurator.</p>  <p></p>  <p>Once done, wire your receiver to your Flight Controller. Passthrough flashing can now be used for updating the receiver.</p>","title":"Flashing via STLink"},{"location":"quick-start/receivers/radiomaster-rp-2400/","text":"<p></p>","title":"RadioMaster RP"},{"location":"quick-start/receivers/radiomaster-rp-2400/#wiring-up-your-receiver","text":"<p>Note</p> <p>There are Flight Controllers that will pull the RX pads <code>LOW</code> which will put the ESP-based receivers into <code>Bootloader Mode</code> unintentionally. A solid LED light on these receivers even with the TX module off is a sign they are in Bootloader Mode. If this is the case, rewire the receiver to a different UART.</p>   <p></p> RadioMaster RP1 2.4GHz   <p></p> RadioMaster RP2 2.4GHz  <p>The images above show the receivers' pinouts and their connections. As we're dealing with UART connection, Rx on the receiver goes to a TX pad on the FC, and Tx on the receiver goes to an uninverted Rx pad on the FC.</p> <p>There are Flight Controllers that put their Receiver UART's RX pads Low, which in turn, puts the ESP-based (e.g. EP1 and EP2) receivers to Bootloader mode unintentionally. One remedy is to wire them into a different UART, or wire a pull-up resistor (300-1k ohm) between the Rx pad of the FC and a 3.3v or 5v pad, as shown below.</p>  <p></p> Wiring up receiver  <p>Also of note is that the RP receivers need to be put into Bootloader mode manually on first time Passthrough Flash from their factory firmwares. To put any of these receivers into Bootloader mode, solder one end of a piece of wire into the Boot pad and the other end to the Ground pad. After the first succcessful passthrough flashing, the Boot pad connection to Ground should be removed. Subsequent passthrough flashing doesn't require the Boot pads connection to Ground.</p> <p>Flashing via Wifi doesn't need the Boot pad to be connected to Ground. Moreover, if it is connected, the receiver will stay in bootloader mode and won't activate its WiFi Mode.</p>","title":"Wiring up your receiver"},{"location":"quick-start/receivers/radiomaster-rp-2400/#configuring-your-flight-controller","text":"<p>To configure your flight controller properly, please go through Configure FC page. These settings apply on INAV, Betaflight and other flight controller software.</p> <p>Ports Tab should be setup so that Serial RX is on the UART where you have soldered the receiver.</p> <p>Receiver protocol is <code>CRSF</code> with <code>serialrx_inverted = off</code> and <code>serialrx_halfduplex = off</code>.</p> <p>The next step will not be able to proceed properly and you'll have issues later if any of these are set differently. Once you have configured your Flight Controller software, close its Configurator and unplug-replug the USB cable from the FC or your computer. This will refresh the connection and you'll be ensured that the port is not busy (of high importance with the Passthrough Flashing Method).</p>","title":"Configuring your Flight Controller"},{"location":"quick-start/receivers/radiomaster-rp-2400/#flashing-via-wifi","text":"<ul> <li> <p>Target: <code>HappyModel_EP_2400_RX_via_WIFI</code></p> </li> <li> <p>Device Category: <code>RadioMaster 2.4 GHz</code></p> </li> <li> <p>Device: <code>RadioMaster RP1/2 2400 RX</code></p> </li> </ul>  <p></p> Flashing via WiFi","title":"Flashing via WiFi"},{"location":"quick-start/receivers/radiomaster-rp-2400/#method-1","text":"<p>(Recommended as first-flash method)</p> <p>Before your proceed, make sure you have the receiver wired properly to your FC.</p> <p>Build the firmware using the ExpressLRS Configurator using the correct Target and Firmware Options. Once done, it should open a new window where the <code>RM_RP_2400RX-&lt;version&gt;.bin</code> is. Do not close this window so you can easily navigate to it once it's time to upload the firmware into the receiver.</p>  <p></p>  <p>Power your Flight Controller by either connecting a LiPo or attaching the USB cable (if receiver gets powered from USB via a 4v5 pad). Receiver's LED will blink slow at first, and after 20s or 30s (can be adjusted via ExpressLRS Configurator using <code>AUTO_WIFI_ON_INTERVAL</code>), it should blink fast indicating it's on Wifi Hotspot Mode.</p>  <p></p>  <p>Connect to the Wifi Network the receiver has created. It should be named something like <code>ExpressLRS RX</code> with the same <code>expresslrs</code> password as the TX Module Hotspot.</p>  <p></p>  <p>Navigate to the same web address as the TX Module (usually http://10.0.0.1). The Firmware upload page should load, and using the File Upload Form, navigate where the correct Receiver <code>RM_RP_2400RX-&lt;version&gt;.bin</code> is (like with the Tx module, you can also drag-and-drop the firmware file into the form field or use the <code>Browse</code> or <code>Choose File</code> button). Click on Update button and the firmware file will be uploaded and the update process should commence. </p> <p>A white page should load momentarily with the message Update Success! Rebooting.... Wait a little bit (you can wait until the LED on the Receiver starts to blink slowly again) and the receiver should be updated. Power cycle the receiver and it should be able to bind with your TX module now (given you have updated the Tx Module as well, and that they have the same binding phrase and options).</p>  <p>Update for version 2.0</p> <p>Once you have updated to firmware version 2.0 or newer, the Web Update page on the Hotspot will get a few updates of its own. It will get the Update progress bar, and a Popup will be shown for Success or Error messages. Additionally, you can configure Home Network SSID and Password if you chose not to use ExpressLRS Configurator to set them. Once these are set, you can use the two methods below.</p>   <p></p>","title":"Method 1"},{"location":"quick-start/receivers/radiomaster-rp-2400/#method-2","text":"<p>Note</p> <p>This method will only work once the Home Network SSID and Password has been configured with the receiver.</p>  <p>With the receiver wired properly to your FC, select the right target and set your Firmware Options in the ExpressLRS Configurator.</p> <p>Build the firmware. Once done, it should open a new window where the <code>RM_RP_2400RX-&lt;version&gt;.bin</code> is. Do not close this window so you can easily navigate to it once it's time to upload the firmware into the receiver.</p>  <p></p>  <p>Power up your Flight Controller by either connecting a LiPo or attaching the USB cable (if the receiver gets powered from USB via a 4v5 pad). The receiver's LED will blink slowly at first, and after 20s or 30s (can be adjusted via ExpressLRS Configurator using <code>AUTO_WIFI_ON_INTERVAL</code>), it should blink fast indicating it's on Wifi AP Mode. The fast blink will pause and flash fast once again, indicating connection to your Home Network.</p>  <p></p>  <p>Using your browser, navigate to http://elrs_rx.local/. The Wifi Update page should load. It should show your device target along with the version of the firmware it currently has.</p> <p>Scroll down to the Firmware Update section, shown below:</p>  <p></p>  <p>Drag-and-drop the <code>RM_RP_2400RX-&lt;version&gt;.bin</code> file created by the ExpressLRS Configurator into the Choose File field, or manually navigate to the Folder by clicking the <code>Choose File</code> button. Once the correct file is selected, click the <code>Update</code>. Wait for the process to complete, indicated by a Green popup screen. </p> <p>Wait a little bit (you can wait until the LED on the Receiver starts to blink slowly again) and the receiver should be updated.</p> <p>You can now power down your Flight Controller along with the receiver.</p>","title":"Method 2"},{"location":"quick-start/receivers/radiomaster-rp-2400/#method-3","text":"<p>Note</p> <p>This method will only work once the Home Network SSID and Password has been configured with the receiver.</p>  <p>With the receiver wired properly to your FC, select the right target and set your Firmware Options in the ExpressLRS Configurator.</p> <p>Power up your Flight Controller by either connecting a LiPo or attaching the USB cable (if the receiver gets powered from USB via a 4v5 pad). The receiver's LED will blink slowly at first, and after 20s or 30s (can be adjusted via ExpressLRS Configurator using <code>AUTO_WIFI_ON_INTERVAL</code>), it should blink fast indicating it's on Wifi Mode.</p>  <p></p>  <p>Build &amp; Flash the firmware using the ExpressLRS Configurator. Wait for the process to complete, indicated by the \"Success\" prompt and the Receiver LED has gone back to the Slow Blink mode. You can now power down the Flight Controller.</p>  <p></p>   <p></p>","title":"Method 3"},{"location":"quick-start/receivers/radiomaster-rp-2400/#flashing-via-passthrough","text":"<ul> <li> <p>Target: <code>HappyModel_EP_2400_RX_via_BetaflightPassthrough</code></p> </li> <li> <p>Device Category: <code>RadioMaster 2.4 GHz</code></p> </li> <li> <p>Device: <code>RadioMaster RP1/2 2400 RX</code></p> </li> </ul>  <p></p> Flashing via Passthrough  <p>Make sure you have your receiver wired properly. Rx pad on the Receiver wired up to a Tx pad on the FC, and the Tx pad on the Receiver wired up to an Rx pad on the FC. Also make sure you have setup your FC firmware to use CRSF Protocol, and that the UART is not inverted or running in half duplex.</p> <p>For the following steps, you should be disconnected from Betaflight or INAV Configurator. Close the FC Configurator and unplug the FC from USB to refresh the connection.</p> <p>You will need to solder one end of a piece of wire into the Boot pad and the other end into the Ground pad the first time you'll be updating with this method to manually put the receiver into Bootloader mode. The Wiring Guide shows where the <code>Boot</code> pad is. A solid LED indicates the receiver is in <code>Bootloader</code> mode when the TX module is OFF (Solid LED also indicates Radio+module &amp; Receiver is bound and has connection). </p>  <p>Note</p> <p>If you haven't shorted the <code>Boot</code> pad to ground but the receiver has solid LED light, your FC is probably pulling the current UART's RX pad <code>LOW</code> which will interfere with the normal and passthrough flashing of this receiver. Find another UART and wire your receiver there instead.</p>  <p>Power your FC with a LiPo, or if receiver is powered via USB (receiver is connected to a 4v5 pad), connect the FC to your USB port. Using the ExpressLRS Configurator, with the correct Target selected and Firmware Options set, click on Build &amp; Flash. Wait for the process to finish and you should be greeted with the \"Success\" banner.</p>  <p></p>  <p>Unplug USB and LiPo, and remove the wire connecting the <code>Boot</code> pad to Ground. Power your TX Module and then your FC to verify you are bound and has connection.</p>","title":"Flashing via Passthrough"},{"location":"quick-start/receivers/radiomaster-rp-2400/#flashing-via-ftdi","text":"<ul> <li> <p>Target: <code>HappyModel_EP_2400_RX_via_UART</code></p> </li> <li> <p>Device Category: <code>RadioMaster 2.4 GHz</code></p> </li> <li> <p>Device: <code>RadioMaster RP1/2 2400 RX</code></p> </li> </ul>  <p></p> Flashing via UART  <p>Wire the receiver into the FTDI, with TX on receiver connected to the Rx on the FTDI, and RX on receiver connected to the Tx of the FTDI. Wire 5V and GND of the FTDI to 5V and GND of the Receiver. Solder one end of a piece of wire into the Boot pad and the other end into the Ground pad then connect the FTDI Adapter to a USB port - the LED should now be solid.</p>  <p></p>  <p>Select the target and set your Firmware Options then click on Build and Flash.</p>  <p></p>  <p>Once the process is done, unsolder the receiver from the FTDI Adapter, remove the wire connecting the <code>Boot</code> pad to Ground and rewire the receiver into your FC as per the Wiring Guide.</p>","title":"Flashing via FTDI"},{"location":"quick-start/receivers/siyiFRmini/","text":"<p></p>  <p>Note</p> <p>This is only guaranteed to work on the v3.0 of the receiver.</p>","title":"Siyi FR Mini"},{"location":"quick-start/receivers/siyiFRmini/#flashing-via-stlink","text":"<ul> <li>Target: <code>FM30_RX_MINI_via_STLINK</code> (First-time Flash)</li> </ul>  <p>Note</p> <p>The only way to flash the FR Mini is using STLink. This is a one-way process, there is no returning to the stock firmware after flashing.</p>   <p></p>   <p></p> Siyi FR Mini  <ul> <li>Connect wires to DIO (SWDIO), CLK (SWCLK), RST, and GND to the header points on the RX</li> <li>Attach 3.3V to the VDD pad on the flashing header. Do not connect 5V here! </li> <li>Flash using the <code>FM30_RX_MINI_via_STLINK</code> target in the ExpressLRS Configurator</li> </ul>  <p></p> Flashing via STLink  <p>For more information and troubleshooting of the STLink connection, see the detail on the FM30 Initial Flashing page.</p> <p>Once flashing is complete, wire the receiver to your flight controller using the images below.</p>    Flight Controller FR Mini Receiver     5V VDD   GND GND   RX TX2   TX RX2     <p></p>   <p></p>  <p>Thank you @JupaCreations for contributing.</p>","title":"Flashing via STLink"},{"location":"quick-start/receivers/siyiFRmini/#updating-via-passthrough","text":"<ul> <li>Target: <code>FM30_RX_MINI_via_BetaflightPassthrough</code> (Updates)</li> </ul>  <p></p> Updating via Passthrough  <p>Updating is done via Betaflight Passthrough with the receiver wired to the flight controller. Be sure the transmitter is off, use the <code>FM30_RX_MINI_via_BetaflightPassthrough</code> target in the ExpressLRS Configurator and once done, click on Build and Flash.</p>  <p></p>","title":"Updating via Passthrough"},{"location":"quick-start/receivers/vantac2400/","text":"<p></p>","title":"Vantac"},{"location":"quick-start/receivers/vantac2400/#wiring-up-your-receiver","text":"<p>Note</p> <p>There are Flight Controllers that will pull the RX pads <code>LOW</code> which will put the ESP-based receivers into <code>Bootloader Mode</code> unintentionally. A solid LED light on these receivers even with the TX module off is a sign they are in Bootloader Mode. If this is the case, rewire the receiver to a different UART.</p>   <p></p> Vantac ELRS 2.4GHz  <p>The image above show the receiver pinouts and their connections. As we're dealing with UART connection, Rx on receiver goes to a TX pad on the FC, and Tx on the receiver goes to an uninverted Rx pad on the FC.</p> <p>There are Flight Controllers that put their Receiver UART's RX pads Low, which in turn, puts the ESP-based (e.g. EP1 and EP2) receivers to Bootloader mode unintentionally. One remedy is to wire them into a different UART, or wire a pull-up resistor (300-1k ohm) between the Rx pad of the FC and a 3.3v or 5v pad, as shown below.</p>  <p></p> Wiring up receiver","title":"Wiring up your receiver"},{"location":"quick-start/receivers/vantac2400/#configuring-your-flight-controller","text":"<p>To configure your flight controller properly, please go through Configure FC page. These settings apply on INAV, Betaflight and other flight controller software.</p> <p>Ports Tab should be setup so that Serial RX is on the UART where you have soldered the receiver.</p> <p>Receiver protocol is <code>CRSF</code> with <code>serialrx_inverted = off</code> and <code>serialrx_halfduplex = off</code>.</p> <p>The next step will not be able to proceed properly and you'll have issues later if any of these are set differently. Once you have configured your Flight Controller software, close its Configurator and unplug-replug the USB cable from the FC or your computer. This will refresh the connection and you'll be ensured that the port is not busy (of high importance with the Passthrough Flashing Method).</p>","title":"Configuring your Flight Controller"},{"location":"quick-start/receivers/vantac2400/#flashing-via-wifi","text":"<ul> <li> <p>Target: <code>Vantac_2400_RX_via_WIFI</code></p> </li> <li> <p>Device Category: <code>Vantac 2.4 GHz</code></p> </li> <li> <p>Device: <code>Vantac 2400 RX</code></p> </li> </ul>  <p></p> Flashing via WiFi","title":"Flashing via WiFi"},{"location":"quick-start/receivers/vantac2400/#method-1","text":"<p>With the receiver wired properly to your FC, select the correct target and set the Firmware Options in the ExpressLRS Configurator.</p> <p>Build the firmware. Once done, it should open a new window where the <code>Vantac_2400_RX-&lt;version&gt;.bin</code> is. Do not close this window so you can easily navigate to it once it's time to upload the firmware into the receiver.</p>  <p></p>  <p>Power your Flight Controller by either connecting a LiPo or attaching the USB cable (if the receiver gets powered from USB via a 4v5 pad). The receiver's LED will blink slowly at first, and after 20s or 30s (can be adjusted via ExpressLRS Configurator using <code>AUTO_WIFI_ON_INTERVAL</code>), it should blink fast indicating it's on Wifi Hotspot Mode.</p>  <p></p>  <p>Connect to the Wifi Network the receiver has created. It should be named something like <code>ExpressLRS RX</code> with the same <code>expresslrs</code> password as the TX Module Hotspot.</p>  <p></p>  <p>Navigate to the same web address as the TX Module (usually http://10.0.0.1). The Firmware upload page should load, and using the File Upload Form, navigate where the correct Receiver <code>Vantac_2400_RX-&lt;version&gt;.bin</code> is (like with the Tx module, you can also drag-and-drop the firmware file into the form field or use the <code>Browse</code> or <code>Choose File</code> button). Click on the Update button and the firmware file will be uploaded and the update process should commence.</p> <p>A white page should load momentarily with the message Update Success! Rebooting.... Wait a little bit (you can wait until the LED on the Receiver starts to blink slowly again) and the receiver should be updated. Power cycle the receiver and it should be able to bind with your TX module now (given you have updated the Tx Module as well, and that they have the same binding phrase and options).</p>  <p>Update for version 2.0</p> <p>Once you have updated to firmware version 2.0 or newer, the Web Update page on the Hotspot will get a few updates of its own. It will get the Update progress bar, and a Popup will be shown for Success or Error messages. Additionally, you can configure Home Network SSID and Password if you chose not to use ExpressLRS Configurator to set them. Once these are set, you can use the two methods below.</p>   <p></p>","title":"Method 1"},{"location":"quick-start/receivers/vantac2400/#method-2","text":"<p>Note</p> <p>This method will only work once the Home Network SSID and Password has been configured with the receiver.</p>  <p>With the receiver wired properly to your FC, select the right target and set your Firmware Options in the ExpressLRS Configurator.</p> <p>Build the firmware. Once done, it should open a new window where the <code>Vantac_2400_RX-&lt;version&gt;.bin</code> is. Do not close this window so you can easily navigate to it once it's time to upload the firmware into the receiver.</p>  <p></p>  <p>Power up your Flight Controller by either connecting a LiPo or attaching the USB cable (if the receiver gets powered from USB via a 4v5 pad). The receiver's LED will blink slowly at first, and after 20s or 30s (can be adjusted via ExpressLRS Configurator using <code>AUTO_WIFI_ON_INTERVAL</code>), it should blink fast indicating it's on Wifi AP Mode. The fast blink will pause and flash fast once again, indicating connection to your Home Network.</p>  <p></p>  <p>Using your browser, navigate to http://elrs_rx.local/. The Wifi Update page should load. It should show your device target along with the version of the firmware it currently has.</p> <p>Scroll down to the Firmware Update section, shown below:</p>  <p></p>  <p>Drag-and-drop the <code>Vantac_2400_RX-&lt;version&gt;.bin</code> file created by the ExpressLRS Configurator into the Choose File field, or manually navigate to the Folder by clicking the <code>Choose File</code> button. Once the correct file is selected, click the <code>Update</code>. Wait for the process to complete, indicated by a Green popup screen. </p> <p>Wait a little bit (you can wait until the LED on the Receiver starts to blink slowly again) and the receiver should be updated.</p> <p>You can now power down your Flight Controller along with the receiver.</p>","title":"Method 2"},{"location":"quick-start/receivers/vantac2400/#method-3","text":"<p>Note</p> <p>This method will only work once the Home Network SSID and Password has been configured with the receiver.</p>  <p>With the receiver wired properly to your FC, select the right target and set your Firmware Options in the ExpressLRS Configurator.</p> <p>Power up your Flight Controller by either connecting a LiPo or attaching the USB cable (if the receiver gets powered from USB via a 4v5 pad). The receiver's LED will blink slowly at first, and after 20s or 30s (can be adjusted via ExpressLRS Configurator using <code>AUTO_WIFI_ON_INTERVAL</code>), it should blink fast indicating it's on Wifi Mode.</p>  <p></p>  <p>Build &amp; Flash the firmware using the ExpressLRS Configurator. Wait for the process to complete, indicated by the \"Success\" prompt and the Receiver LED has gone back to the Slow Blink mode. You can now power down the Flight Controller.</p>  <p></p>   <p></p>","title":"Method 3"},{"location":"quick-start/receivers/vantac2400/#flashing-via-passthrough","text":"<ul> <li> <p>Target: <code>Vantac_2400_RX_via_BetaflightPassthrough</code></p> </li> <li> <p>Device Category: <code>Vantac 2.4 GHz</code></p> </li> <li> <p>Device: <code>Vantac 2400 RX</code></p> </li> </ul>  <p></p> Flashing via Passthrough  <p>Make sure you have wired your receiver properly. Rx pad on the Receiver wired up to a Tx pad on the FC, and the Tx pad on the Receiver wired up to an Rx pad on the FC. Also make sure you have setup your FC firmware to use CRSF Protocol, and that the UART is not inverted or running in half duplex.</p> <p>For the following steps, you should be disconnected from Betaflight or INAV Configurator. Close the FC Configurator and unplug the FC from USB to refresh the connection.</p> <p>If the receiver gets powered up when you connect the FC to USB, you will need to Press and Hold the button on the receiver, connect USB and let go of the button once the LED stopped blinking and goes SOLID.</p> <p>If the receiver needs a LiPo attached to get powered up, then Press and Hold the button on the receiver, attach a LiPo, then let go once the LED in the receiver stopped blinking and goes SOLID. Then connect your FC to USB.</p>  <p>Note</p> <p>If you powered the receiver and has solid LED light, your FC is probably pulling the current UART's RX pad <code>LOW</code> which will interfere with the normal and passthrough flashing of this receiver. Find another UART and wire your receiver there instead.</p>  <p>These procedures will not be needed in subsequent passthrough flashing. This is only needed on the first time you'd update the receiver from its factory firmware.</p> <p>Select the corresponding target in the ExpressLRS Configurator, set your Firmware Options and then click Build and Flash. For first time flashing/updating, it would normally take a while.</p>  <p></p>  <p>A <code>Success</code> message will be shown once the process is complete.</p>","title":"Flashing via Passthrough"},{"location":"quick-start/receivers/vantac2400/#flashing-via-ftdi","text":"<ul> <li> <p>Target: <code>Vantac_2400_RX_via_UART</code></p> </li> <li> <p>Device Category: <code>Vantac 2.4 GHz</code></p> </li> <li> <p>Device: <code>Vantac 2400 RX</code></p> </li> </ul>  <p></p> Flashing via UART  <p>Wire the receiver into the FTDI, with TX on receiver connected to the Rx on the FTDI, and RX on receiver connected to the Tx of the FTDI. Wire 5V and GND of the FTDI to 5V and GND of the Receiver. Press the button while powering the RX on, and release - the LED should now be solid.</p>  <p></p>  <p>Select the target and set your Firmware Options and once done, click on Build and Flash.</p>  <p></p>","title":"Flashing via FTDI"},{"location":"quick-start/receivers/voyager900/","text":"<p></p>","title":"NamimnoRC Voyager"},{"location":"quick-start/receivers/voyager900/#check-your-target","text":"<p>There are more <code>ESP8285</code> based RXes in the market due to massive shortage of <code>STM32</code> Chips. These support WiFi updating, and can be easily distinguished with a few tricks. The simplest way to tell is if on the rear of the RX (the side without the U.fl/SMD antenna) there is a large white component with the label RainSun (pictured below). If this is not there, you have an STM32 based target, if it is you have an <code>_ESP_</code> target, and can update using Wifi!</p>  <p></p> RainSun Antenna   <p>Note</p> <p>New versions of the receiver also have the PCB Wifi Antenna, and doesn't have the Rainsun SMD Antenna mentioned above. These will use the same ESP-based Target, not the STM-based target.</p>","title":"Check your Target"},{"location":"quick-start/receivers/voyager900/#wiring-up-your-receiver","text":"<p>Note</p> <p>There are Flight Controllers that will pull the RX pads <code>LOW</code> which will put the ESP-based receivers into <code>Bootloader Mode</code> unintentionally. A solid LED light on these receivers even with the TX module off is a sign they are in Bootloader Mode. If this is the case, rewire the receiver to a different UART.</p>   <p></p>  <p>The image above show the receiver pinouts and their connections. As we're dealing with UART connection, Rx on receiver goes to a TX pad in the FC, and Tx on Receiver goes to an uninverted Rx pad on the FC.</p> <p>There are Flight Controllers that put their Receiver UART's RX pads Low, which in turn, puts the ESP-based (e.g. EP1 and EP2) receivers to Bootloader mode unintentionally. One remedy is to wire them into a different UART, or wire a pull-up resistor (300-1k ohm) between the Rx pad of the FC and a 3.3v or 5v pad, as shown below.</p>  <p></p> Wiring up receiver","title":"Wiring up your receiver"},{"location":"quick-start/receivers/voyager900/#configuring-your-flight-controller","text":"<p>To configure your flight controller properly, please go through Configure FC page. These settings apply on INAV, Betaflight and other flight controller software.</p> <p>Ports Tab should be setup so that Serial RX is on the UART where you have soldered the receiver.</p> <p>Receiver protocol is <code>CRSF</code> with <code>serialrx_inverted = off</code> and <code>serialrx_halfduplex = off</code>.</p> <p>The next step will not be able to proceed properly and you'll have issues later if any of these are set differently. Once you have configured your Flight Controller software, close its Configurator and unplug-replug the USB cable from the FC or your computer. This will refresh the connection and you'll be ensured that the port is not busy (of high importance with the Passthrough Flashing Method).</p>","title":"Configuring your Flight Controller"},{"location":"quick-start/receivers/voyager900/#flashing-via-passthrough","text":"<ul> <li> <p>Targets:</p> <ul> <li><code>NamimnoRC_VOYAGER_900_ESP_RX_via_BetaflightPassthrough</code> </li> <li><code>NamimnoRC_VOYAGER_900_RX_via_BetaflightPassthrough</code></li> </ul> </li> <li> <p>Device Category: </p> <ul> <li><code>NamimnoRC VOYAGER 900 MHz</code></li> </ul> </li> <li> <p>Device:</p> <ul> <li><code>NamimnoRC VOYAGER 900 ESP RX</code></li> <li><code>NamimnoRC VOYAGER 900 RX</code></li> </ul> </li> </ul>  <p></p> Flashing via Passthrough","title":"Flashing via Passthrough"},{"location":"quick-start/receivers/voyager900/#stm-based-receivers","text":"<p>Once wired properly to your FC, connect USB. Did your receiver powered up too (with both LEDs lit)? If so, disconnect USB, hold the bind button on your receiver, and reconnect to USB. The LED should start alternating between the Green and Red LEDs. Once it's alternating, you can then let go of the Bind Button.</p> <p>If your receiver didn't get powered from USB, have a lipo ready and continue with the next steps. On the ExpressLRS Configurator, with your Firmware Options set, click on Build &amp; Flash. Like on the TX module, it will take a while on the first time. Watch out for the <code>Passthrough Init</code> stage. This stage will check your FC Configuration for the Serial RX UART (Software Inversion via \"set serialrx_inverted\" and Half Duplex mode via \"set serialrx_halfduplex\" will be checked; both should be off.)</p>  <p></p>  <p>Once <code>Retry...</code> lines appear, connect a LiPo if your receiver isn't powered by the USB (i.e. power up your receiver and FC). On subsequent flash, you can have the LiPo plugged in and receiver powered up from the start.</p>","title":"STM-based receivers"},{"location":"quick-start/receivers/voyager900/#esp-based-receivers","text":"<p>For the ESP-based receivers, you can connect a LiPo during the <code>PASSTHROUGH DONE</code> section of the Log.</p> <p>Wait for this process to finish. It's done once the \"Success\" prompt is shown.</p>","title":"ESP-based receivers"},{"location":"quick-start/receivers/voyager900/#updating-via-wifi-esp-only-recommended","text":"<ul> <li> <p>Target: <code>NamimnoRC_VOYAGER_900_ESP_RX_via_WIFI</code></p> </li> <li> <p>Device Category: <code>NamimnoRC VOYAGER 900 MHz</code></p> </li> <li> <p>Device: <code>NamimnoRC VOYAGER 900 ESP RX</code></p> </li> </ul>  <p></p> Updating via WiFi","title":"Updating via WiFi (ESP Only - Recommended)"},{"location":"quick-start/receivers/voyager900/#method-1","text":"<p>With the receiver wired properly to your FC, select the right target and set your Firmware Options in the ExpressLRS Configurator.</p> <p>Build the firmware. Once done, it should open a new window where the <code>NamimnoRC_VOYAGER_900_ESP_RX-&lt;version&gt;.bin</code> is. Do not close this window so you can easily navigate to it once it's time to upload the firmware into the receiver.</p>  <p></p>  <p>Power your Flight Controller by either connecting a LiPo or attaching the USB cable (if the receiver gets powered from USB via a 4v5 pad). The receiver's LED will blink slowly at first, and after 20s or 30s (can be adjusted via ExpressLRS Configurator using <code>AUTO_WIFI_ON_INTERVAL</code>), it should blink fast indicating it's on Wifi Hotspot Mode.</p>  <p></p>  <p>Connect to the Wifi Network the receiver has created. It should be named something like <code>ExpressLRS RX</code> with the same <code>expresslrs</code> password as the TX Module Hotspot.</p>  <p></p>  <p>Navigate to the same web address as the TX Module (usually http://10.0.0.1). The Firmware upload page should load, and using the File Upload Form, navigate where the correct Receiver <code>NamimnoRC_VOYAGER_900_ESP_RX-&lt;version&gt;.bin</code> is (like with the Tx module, you can also drag-and-drop the firmware file into the form field or use the <code>Browse</code> or <code>Choose File</code> button). Click on the Update button and the firmware file will be uploaded and the update process should commence.</p> <p>A white page should load momentarily with the message Update Success! Rebooting.... Wait a little bit (you can wait until the LED on the Receiver starts to blink slowly again) and the receiver should be updated. Power cycle and your module and receiver should now be bound (given you have updated the Tx Module as well, and that they have the same binding phrase and options).</p>  <p>Update for version 2.0</p> <p>Once you have updated to firmware version 2.0 or newer, the Web Update page on the Hotspot will get a few updates of its own. It will get the Update progress bar, and a Popup will be shown for Success or Error messages. Additionally, you can configure Home Network SSID and Password if you chose not to use ExpressLRS Configurator to set them. Once these are set, you can use the two methods below.</p>   <p></p>","title":"Method 1"},{"location":"quick-start/receivers/voyager900/#method-2","text":"<p>Note</p> <p>This method will only work once the Home Network SSID and Password has been configured with the receiver.</p>  <p>With the receiver wired properly to your FC, select the right target and set your Firmware Options in the ExpressLRS Configurator.</p> <p>Build the firmware. Once done, it should open a new window where the <code>NamimnoRC_VOYAGER_900_ESP_RX-&lt;version&gt;.bin</code> is. Do not close this window so you can easily navigate to it once it's time to upload the firmware into the receiver.</p>  <p></p>  <p>Power up your Flight Controller by either connecting a LiPo or attaching the USB cable (if the receiver gets powered from USB via a 4v5 pad). The receiver's LED will blink slowly at first, and after 20s or 30s (can be adjusted via ExpressLRS Configurator using <code>AUTO_WIFI_ON_INTERVAL</code>), it should blink fast indicating it's on Wifi Mode.</p>  <p></p>  <p>Using your browser, navigate to http://elrs_rx.local/. The Wifi Update page should load. It should show your device target along with the version of the firmware it currently has.</p> <p>Scroll down to the Firmware Update section, shown below:</p>  <p></p>  <p>Drag-and-drop the <code>NamimnoRC_VOYAGER_900_ESP_RX-&lt;version&gt;.bin</code> file created by the ExpressLRS Configurator into the Choose File field, or manually navigate to the Folder by clicking the <code>Choose File</code> button. Once the correct file is selected, click the <code>Update</code>. Wait for the process to complete, indicated by a Green popup screen.</p> <p>Wait a little bit (you can wait until the LED on the Receiver starts to blink slowly again) and the receiver should be updated.</p> <p>You can now power down your Flight Controller along with the receiver.</p>","title":"Method 2"},{"location":"quick-start/receivers/voyager900/#method-3","text":"<p>Note</p> <p>This method will only work once the Home Network SSID and Password has been configured with the receiver.</p>  <p>With the receiver wired properly to your FC, select the right target and set your Firmware Options in the ExpressLRS Configurator.</p> <p>Power up your Flight Controller by either connecting a LiPo or attaching the USB cable (if the receiver gets powered from USB via a 4v5 pad). The receiver's LED will blink slowly at first, and after 20s or 30s (can be adjusted via ExpressLRS Configurator using <code>AUTO_WIFI_ON_INTERVAL</code>), it should blink fast indicating it's on Wifi Mode.</p>  <p></p>  <p>Build &amp; Flash the firmware using the ExpressLRS Configurator. Wait for the process to complete, indicated by the \"Success\" prompt and the Receiver LED has gone back to the Slow Blink mode. You can now power down the Flight Controller.</p>  <p></p>   <p></p>","title":"Method 3"},{"location":"quick-start/receivers/voyager900/#updating-via-ftdi-esp-only","text":"<ul> <li> <p>Target: <code>NamimnoRC_VOYAGER_900_ESP_RX_via_UART</code></p> </li> <li> <p>Device Category: <code>NamimnoRC VOYAGER 900 MHz</code></p> </li> <li> <p>Device: <code>NamimnoRC VOYAGER 900 ESP RX</code></p> </li> </ul>  <p></p> Updating via UART  <p>Wire the receiver into the FTDI, with the TX on receiver connected to the Rx on the FTDI, and the RX on receiver connected to the Tx of the FTDI. Wire 5V and GND of the FTDI to 5V and GND of the Receiver. Press the button while powering the RX on, and release - the LED should now be solid.</p>  <p></p>  <p>Select the target and set your Firmware Options and once done, click on Build and Flash.</p>  <p></p>","title":"Updating via FTDI (ESP Only)"},{"location":"quick-start/receivers/voyager900/#updating-via-stlinkstm32-only","text":"<ul> <li> <p>Target: <code>NamimnoRC_VOYAGER_900_RX_via_STLINK</code></p> </li> <li> <p>Device Category: <code>NamimnoRC VOYAGER 900 MHz</code></p> </li> <li> <p>Device: <code>NamimnoRC VOYAGER 900 RX</code></p> </li> </ul>  <p></p> Updating via STLink  <p>The units provided to the documentation team did not have STM32 chips due to the chip shortage, however, the following should apply. Wire CLK, 3v3, GND and DIO to the recievers STLink pins.</p> <p>Select the target and set your Firmware Options and once done, click on Build and Flash.</p>  <p></p>","title":"Updating via STLink(STM32 Only)"},{"location":"quick-start/receivers/wiring-up/","text":"<p></p>  <p>Hot Tip</p> <p>Manufacturer-suggested Receiver UARTs, or UARTs alloted for Receivers usually have a pull-down resistor to aid with SBUS (RX pad inversion) which will result into SOLID LEDs on the ESP-based ExpressLRS Receivers. It is best to avoid those UARTs unless you know your UARTs.</p>  <p>When in doubt, avoid that UART. --deadbyte</p>    <p>Hint!</p> <p>KISS FCs may label its UARTs differently. You might have to wire up the Rx pin into an RX pad, and the Tx pin into a TX pad. Always check your FC wiring guide/manual.</p>","title":"Receiver Wiring"},{"location":"quick-start/receivers/wiring-up/#preparations","text":"<p>Have your Flight Controller Wiring Manual handy before you proceed. Make sure you have the right wiring diagram for your flight controller. Some Flight Controllers have different board revisions and they could have changed the board layout or pin assignments.</p> <p>Determine if your Flight Controller have specific UARTs (RX and TX pair) for specific purpose. An example of such were ESC Telemetry UARTs or VTX SmartAudio/Tramp UARTs. Some Flight Controllers, specially those based off the F4 MCUs with limited UARTs, tend to have two of the same UART pads in different locations. You would want to make sure no other peripheral is wired up on the UART you chose for your ExpressLRS Receiver. You can move your existing wiring to other UARTs to make sure your ExpressLRS receiver will get a full UART connection (Rx and Tx pair of pads). Think of a UART as a USB port on your computer that can host different USB devices at one time.</p>  <p></p> An FC Pinout Diagram with RX6 &amp; TX3 in two locations  <p>Flight Controllers have at least 2 UARTs. One for the VTX Smartaudio/Tramp Protocol connection (only requires a TX pad), and another for a Receiver. There are Flight Controllers that often only have an RX pad for the Receiver UART, which you can still use for your ExpressLRS Receiver although you will have to forego Telemetry and Passthrough Updates. If you must have Telemetry from the FC to your radio, you will need a full UART (RX and TX pair) and in such cases you can use Soft Serial for your VTX Smartaudio/Tramp connection and use the other UART for your Receiver.</p> <p>F7-based Flight Controllers, like those with F722 or F745 MCUs, often suggests wiring receivers on a particular UART. Because you can invert the UART signal for these MCUs, there's no specific pad for SBUS, and as such, these suggested Receiver UARTS often have a pull-down resistor to aid with the signal inversion. If you have wired your ESP-based ExpressLRS Receiver (e.g. EP1 or EP2) to these UARTs and the LED doesn't blink at all and stays solid (indicating it is in bootloader mode), there's a high chance that the UART's RX pad have such pull-down resistor. To test for this, unsolder the rx and tx wires of the Receiver from the FC, and verify the LED blinks slow and after some 20-30s (or 60s), the LED would blink fast to indicate WiFi mode.</p> <p>There are F4-based Flight Controllers that also use the same UART for SBUS and other protocols. An example is the iFlight F405 Succex Flight Controllers. They often suggest using UART2 for Receivers. An inverted R2 pad is provided for SBUS receivers (sometimes labeled iR2 or nR2) and the regular R2 pad for other protocols. We suggest avoiding such UARTs altogether.</p> <p>Here's some Receiver LED patterns:</p>     LED Indication Status      Slow blink 500ms on/off Waiting for connection from transmitter    Fast blinking 25ms on/off WiFi mode enabled    Solid on Connected to a transmitter, or bootloader mode enabled    <p>For other modes, see the LED Status page.</p> <p>Should you really need to use that particular UART that puts your ESP-based ExpressLRS Receiver into Bootloader mode, you can wire up a pull-up resistor between the RX pad of the FC UART and a 3.3v or 5v pad. You can use any resistor with values ranging from 300ohm to 1K ohm. The wattage rating isn't as important as this will be a signal pull-up, but choose an appropriate size.</p>  <p></p> Pull up resistor wiring  <p>Those using DJI Air Units require another set of UARTs. The SBUS connection from the Air Unit to the FC is not needed and sometimes interfere with the ExpressLRS Receiver, moreover if it's wired up to the same UART as the Receiver. It's generally a good idea to disconnect that SBUS wire altogether. If the UART that's left for your ExpressLRS Receiver has a pull-down resistor making your Receiver stay in Bootloader Mode, swap the two devices (i.e. Air Unit goes to the Receiver UART, ExpressLRS Receiver goes into the Air Unit UART).</p>","title":"Preparations"},{"location":"quick-start/receivers/wiring-up/#axisflying-receivers","text":"<p></p> Axisflying Thor, ESP-based  <p>Connect Rx to a Tx pad in the FC and the Tx to an Rx pad in the FC. Of course, don't forget to connect VCC to a 5V pad, and GND to a GND pad on the FC.</p> <p>This is an ESP-based receivers and updating via WiFi is supported.</p> <p>Connect your FC to USB and configure your FC firmware as shown on the next page.</p>","title":"AxisFlying Receivers"},{"location":"quick-start/receivers/wiring-up/#betafpv-receivers","text":"<p></p> BetaFPV 900MHz Nano, ESP-based   <p></p> BetaFPV 2.4GHz Nano, ESP-based   <p></p> BetaFPV 2.4GHz Lite (Flat &amp; Tower), ESP-based  <p>Connect Rx to a Tx pad on the FC and Tx to an Rx pad on the FC. Don't forget to also wire up 5v(VCC) and Gnd.</p> <p>These are ESP-based receivers and updating via WiFi is supported.</p> <p>Connect your FC to USB and configure your FC firmware as shown on the next page.</p>","title":"BetaFPV Receivers"},{"location":"quick-start/receivers/wiring-up/#frsky-r9mmmini-r9mx-r9slim-r9slim","text":"<p></p>   <p>Note</p> <p>This will be the same wiring you'll use for flying and the subsequent firmware updates (via Passthrough). Forget the factory wiring guide!</p>  <p>After you've flashed the bootloader and wired your receiver as above, proceed to configure up your flight controller as shown on the next page.</p>  <p>Note</p> <p>R9 Slim requires flashing via STLink first. Passthrough should work for updates.</p>","title":"Frsky R9MM/mini, R9mx, R9Slim, R9Slim+"},{"location":"quick-start/receivers/wiring-up/#geprc-900mhz-24ghz","text":"<p></p> GEPRC Nano 900MHz, ESP-based   <p></p> GEPRC Nano, ESP-based   <p></p> GEPRC Nano SE, ESP-based  <p>Connect Rx to a Tx pad on the FC and Tx to an Rx pad on the FC. Take note the location of the Nano SE Boot pad, and the Boot buttons of the Nano.</p> <p>As this is an ESP-based receiver, be aware that there are certain FCs that puts their Receiver UART's RX pads Low, which in turn, puts the receiver to Bootloader mode unintentionally.</p> <p>After you've wired your receiver, proceed to configuring your FC firmware as shown on the next page.</p>","title":"GEPRC 900MHz &amp; 2.4GHz"},{"location":"quick-start/receivers/wiring-up/#happymodel-ep1-ep2-pp","text":"<p></p> Happymodel EP1 &amp; EP2, ESP-based   <p></p> Happymodel PP  <p>The EP receivers require their Boot pads (see figure above) be bridged on first time Passthrough Flash from their factory firmwares. After the first passthrough flashing, the bridge needs to be removed, and is no longer needed for subsequent passthrough flashing.</p> <p>Flashing via Wifi doesn't need the Boot Pads bridged. Moreover, if it is bridged, the receiver will stay in bootloader mode (indicated with a solid LED) and won't activate the wifi hotspot.</p> <p>The PP doesn't have boot pads and also do not support WiFi as it uses an STM-based MCU.</p> <p>After you've wired your receiver, proceed to configuring your FC firmware as shown on the next page.</p>","title":"Happymodel EP1, EP2, PP"},{"location":"quick-start/receivers/wiring-up/#happymodel-es900rx","text":"<p></p> ES900RX, ESP-based  <p>Connect Rx to a Tx pad on the FC and Tx to an Rx pad on the FC. Additionally, the Boot Pads, encircled in the photo above, needs to be bridged for the first-time passthrough flash from the factory firmware.</p> <p>As this is an ESP-based receiver, be aware that there are certain FCs that puts their Receiver UART's RX pads Low, which in turn, puts the receiver to Bootloader mode unintentionally.</p> <p>Should you be updating via Wifi, the bridging of the boot pads is not needed. </p> <p>After you've wired your receiver, proceed to configuring your FC firmware as shown on the next page.</p>","title":"Happymodel ES900RX"},{"location":"quick-start/receivers/wiring-up/#happymodel-es915868rx","text":"<p></p>  <p>Connect Rx to a Tx pad in the FC and the Tx to an Rx pad in the FC. Of course, don't forget to connect VCC to a 5V pad, and GND to a GND pad on the FC.</p> <p>These receivers are STM-based, and thus no support for WiFi Flashing/Updating.</p> <p>Connect your FC to USB and configure your FC firmware as shown on the next page.</p>","title":"Happymodel ES915/868RX"},{"location":"quick-start/receivers/wiring-up/#iflight-900mhz-24ghz","text":"<p></p> iFlight 900MHz &amp; 2.4GHz Dipole, ESP-based   <p></p> iFlight 2.4GHz SMD, ESP-based  <p>Connect Rx to a Tx pad on the FC and Tx to an Rx pad on the FC. Boot buttons are indicated above.</p> <p>As this is an ESP-based receiver, be aware that there are certain FCs that puts their Receiver UART's RX pads Low, which in turn, puts the receiver to Bootloader mode unintentionally.</p> <p>After you've wired your receiver, proceed to configuring your FC firmware as shown on the next page.</p>","title":"iFlight 900MHz &amp; 2.4GHz"},{"location":"quick-start/receivers/wiring-up/#jumper-aion","text":"<p></p> Jumper Aion, ESP-based  <p>Connect Rx to a Tx pad in the FC and the Tx to an Rx pad in the FC. Of course, don't forget to connect VCC to a 5V pad, and GND to a GND pad on the FC.</p> <p>This is an ESP-based receivers and updating via WiFi is supported.</p> <p>Connect your FC to USB and configure your FC firmware as shown on the next page.</p>","title":"Jumper Aion"},{"location":"quick-start/receivers/wiring-up/#mateksys-receivers","text":"<p></p> R24-D (Antenna) Diversity, ESP-based   <p></p> R24-S SMD Antenna, ESP-based  <p>Connect Rx/R to a Tx pad on the FC and Tx/T to an Rx pad on the FC. Don't forget to also wire up 5v and Gnd.</p> <p>These are ESP-based receivers and updating via WiFi is supported.</p> <p>Connect your FC to USB and configure your FC firmware as shown on the next page.</p>","title":"MatekSys Receivers"},{"location":"quick-start/receivers/wiring-up/#namimnorc-voyager-flash","text":"<p></p> Namimno Voyager 900MHz Receiver   <p></p> Namimno Flash 2.4GHz Receiver v1   <p></p> Namimno Flash V2 SMD; ESP-based   <p></p> Namimno Flash V2 T-Dipole; ESP-based   <p></p> Namimno Flash V2 Diversity; ESP-based  <p>Connect Rx to a Tx pad in the FC and the Tx to an Rx pad in the FC. Of course, don't forget to connect VCC to a 5V pad, and GND to a GND pad on the FC.</p> <p>Also shown above were the boot pads for the V2 of these receivers.</p> <p>Connect your FC to USB and configure your FC firmware as shown on the next page.</p>","title":"NamimnoRC Voyager &amp; Flash"},{"location":"quick-start/receivers/wiring-up/#radiomaster-rp","text":"<p></p> RadioMaster RP1, ESP-based   <p></p> RadioMaster RP2, ESP-based  <p>The RP receivers require their Boot pad (see figure above) shorted to ground on first time Passthrough Flash from their factory firmwares. After the first passthrough flashing, the Boot pad connection needs to be removed, and is no longer needed for subsequent passthrough flashing.</p> <p>Flashing via Wifi doesn't need the Boot Pads bridged. Moreover, if it is bridged, the receiver will stay in bootloader mode (indicated with a solid LED) and won't activate the wifi hotspot.</p> <p>After you've wired your receiver, proceed to configuring your FC firmware as shown on the next page.</p>","title":"RadioMaster RP"},{"location":"quick-start/receivers/wiring-up/#vantac-elrs","text":"<p></p> Vantac, ESP-based  <p>Connect Rx to a Tx pad in the FC and the Tx to an Rx pad in the FC. Of course, don't forget to connect VCC to a 5V pad, and GND to a GND pad on the FC.</p> <p>This is an ESP-based receivers and updating via WiFi is supported.</p> <p>Connect your FC to USB and configure your FC firmware as shown on the next page.</p>","title":"Vantac ELRS"},{"location":"quick-start/transmitters/aion-internal/","text":"<p></p>","title":"Internal Jumper T-Pro"},{"location":"quick-start/transmitters/aion-internal/#flashing-via-wifi","text":"<p>Targets: <code>Jumper_AION_T-Pro_2400_TX_via_WIFI</code></p> <p>Device Category: <code>Jumper 2.4 GHz</code></p> <p>Device: <code>Jumper AION T-Pro 2400 TX</code></p> <p></p>","title":"Flashing via Wifi"},{"location":"quick-start/transmitters/aion-internal/#method-1","text":"<p>With the correct target selected and Firmware Options set, Build your firmware using the ExpressLRS Configurator.</p> <p></p> <p>Once it's done, it should open the Target folder for you where the <code>Jumper_AION_T-Pro_2400_TX-&lt;version&gt;.bin</code> file is. Do not close this window so you can easily locate the correct file to upload to the module.</p> <p>The next steps will require the ExpressLRS Lua Script (right-click, save as). Download the ExpressLRS lua script and save it to your Radio's <code>/Scripts/Tools</code> folder. Execute the ExpressLRS lua script by pressing \"System Menu\" in your radio and then under Tools, select <code>ExpressLRS</code>.</p> <p></p> <p>Select WiFi Connectivity from the Lua script and then select Enable WiFi. Press OK once more to activate the WiFi on the Tx Module. Connect to the Access Point the module will create called <code>ExpressLRS TX</code>, with the password being <code>expresslrs</code>.</p> <p></p>  <p></p>  <p>Using your browser, navigate to the correct page (typically http://10.0.0.1/) and it should show an upload form (you will have to scroll down a bit). You can drag-and-drop the <code>Jumper_AION_T-Pro_2400_TX-&lt;version&gt;.bin</code> file that the ExpressLRS Configurator created. You can also click the <code>Choose File</code> button and navigate to the folder where the firmware was created. Ensure that you have selected the correct firmware file and click <code>Update</code>.</p> <p>If a Popup appears warning you're flashing the wrong target, click <code>Flash Anyway</code>. These units came pre-flashed from factory with an older Target, before these specific targets are available. Once the file is uploaded, a pop-up confirmation will show up.</p> <p></p> <p>Wait for the Lua script screen to close the \"WiFi Running\" screen and your module should be updated now.</p> <p>Verify the version and hash in the main screen of ExpressLRS Lua script (you will first need to close it and relaunch the script).</p> <p>Join Local Network</p> <p>You can configure Home Network SSID and Password if you chose not to use ExpressLRS Configurator to set them. Once these are set, you can use the next two methods below.</p> <p></p>","title":"Method 1"},{"location":"quick-start/transmitters/aion-internal/#method-2","text":"<p>With the correct target selected and Firmware Options set, Build your firmware using the ExpressLRS Configurator.</p> <p></p> <p>Once it's done, it should open the Target folder for you where the <code>Jumper_AION_T-Pro_2400_TX-&lt;version&gt;.bin</code> file is. Do not close this window so you can easily locate the correct file to upload to the module.</p> <p>Using the ExpressLRS Lua Script (right-click, save as), select <code>Wifi Connectivity</code> then choose <code>Enable WiFi</code> and if you have flashed your Tx Module with your Home WiFi Network details or have set it in Join Network section of the Update Page, it will connect to the local network automatically.</p> <p>Using your browser, navigate to http://elrs_tx.local and the WiFi Update page should show up. Scroll down towards the Firmware Update section, as shown below:</p> <p></p> <p>Drag-and-drop the <code>Jumper_AION_T-Pro_2400_TX-&lt;version&gt;.bin</code> file created by the ExpressLRS Configurator into the Choose File field, or manually navigate to the Folder by clicking the <code>Choose File</code> button. Once the correct file is selected, click the <code>Update</code>. Wait for the process to complete, and once the file is uploaded, a pop-up confirmation will show up.</p> <p></p> <p>Wait for the Lua script screen to close the \"WiFi Running\" screen and your module should be updated now.</p> <p>Verify the version and hash in the main screen of ExpressLRS Lua script (you will first need to close it and relaunch the script).</p>","title":"Method 2"},{"location":"quick-start/transmitters/aion-internal/#method-3","text":"<p>Using the ExpressLRS Lua Script (right-click, save as), select <code>Wifi Connectivity</code> then choose <code>Enable WiFi</code> and if you have flashed your Tx Module with your Home WiFi Network details or have set it in Join Network section of the Update Page, it will connect to the network automatically.</p> <p>Using the ExpressLRS Configurator, select the correct Target and set your Firmware Options. Click Build and Flash and wait for the compile process to complete. You should see a section as pictured below and the Success message marking the update process complete.</p> <p></p> <p></p> <p>Wait for the Lua script screen to close the \"WiFi Running\" screen and your module should be updated now.</p> <p>Verify the version and hash in the main screen of ExpressLRS Lua script (you will first need to close it and relaunch the script).</p>","title":"Method 3"},{"location":"quick-start/transmitters/aion-internal/#help-i-think-i-bricked-my-internal-module","text":"<p>Okay, breathe. The module is recoverable.</p> <p>You will need a couple of files:</p> <ol> <li>An EdgeTX binary that allows you to use the USB port on the radio to reflash the module. Download it from here (Right-click, Save-as) and save it into your Jumper T-Pro SD Card <code>/firmware</code> folder. NOTE if your radio is already updated to EdgeTX 2.7.0, this package is no longer needed.</li> <li>A zip file with all the recovery scripts and firmwares. Download it from here (Right-click, Save-as) and extract it into a folder in your harddrive. If you want your <code>Binding Phrase</code> and other Firmware Options set for you when you flash via this method, Build your <code>firmware.bin</code> file first via the ExpressLRS Configurator and replace the <code>firmware.bin</code> in this folder.</li> </ol>","title":"HELP! I think I bricked my internal module!"},{"location":"quick-start/transmitters/aion-internal/#procedure","text":"<p>With the EdgeTX binary in your <code>/firmware</code> SD Card folder, reboot the radio into DFU/Bootloader mode. You can get to this mode by holding the trim switches inwards and pressing the power button. Release the button and trim switches and you should be in DFU/Bootloader mode. Write the firmware into the radio and reboot to ensure it got written. One way to check is to plug-in a USB cable and a new menu item should be available to you: USB Serial (Debug/VCP). You will need this menu item in the next steps.</p> <p>Turn off the radio.</p> <p>The next steps will require you to take the radio apart. You will need a small Philips screwdriver for this. There are 10 small Philips screws that keep both halves of the radio together.</p> <p></p>  <p>Handle with Care</p> <p>There are a couple of wires connecting the module into the main board of the radio, along with battery leads. Do not yank out the back cover of the radio from its front half. You can leave the battery in its cradle as you will need to power up the radio in the next steps.</p>  <p>Leave all the wiring intact, you will need a still-functional radio for the next steps!</p> <p>Power up the radio and make sure internal ExpressLRS module is the active one. Plug in a usb cable and select <code>USB Serial (Debug)</code> or <code>USB Serial (VCP)</code> as shown in the photo below. Windows users should check Device Manager and make sure your device is being detected as STMicroelectronics Virtual COM Port device. If not and you're seeing a bunch of Yellow Warning icons for the RadioMaster Serial Port, install the drivers from here. Windows 10 users can use the <code>W7_x64</code> executable.</p> <p></p> <p>Open up the folder where you extracted the Recovery scripts.</p> <p>Locate the Boot button in the Internal ExpressLRS module and Press and Hold it while you double-click the <code>recover.bat</code> script. Release the button when you see the <code>Features:</code> line appears.</p> <p></p> <p></p> <p>Wait for the process to finish. A <code>Hard resetting via RTS pin...</code> will show up once done and the script should terminate on its own.</p> <p>Unplug the USB cable from the T-Pro and check with the Lua Script whether you have your Internal module back.</p> <p>If you chose to use the <code>firmware.bin</code> file in the original Recovery zip file, it doesn't have your <code>Binding Phrase</code> and other Firmware Options. You will need to reflash the module via WiFi using the steps above.</p> <p>Do not forget to reassemble the T-Pro. Let's hope you didn't lose a screw!</p>","title":"Procedure"},{"location":"quick-start/transmitters/aion-internal/#recovery-method-via-etx-passthrough","text":"<p>Note</p> <p>This could soon supersede the steps above. This method could also change slightly in the near future.</p>  <p>You'll need the following:</p> <ol> <li>A piece of wire about 4\" (10cm) in length.</li> <li>An EdgeTX Build that gives the <code>USB Serial(Debug)</code> or <code>USB Serial (VCP)</code> option when a USB Data cable is connected. You can download it here (Right-click, Save-as). NOTE if your radio is already updated to EdgeTX 2.7.0, this package is no longer needed.</li> </ol>","title":"Recovery Method via ETX Passthrough"},{"location":"quick-start/transmitters/aion-internal/#procedure_1","text":"<p>With the EdgeTX binary in your <code>/firmware</code> SD Card folder, reboot the radio into DFU/Bootloader mode. You can get to this mode by holding the trim switches inwards and pressing the power button. Release the button and trim switches and you should be in DFU/Bootloader mode. Write the firmware into the radio and reboot to ensure it got written. One way to check is to plug-in a USB cable and a new menu item should be available to you: USB Serial (Debug/VCP). You will need this menu item in the next steps.</p> <p>Turn off the radio.</p> <p>The next steps will require you to take the radio apart. You will need a small Philips screwdriver for this. There are 10 small Philips screws that keep both halves of the radio together.</p> <p></p>  <p>Handle with Care</p> <p>There are a couple of wires connecting the module into the main board of the radio, along with battery leads. Do not yank out the back cover of the radio from its front half. You don't need to disconnect the wires from the mainboard.</p>  <p>Once you have both halves of the radio apart, you will need to solder a piece of wire on the Boot pad into one of the momentary switches on the radio. Refer to the image below where to solder the ends of the wire.</p> <p></p> <p>Once the wire is properly soldered, reassemble the radio. Tighten up the 10 screws to secure both halves of the radio. </p>  <p>Note</p> <p>If you're planning to use the switch as an Aux channel, you might want to remove the wire afterwards. Leaving this wire connected means the Aux channel will output a constant \"High\" signal.</p>  <p>Replace the battery if you removed it and power up the radio and make sure internal ExpressLRS module is the active one. Plug in a usb cable and select <code>USB Serial (Debug)</code> or <code>USB Serial (VCP)</code> as shown in the photo below.</p> <p></p> <p>Windows users should check Device Manager and make sure your device is being detected as STMicroelectronics Virtual COM Port device. </p> <p></p> <p>If not and you're seeing a bunch of Yellow Warning icons for the Jumper T-Pro Serial Port, install the drivers from here. Windows 10 users can use the <code>VCP_V1.5.0_Setup_W7_x64_64bits</code> executable.</p> <p>On the ExpressLRS Configurator, select the correct Device Type and Device (<code>Jumper AION T-Pro 2400 TX</code>) and choose the <code>EdgeTXPassthrough</code> flashing method. Set your Firmware Options and click <code>Build and Flash</code>.</p> <p></p> <p>Wait for the Passthrough Init or Passthrough Done section of the log and Press the switch in the radio where you wired up the boot button and hold it until the script has connected. See the image below for the correct timing.</p> <p></p> <p>If you didn't get it right and it fails, don't worry. Just retry and it should go through.</p> <p></p> <p>Unplug the USB and check via the ExpressLRS lua script your module is flashed and working properly again.</p>","title":"Procedure"},{"location":"quick-start/transmitters/aion-internal/#recovery-method-via-ftdi-or-usb-to-serial-adapter","text":"<p>You need an FTDI dongle or a USB to Serial Adapter for this method. Make sure the Serial Adapter have its drivers installed and is being recognized by your Computer properly.</p> <p>You will also have to take apart the radio to get to the module connections and the boot button.</p>","title":"Recovery Method via FTDI or USB to Serial Adapter"},{"location":"quick-start/transmitters/aion-internal/#procedure_2","text":"<p>Make sure your radio is turned off, battery removed. You won't need to power up the radio with this method.</p> <p>Take off the back cover of the radio by loosening 10 small Philips screws. Don't lose one!</p> <p></p>  <p>Handle with Care</p> <p>There are a couple of wires connecting the module into the main board of the radio, along with battery leads. Do not yank out the back cover of the radio from its front half. You don't need to disconnect the wires from the mainboard, but if you do so, be very careful!</p>  <p>What you need is just the 4 wires connecting the ExpressLRS internal module to the Module daughterboard. The pin-out is as follows: White wire is the RX, Yellow wire is the TX, Red wire is the 5v pin, and the Black wire is the Gnd pin.</p> <p></p> <p>Connect these 4 wires into your FTDI dongle or a USB to Serial Adapter as follows: RX pin into the TX pin; TX pin into the RX pin; 5v to 5v and Gnd to Gnd.</p> <p></p> <p>Before you connect the FTDI dongle/Serial Adapter into the USB port of your Computer, hold down the Boot button. Keep the button pressed until you have connected the Serial Adapter into your USB port. </p> <p>On the ExpressLRS Configurator, select the <code>via UART</code> Flashing method. Set your Firmware Options and click Build and Flash then wait for the process to complete.</p> <p></p> <p>Incorrect or loose connections can cause this method to fail. If it does, disconnect the Serial Adapter from USB, ensure you have the right connection and repeat the process. Don't forget to press and hold the boot button prior to connecting the Serial Adapter into USB. </p> <p>Once complete and a <code>Success</code> banner appears, carefully unplug the Serial Adapter and disconnect the module pins. Reinsert the connector into the module port as shown below.</p> <p></p> <p>Reassemble the radio (but do not put in the screws yet) and verify you have a working module once again by running the Lua script.</p> <p>Once you've verified you have your Internal ExpressLRS module back, replace the screws and tighten things up. Chug one down and celebrate!</p>","title":"Procedure"},{"location":"quick-start/transmitters/axis-thor/","text":"<p></p>","title":"Axis Thor"},{"location":"quick-start/transmitters/axis-thor/#flashing-via-wifi","text":"<p>Target: <code>AXIS_THOR_2400_TX_via_WIFI</code></p> <p>Device Category: <code>AXIS 2.4 GHz</code></p> <p>Device: <code>AXIS THOR 2400TX</code></p> <p></p>  <p>Attention</p> <p>The methods below applies if you've already updated your Tx modules to 2.x. For modules still in firmwares pre 2.x, you should use 1.x WiFi flashing method to update to 2.x. Or update to 2.x via USB instead.</p>","title":"Flashing via Wifi"},{"location":"quick-start/transmitters/axis-thor/#method-1","text":"<p>With the correct target selected and Firmware Options set, Build your firmware using the ExpressLRS Configurator.</p> <p></p> <p>Once it's done, it should open the Target folder for you where the <code>AXIS_THOR_2400_TX-&lt;version&gt;.bin</code> file is. Do not close this window so you can easily locate the correct file to upload to the module.</p> <p>The next steps will require the ExpressRLS Lua Script (right-click, save as). Download the ExpressLRS lua script and save it to your Radio's <code>/Scripts/Tools</code> folder. Insert/attach your module into your module bay and make sure it's not loose and there's proper connection with the radio (see the Radio Preparation page). Execute the ExpressLRS lua script by pressing \"System Menu\" in your radio and then under Tools, select <code>ExpressLRS</code>.</p> <p> </p> <p>If the script is stuck at <code>Loading...</code>, then there's a chance your module is still in v1.x firmware, your External RF module is not set to CRSF or that your module is not well-connected to the module bay pins.</p> <p></p> <p>Select WiFi Connectivity from the Lua script and then select Enable WiFi. Press OK once more to activate the WiFi on the Tx Module. Connect to the Access Point the module will create called <code>ExpressLRS TX</code>, with the password being <code>expresslrs</code>.</p>  <p></p>  <p>Using your browser, navigate to the correct page (typically http://10.0.0.1/) and it should show an upload form (you will have to scroll down a bit). You can drag-and-drop the <code>AXIS_THOR_2400_TX-&lt;version&gt;.bin</code> file that the ExpressLRS Configurator created. You can also click the <code>Choose File</code> button and navigate to the folder where the firmware was created. Ensure that you have selected the correct firmware file and click <code>Update</code>.</p> <p>Once the file is uploaded, a pop-up confirmation will show up.</p> <p></p> <p>Wait for the Lua script screen to close the \"WiFi Running\" screen and your module should be updated now.</p> <p>Verify the version and hash in the main screen of ExpressLRS Lua script.</p> <p>Join Local Network</p> <p>You can configure Home Network SSID and Password if you chose not to use ExpressLRS Configurator to set them. Once these are set, you can use the next two methods below.</p> <p></p>","title":"Method 1"},{"location":"quick-start/transmitters/axis-thor/#method-2","text":"<p>With the correct target selected and Firmware Options set, Build your firmware using the ExpressLRS Configurator.</p> <p></p> <p>Once it's done, it should open the Target folder for you where the <code>AXIS_THOR_2400_TX-&lt;version&gt;</code> file is. Do not close this window so you can easily locate the correct file to upload to the module.</p> <p>Using the ExpressLRS Lua Script (right-click, save as), select <code>Wifi Connectivity</code> then choose <code>Enable WiFi</code> and if you have flashed your Tx Module with your Home WiFi Network details or have set it in Join Network section of the Update Page, it will connect to the local network automatically.</p> <p>Using your browser, navigate to http://elrs_tx.local and the WiFi Update page should show up. Scroll down towards the Firmware Update section, as shown below:</p> <p></p> <p>Drag-and-drop the <code>AXIS_THOR_2400_TX-&lt;version&gt;.bin</code>  file created by the ExpressLRS Configurator into the Choose File field, or manually navigate to the Folder by clicking the <code>Choose File</code> button. Once the correct file is selected, click the <code>Update</code>. Wait for the process to complete, and the module will reboot (~1min).</p> <p>Verify the version and hash in the main screen of ExpressLRS Lua script.</p>","title":"Method 2"},{"location":"quick-start/transmitters/axis-thor/#method-3","text":"<p>Using the ExpressLRS Lua Script (right-click, save as), select <code>Wifi Connectivity</code> then choose <code>Enable WiFi</code> and if you have flashed your Tx Module with your Home WiFi Network details or have set it in Join Network section of the Update Page, it will connect to the network automatically.</p> <p>Using the ExpressLRS Configurator, select the correct Target and set your Firmware Options. Click Build and Flash and wait for the compile process to complete. You should see a section as pictured below and the Success message marking the update process complete.</p> <p></p> <p></p> <p>Verify the version and hash in the main screen of ExpressLRS Lua script.</p>","title":"Method 3"},{"location":"quick-start/transmitters/axis-thor/#flashing-via-usbuart","text":"<p>Target: <code>AXIS_THOR_2400_TX_via_UART</code></p> <p>Device Category: <code>AXIS 2.4 GHz</code></p> <p>Device: <code>AXIS THOR 2400TX</code></p> <p></p> <p>Attach a USB Data Cable to your module and Computer. Windows users might have to install CP210x Drivers to ensure the device is properly detected and initialized. </p> <p></p>  <p>Note</p> <p>To flash the TX itself, the switch on the back side of the module must be set to the leftmost position. To flash the TX backpack, the switch must be set to the rightmost position. For normal operation the switch must be centered. </p>  <p>Using the ExpressLRS Configurator with the correct Target selected and Firmware Options set, hit Build &amp; Flash. Wait for the process to finish, and you should be greeted with the \"Success\" message.</p> <p></p> <p>Verify the version and hash in the main screen of ExpressLRS Lua script.</p>","title":"Flashing via USB/UART"},{"location":"quick-start/transmitters/axis-thor/#using-the-module-on-a-dx9","text":"<ul> <li>Install the latest DX9 firmware with CRSF v2 support via Serial port.</li> <li>Wire up Power (Vbat &amp; GND) as per Crossfire install instructions.</li> <li>Use Signal from DX9 to S.Port pin of the Thor TX module.</li> <li>Optional: Connect an external power source via XT30.</li> <li>Flash the TX module with <code>UART_INVERTED</code> unchecked.</li> <li>Adjust your Packet Rate to 250Hz using the Screen &amp; Joystick.</li> </ul> <p>This guide is contributed by discord user ChaserP.</p>","title":"Using the module on a DX9"},{"location":"quick-start/transmitters/betafpv2400/","text":"<p></p>","title":"BetaFPV 2.4GHz"},{"location":"quick-start/transmitters/betafpv2400/#flashing-via-wifi","text":"<p>Targets:</p> <ul> <li><code>BETAFPV_2400_TX_via_WIFI</code></li> <li><code>BETAFPV_2400_TX_MICRO_via_WIFI</code></li> <li><code>BETAFPV_2400_TX_MICRO_1000mW_via_WIFI</code></li> </ul> <p>Device Category: <code>BETAFPV 2.4 GHz</code></p> <p>Device:</p> <ul> <li><code>BETAFPV 2400 TX Nano</code></li> <li><code>BETAFPV 2400 TX Micro</code></li> <li><code>BETAFPV 2400 TX Micro 1000mW</code></li> </ul> <p></p>  <p>Attention</p> <p>The methods below applies if you've already updated your Tx modules to 2.x. For modules still in firmwares pre 2.x, you should use 1.x WiFi flashing method to update to 2.x. Or update to 2.x via USB instead.</p>","title":"Flashing via Wifi"},{"location":"quick-start/transmitters/betafpv2400/#method-1","text":"<p>With the correct target selected and Firmware Options set, Build your firmware using the ExpressLRS Configurator.</p> <p></p> <p>Once it's done, it should open the Target folder for you where the <code>BETAFPV_2400_TX-&lt;version&gt;.bin</code> or <code>BETAFPV_2400_TX_MICRO-&lt;version&gt;.bin</code> file is. Do not close this window so you can easily locate the correct file to upload to the module.</p> <p>The next steps will require the ExpressLRS Lua Script (right-click, save as). Download the ExpressLRS lua script and save it to your Radio's <code>/Scripts/Tools</code> folder. Insert/attach your module into your module bay and make sure it's not loose and there's proper connection with the radio (see the Radio Preparation page). Execute the ExpressLRS lua script by pressing \"System Menu\" in your radio and then under Tools, select <code>ExpressLRS</code>.</p> <p> </p> <p>If the script is stuck at <code>Loading...</code>, then there's a chance your module is still in v1.x firmware, your External RF module is not set to CRSF or that your module is not well-connected to the module bay pins.</p> <p></p> <p>Select WiFi Connectivity from the Lua script and then select Enable WiFi. Press OK once more to activate the WiFi on the Tx Module. Connect to the Access Point the module will create called <code>ExpressLRS TX</code>, with the password being <code>expresslrs</code>.</p>  <p></p>  <p>Using your browser, navigate to the correct page (typically http://10.0.0.1/) and it should show an upload form (you will have to scroll down a bit). You can drag-and-drop the <code>BETAFPV_2400_TX-&lt;version&gt;.bin</code> or <code>BETAFPV_2400_TX_MICRO-&lt;version&gt;.bin</code> file that the ExpressLRS Configurator created. You can also click the <code>Choose File</code> button and navigate to the folder where the firmware was created. Ensure that you have selected the correct firmware file and click <code>Update</code>.</p> <p>Once the file is uploaded, a pop-up confirmation will show up. Wait for the Lua script screen to close the \"WiFi Running\" screen and your module should be updated now.</p> <p>Verify the version and hash in the main screen of ExpressLRS Lua script.</p> <p>Update for version 2.0</p> <p>Once you have updated to firmware version 2.0 or newer, the Web Update page on the Hotspot will get a few updates of its own. It will get the Update progress bar, and a Popup will be shown for Success or Error messages. Additionally, you can configure Home Network SSID and Password if you chose not to use ExpressLRS Configurator to set them. Once these are set, you can use the two methods below.</p> <p></p>","title":"Method 1"},{"location":"quick-start/transmitters/betafpv2400/#method-2","text":"<p>With the correct target selected and Firmware Options set, Build your firmware using the ExpressLRS Configurator.</p> <p></p> <p>Once it's done, it should open the Target folder for you where the <code>BETAFPV_2400_TX-&lt;version&gt;</code> or <code>BETAFPV_2400_TX_MICRO-&lt;version&gt;.bin</code> file is. Do not close this window so you can easily locate the correct file to upload to the module.</p> <p>Using the ExpressLRS Lua Script (right-click, save as), select <code>Wifi Connectivity</code> then choose <code>Enable WiFi</code> and if you have flashed your Tx Module with your Home WiFi Network details or have set it in Join Network section of the Update Page, it will connect to the local network automatically.</p> <p>Using your browser, navigate to http://elrs_tx.local and the WiFi Update page should show up. Scroll down towards the Firmware Update section, as shown below:</p> <p></p> <p>Drag-and-drop the <code>BETAFPV_2400_TX-&lt;version&gt;.bin</code> or <code>BETAFPV_2400_TX_MICRO-&lt;version&gt;.bin</code> file created by the ExpressLRS Configurator into the Choose File field, or manually navigate to the Folder by clicking the <code>Choose File</code> button. Once the correct file is selected, click the <code>Update</code>. Wait for the process to complete, and the module will reboot (~1min).</p> <p>Verify the version and hash in the main screen of ExpressLRS Lua script.</p>","title":"Method 2"},{"location":"quick-start/transmitters/betafpv2400/#method-3","text":"<p>Using the ExpressLRS Lua Script (right-click, save as), select <code>Wifi Connectivity</code> then choose <code>Enable WiFi</code> and if you have flashed your Tx Module with your Home WiFi Network details or have set it in Join Network section of the Update Page, it will connect to the network automatically.</p> <p>Using the ExpressLRS Configurator, select the correct Target and set your Firmware Options. Click Build and Flash and wait for the compile process to complete. You should see a section as pictured below and the Success message marking the update process complete.</p> <p></p> <p></p> <p>Verify the version and hash in the main screen of ExpressLRS Lua script.</p>","title":"Method 3"},{"location":"quick-start/transmitters/betafpv2400/#flashing-via-usbuart","text":"<p>Targets: </p> <ul> <li><code>BETAFPV_2400_TX_via_UART</code></li> <li><code>BETAFPV_2400_TX_MICRO_via_UART</code></li> <li><code>BETAFPV_2400_TX_MICRO_1000mW_via_WIFI</code></li> </ul> <p>Device Category: <code>BETAFPV 2.4 GHz</code></p> <p>Device:</p> <ul> <li><code>BETAFPV 2400 TX Nano</code></li> <li><code>BETAFPV 2400 TX Micro</code></li> <li><code>BETAFPV 2400 TX Micro 1000mW</code></li> </ul> <p></p>  <p>Note</p> <p>The BetaFPV Micro 1W module (and the updated BetaFPV Micro 500mW) have dipswitches at the back of the module. You need to set switches 1 &amp; 2 to ON, and the rest to OFF, for the flashing via USB to go through.</p>  <p>Attach a USB Data Cable to your module and Computer. Windows users might have to install CP210x Drivers to ensure the device is properly detected and initialized.</p> <p></p> <p>Using the ExpressLRS Configurator with the correct Target selected and Firmware Options set, hit Build &amp; Flash. Wait for the process to finish, and you should be greeted with the \"Success\" message.</p> <p></p> <p>Verify the version and hash in the main screen of ExpressLRS Lua script.</p>","title":"Flashing via USB/UART"},{"location":"quick-start/transmitters/betafpv2400/#cant-flash","text":"<p>If you've followed any of the steps above and still can't get your devices flashed and updated, see this video for the explanation why and the fix to get your devices flashed and updated (applies to the Nano modules only).</p>","title":"Can't flash?"},{"location":"quick-start/transmitters/betafpv900/","text":"<p></p>","title":"BetaFPV 900MHz"},{"location":"quick-start/transmitters/betafpv900/#flashing-via-wifi","text":"<p>Targets:</p> <ul> <li><code>BETAFPV_900_TX_via_WIFI</code></li> <li><code>BETAFPV_900_TX_MICRO_via_WIFI</code></li> </ul> <p>Device Category: <code>BETAFPV 900 MHz</code></p> <p>Device:</p> <ul> <li><code>BETAFPV 900 TX</code> (Nano)</li> <li><code>BETAFPV 900 TX Micro</code></li> </ul> <p></p>  <p>Attention</p> <p>The methods below applies if you've already updated your Tx modules to 2.x. For modules still in firmwares pre 2.x, you should use 1.x WiFi flashing method to update to 2.x. Or update to 2.x via USB instead.</p>","title":"Flashing via Wifi"},{"location":"quick-start/transmitters/betafpv900/#method-1","text":"<p>With the correct target selected and Firmware Options set, Build your firmware using the ExpressLRS Configurator.</p> <p></p> <p>Once it's done, it should open the Target folder for you where the <code>BETAFPV_900_TX-&lt;version&gt;.bin</code> or <code>BETAFPV_900_TX_MICRO-&lt;version&gt;.bin</code> file is. Do not close this window so you can easily locate the correct file to upload to the module.</p> <p>The next steps will require the ExpressLRS Lua Script (right-click, save as). Download the ExpressLRS lua script and save it to your Radio's <code>/Scripts/Tools</code> folder. Insert/attach your module into your module bay and make sure it's not loose and there's proper connection with the radio (see the Radio Preparation page). Execute the ExpressLRS lua script by pressing \"System Menu\" in your radio and then under Tools, select <code>ExpressLRS</code>.</p> <p> </p> <p>If the script is stuck at <code>Loading...</code>, then there's a chance your module is still in v1.x firmware, your External RF module is not set to CRSF or that your module is not well-connected to the module bay pins.</p> <p></p> <p>Select WiFi Connectivity from the Lua script and then select Enable WiFi. Press OK once more to activate the WiFi on the Tx Module. Connect to the Access Point the module will create called <code>ExpressLRS TX</code>, with the password being <code>expresslrs</code>.</p>  <p></p>  <p>Using your browser, navigate to the correct page (typically http://10.0.0.1/) and it should show an upload form (you will have to scroll down a bit). You can drag-and-drop the <code>BETAFPV_900_TX-&lt;version&gt;.bin</code> or <code>BETAFPV_900_TX_MICRO-&lt;version&gt;.bin</code> file that the ExpressLRS Configurator created. You can also click the <code>Choose File</code> button and navigate to the folder where the firmware was created. Ensure that you have selected the correct firmware file and click <code>Update</code>.</p> <p>Once the file is uploaded, a pop-up confirmation will show up. Wait for the Lua script screen to close the \"WiFi Running\" screen and your module should be updated now.</p> <p>Verify the version and hash in the main screen of ExpressLRS Lua script.</p> <p>Update for version 2.0</p> <p>Once you have updated to firmware version 2.0 or newer, the Web Update page on the Hotspot will get a few updates of its own. It will get the Update progress bar, and a Popup will be shown for Success or Error messages. Additionally, you can configure Home Network SSID and Password if you chose not to use ExpressLRS Configurator to set them. Once these are set, you can use the two methods below.</p> <p></p>","title":"Method 1"},{"location":"quick-start/transmitters/betafpv900/#method-2","text":"<p>With the correct target selected and Firmware Options set, Build your firmware using the ExpressLRS Configurator.</p> <p></p> <p>Once it's done, it should open the Target folder for you where the <code>BETAFPV_900_TX-&lt;version&gt;.bin</code> or <code>BETAFPV_900_TX_MICRO-&lt;version&gt;.bin</code> file is. Do not close this window so you can easily locate the correct file to upload to the module.</p> <p>Using the ExpressLRS Lua Script (right-click, save as), select <code>Wifi Connectivity</code> then choose <code>Enable WiFi</code> and if you have flashed your Tx Module with your Home WiFi Network details or have set it in Join Network section of the Update Page, it will connect to the local network automatically.</p> <p>Using your browser, navigate to http://elrs_tx.local and the WiFi Update page should show up. Scroll down towards the Firmware Update section, as shown below:</p> <p></p> <p>Drag-and-drop the <code>BETAFPV_900_TX-&lt;version&gt;.bin</code> or <code>BETAFPV_900_TX_MICRO-&lt;version&gt;.bin</code> file created by the ExpressLRS Configurator into the Choose File field, or manually navigate to the Folder by clicking the <code>Choose File</code> button. Once the correct file is selected, click the <code>Update</code>. Wait for the process to complete, and the module will reboot (~1min).</p> <p>Verify the version and hash in the main screen of ExpressLRS Lua script.</p>","title":"Method 2"},{"location":"quick-start/transmitters/betafpv900/#method-3","text":"<p>Using the ExpressLRS Lua Script (right-click, save as), select <code>Wifi Connectivity</code> then choose <code>Enable WiFi</code> and if you have flashed your Tx Module with your Home WiFi Network details or have set it in Join Network section of the Update Page, it will connect to the network automatically.</p> <p>Using the ExpressLRS Configurator, select the correct Target and set your Firmware Options. Click Build and Flash and wait for the compile process to complete. You should see a section as pictured below and the Success message marking the update process complete.</p> <p></p> <p></p> <p>Verify the version and hash in the main screen of ExpressLRS Lua script.</p>","title":"Method 3"},{"location":"quick-start/transmitters/betafpv900/#flashing-via-usbuart","text":"<p>Targets:</p> <ul> <li><code>BETAFPV_900_TX_via_UART</code></li> <li><code>BETAFPV_900_TX_MICRO_via_UART</code></li> </ul> <p>Device Category: <code>BETAFPV 900 MHz</code></p> <p>Device:</p> <ul> <li><code>BETAFPV 900 TX</code> (Nano)</li> <li><code>BETAFPV 900 TX Micro</code></li> </ul> <p></p> <p>Attach a USB Data Cable to your module and Computer. Windows users might have to install CP210x Drivers to ensure the device is properly detected and initialized.</p> <p></p> <p>Using the ExpressLRS Configurator with the correct Target selected and Firmware Options set, hit Build &amp; Flash. Wait for the process to finish, and you should be greeted with the \"Success\" message.</p> <p></p> <p>Verify the version and hash in the main screen of ExpressLRS Lua script.</p>","title":"Flashing via USB/UART"},{"location":"quick-start/transmitters/betafpv900/#cant-flash","text":"<p>If you've followed any of the steps above and still can't get your devices flashed and updated, see this video for the explanation why and the fix to get your devices flashed and updated (applies to the Nano modules only).</p>","title":"Can't flash?"},{"location":"quick-start/transmitters/betfpvlr3pro/","text":"<p></p>","title":"BetaFPV LR3 Pro"},{"location":"quick-start/transmitters/betfpvlr3pro/#flashing-via-edgetx-passthrough","text":"<p>Target: <code>BETAFPV_2400_TX_LITERADIO3_via_ETX</code></p> <p>Device Category: <code>BETAFPV 2.4 GHz</code></p> <p>Device: <code>BETAFPV LiteRadio 3 Pro</code></p> <p>With your handset turned on, connect a USB data cable on the USB port of the Radio. Select <code>USB Serial(VCP)</code> in the option window that pops up. </p>  <p></p>   <p></p>  <p>Windows users should check Device Manager and make sure your device is being detected as STMicroelectronics Virtual COM Port device. </p> <p></p> <p>If not and you're seeing a bunch of Yellow Warning icons, install the drivers from here. Windows 10 users can use the <code>VCP_V1.5.0_Setup_W7_x64_64bits</code> executable.</p> <p>Using the ExpressLRS Configurator, select the appropriate version and the correct Device Target and set the Flashing method to <code>EdgeTXPassthrough</code>.</p> <p></p> <p>Select the <code>Regulatory Domain</code> appropriate for your location.</p> <p>Set your Binding Phrase (optional) and other relevant Firmware Options like Local WiFi Network SSID and password.</p> <p>Once that's done, click Build and Flash and wait for the Success banner from the Configurator.</p> <p></p> <p>Unplug the USB and verify with the ExpressLRS Lua Script (right-click, save as) you have a working internal module and that you have updated to the version you have selected.</p>  <p></p>","title":"Flashing via EdgeTX Passthrough"},{"location":"quick-start/transmitters/betfpvlr3pro/#flashing-via-wifi","text":"<p>Target: <code>BETAFPV_2400_TX_LITERADIO3_via_WIFI</code></p> <p>Device Category: <code>BETAFPV 2.4 GHz</code></p> <p>Device: <code>BETAFPV LiteRadio 3 Pro</code></p> <p></p>","title":"Flashing via Wifi"},{"location":"quick-start/transmitters/betfpvlr3pro/#method-1","text":"<p>With the correct target selected and Firmware Options set, Build your firmware using the ExpressLRS Configurator.</p> <p></p> <p>Once it's done, it should open the Target folder for you where the <code>BETAFPV_2400_TX_LITERADIO3-&lt;version&gt;.bin</code> file is. Do not close this window so you can easily locate the correct file to upload to the module.</p> <p>Execute the ExpressLRS lua script by pressing \"System Menu\" in your radio and then under Tools, select <code>ExpressLRS</code>. If the ExpressLRS Lua Script is not in the list, download it from here (right-click, save as) and save it to your Radio's <code>/Scripts/Tools</code> folder.</p> <p></p> <p>Select WiFi Connectivity from the Lua script and then select Enable WiFi. Press OK once more to activate the WiFi on the Tx Module. Connect to the Access Point the module will create called <code>ExpressLRS TX</code>, with the password being <code>expresslrs</code>.</p> <p></p>  <p></p>  <p>Using your browser, navigate to the correct page (typically http://10.0.0.1/) and it should show an upload form (you will have to scroll down a bit). You can drag-and-drop the <code>BETAFPV_2400_TX_LITERADIO3-&lt;version&gt;.bin</code> file that the ExpressLRS Configurator created. You can also click the <code>Choose File</code> button and navigate to the folder where the firmware was created. Ensure that you have selected the correct firmware file and click <code>Update</code>.</p> <p></p> <p>Once the file is uploaded, a pop-up confirmation will show up.</p> <p></p> <p>Wait for the Lua script screen to close the \"WiFi Running\" screen and your module should be updated now.</p> <p>Verify the version and hash in the main screen of ExpressLRS Lua script (you will first need to close it and relaunch the script).</p> <p>Join Local Network</p> <p>You can configure Home Network SSID and Password if you chose not to use ExpressLRS Configurator to set them. Once these are set, you can use the next two methods below.</p> <p></p>","title":"Method 1"},{"location":"quick-start/transmitters/betfpvlr3pro/#method-2","text":"<p>With the correct target selected and Firmware Options set, Build your firmware using the ExpressLRS Configurator.</p> <p></p> <p>Once it's done, it should open the Target folder for you where the <code>BETAFPV_2400_TX_LITERADIO3-&lt;version&gt;.bin</code> file is. Do not close this window so you can easily locate the correct file to upload to the module.</p> <p>Using the ExpressLRS Lua Script (right-click, save as), select <code>Wifi Connectivity</code> then choose <code>Enable WiFi</code> and if you have flashed your Tx Module with your Home WiFi Network details or have set it in Join Network section of the Update Page, it will connect to the local network automatically.</p> <p></p> <p>Using your browser, navigate to http://elrs_tx.local and the WiFi Update page should show up. Scroll down towards the Firmware Update section, as shown below:</p> <p></p> <p>Drag-and-drop the <code>BETAFPV_2400_TX_LITERADIO3-&lt;version&gt;.bin</code> file created by the ExpressLRS Configurator into the Choose File field, or manually navigate to the Folder by clicking the <code>Choose File</code> button. Once the correct file is selected, click the <code>Update</code>. Wait for the process to complete, and once the file is uploaded, a pop-up confirmation will show up.</p> <p></p> <p>Wait for the Lua script screen to close the \"WiFi Running\" screen and your module should be updated now.</p> <p>Verify the version and hash in the main screen of ExpressLRS Lua script (you will first need to close it and relaunch the script).</p>","title":"Method 2"},{"location":"quick-start/transmitters/betfpvlr3pro/#method-3","text":"<p>Using the ExpressLRS Lua Script (right-click, save as), select <code>Wifi Connectivity</code> then choose <code>Enable WiFi</code> and if you have flashed your Tx Module with your Home WiFi Network details or have set it in Join Network section of the Update Page, it will connect to the network automatically.</p> <p></p> <p>Using the ExpressLRS Configurator, select the correct Target and set your Firmware Options. Click Build and Flash and wait for the compile process to complete. </p> <p></p> <p>You should see a section as pictured below and the Success message marking the update process complete.</p> <p></p> <p>Wait for the Lua script screen to close the \"WiFi Running\" screen and your module should be updated now.</p> <p>Verify the version and hash in the main screen of ExpressLRS Lua script (you will first need to close it and relaunch the script).</p>","title":"Method 3"},{"location":"quick-start/transmitters/diy2400/","text":"<p></p> <p>Valid Targets:</p> <ul> <li><code>DIY_2400_TX_ESP32_SX1280_E28_via_UART</code></li> <li><code>DIY_2400_TX_ESP32_SX1280_LORA1280F27_via_UART</code></li> <li><code>DIY_2400_TX_ESP32_SX1280_Mini_via_UART</code></li> </ul> <p>Plug the ESP32 of the DIY TX into the USB of your computer. Then select the correct target given the RF chip you chose and press Build &amp; Flash. Further updates can be performed by building and flashing the <code>.bin</code> file to the external module using OpenTX.</p>","title":"DIY 2400TX"},{"location":"quick-start/transmitters/diy900/","text":"<p></p>","title":"DIY 900TX"},{"location":"quick-start/transmitters/diy900/#esp32-targets","text":"<p>Valid Targets:</p> <ul> <li><code>DIY_900_TX_ESP32_SX127x_E19_via_UART</code></li> <li><code>DIY_900_TX_ESP32_SX127x_RFM95_via_UART</code></li> </ul> <p>Plug the ESP32 of the DIY TX into the USB of your computer. Then select the correct target given the RF chip you chose and press Build &amp; Flash. Further updates can be performed by building and flashing the <code>.bin</code> file to the external module using OpenTX.</p>","title":"ESP32 Targets"},{"location":"quick-start/transmitters/diy900/#ttgo-targets","text":"<p>Valid Targets:</p> <ul> <li><code>DIY_900_TX_TTGO_V1_SX127x_via_UART</code></li> <li><code>DIY_900_TX_TTGO_V2_SX127x_via_UART</code></li> </ul> <p>Plug the TTGo into the USB of your computer. Then select the correct target given the version you have and press Build &amp; Flash. Further updates can be performed by building and flashing the <code>.bin</code> file to the external module using OpenTX.</p>","title":"TTGo Targets"},{"location":"quick-start/transmitters/es24tx/","text":"<p></p>  <p>Note</p> <p>This guide applies to all of the following HappyModel TX modules: ES24TX, ES24TX Lite, ES24TX Iron Man, ES24TX Slim Pro and ES24TX Pro Micro. Any module with \"Pro\" in the name uses the <code>_Pro_Series</code> target. Some Pro Series targets may come unflashed, which requires USB Flashing.</p>","title":"Happymodel ES24TX"},{"location":"quick-start/transmitters/es24tx/#flashing-via-wifi","text":"<p>Targets:</p> <ul> <li><code>HappyModel_ES24TX_2400_TX_via_WIFI</code></li> <li><code>HM_ES24TX_Pro_Series_2400_TX_via_WIFI</code></li> </ul> <p>Device Category: <code>Happymodel 2.4 GHz</code></p> <p>Device:</p> <ul> <li><code>HappyModel ES24TX 2400 TX</code> for ES24TX (non-Pro), ES24TX Lite, ES24TX Slim</li> <li><code>HM ES24TX Pro Series 2400 TX</code> for ES24TX Pro &amp; Slim Pro</li> </ul> <p></p>  <p>Attention</p> <p>The methods below applies if you've already updated your Tx modules to 2.x. For modules still in firmwares pre 2.x, you should use 1.x WiFi flashing method to update to 2.x. Or update to 2.x via USB instead.</p>","title":"Flashing via Wifi"},{"location":"quick-start/transmitters/es24tx/#method-1","text":"<p>With the correct target selected and Firmware Options set, Build your firmware using the ExpressLRS Configurator.</p> <p></p> <p>Once it's done, it should open the Target folder for you where the <code>HappyModel_ES24TX_2400_TX-&lt;version&gt;.bin</code> or <code>HM_ES24TX_Pro_Series_2400_TX-&lt;version&gt;.bin</code> file is. Do not close this window so you can easily locate the correct file to upload to the module.</p> <p>The next steps will require the ExpressLRS Lua Script (right-click, save as). Download the ExpressLRS lua script and save it to your Radio's <code>/Scripts/Tools</code> folder. Insert/attach your module into your module bay and make sure it's not loose and there's proper connection with the radio (see the Radio Preparation page). Execute the ExpressLRS lua script by pressing \"System Menu\" in your radio and then under Tools, select <code>ExpressLRS</code>.</p> <p> </p> <p>If the script is stuck at <code>Loading...</code>, then there's a chance your module is still in v1.x firmware, your External RF module is not set to CRSF or that your module is not well-connected to the module bay pins.</p> <p></p> <p>Select WiFi Connectivity from the Lua script and then select Enable WiFi. Press OK once more to activate the WiFi on the Tx Module. Connect to the Access Point the module will create called <code>ExpressLRS TX</code>, with the password being <code>expresslrs</code>.</p>  <p></p>  <p>Using your browser, navigate to the correct page (typically http://10.0.0.1/) and it should show an upload form (you will have to scroll down a bit). You can drag-and-drop the <code>HappyModel_ES24TX_2400_TX-&lt;version&gt;.bin</code> or <code>HM_ES24TX_Pro_Series_2400_TX-&lt;version&gt;.bin</code> file that the ExpressLRS Configurator created. You can also click the <code>Choose File</code> button and navigate to the folder where the firmware was created. Ensure that you have selected the correct firmware file and click <code>Update</code>.</p> <p>Once the file is uploaded, a pop-up confirmation will show up. Wait for the Lua script screen to close the \"WiFi Running\" screen and your module should be updated now.</p> <p>Verify the version and hash in the main screen of ExpressLRS Lua script.</p> <p>Update for version 2.0</p> <p>Once you have updated to firmware version 2.0 or newer, the Web Update page on the Hotspot will get a few updates of its own. It will get the Update progress bar, and a Popup will be shown for Success or Error messages. Additionally, you can configure Home Network SSID and Password if you chose not to use ExpressLRS Configurator to set them. Once these are set, you can use the two methods below.</p> <p></p>","title":"Method 1"},{"location":"quick-start/transmitters/es24tx/#method-2","text":"<p>With the correct target selected and Firmware Options set, Build your firmware using the ExpressLRS Configurator.</p> <p></p> <p>Once it's done, it should open the Target folder for you where the <code>HappyModel_ES24TX_2400_TX-&lt;version&gt;.bin</code> or <code>HM_ES24TX_Pro_Series_2400_TX-&lt;version&gt;.bin</code> file is. Do not close this window so you can easily locate the correct file to upload to the module.</p> <p>Using the ExpressLRS Lua Script (right-click, save as), select <code>Wifi Connectivity</code> then choose <code>Enable WiFi</code> and if you have flashed your Tx Module with your Home WiFi Network details or have set it in Join Network section of the Update Page, it will connect to the local network automatically.</p> <p>Using your browser, navigate to http://elrs_tx.local and the WiFi Update page should show up. Scroll down towards the Firmware Update section, as shown below:</p> <p></p> <p>Drag-and-drop the <code>HappyModel_ES24TX_2400_TX-&lt;version&gt;.bin</code> or <code>HM_ES24TX_Pro_Series_2400_TX-&lt;version&gt;.bin</code> file created by the ExpressLRS Configurator into the Choose File field, or manually navigate to the Folder by clicking the <code>Choose File</code> button. Once the correct file is selected, click the <code>Update</code>. Wait for the process to complete, and the module will reboot (~1min).</p> <p>Verify the version and hash in the main screen of ExpressLRS Lua script.</p>","title":"Method 2"},{"location":"quick-start/transmitters/es24tx/#method-3","text":"<p>Using the ExpressLRS Lua Script (right-click, save as), select <code>Wifi Connectivity</code> then choose <code>Enable WiFi</code> and if you have flashed your Tx Module with your Home WiFi Network details or have set it in Join Network section of the Update Page, it will connect to the network automatically.</p> <p>Using the ExpressLRS Configurator, select the correct Target and set your Firmware Options. Click Build and Flash and wait for the compile process to complete. You should see a section as pictured below and the Success message marking the update process complete.</p> <p></p> <p></p> <p>Verify the version and hash in the main screen of ExpressLRS Lua script.</p>","title":"Method 3"},{"location":"quick-start/transmitters/es24tx/#flashing-via-usbuart","text":"<p>Targets:</p> <ul> <li><code>HappyModel_ES24TX_2400_TX_via_UART</code></li> <li><code>HM_ES24TX_Pro_Series_2400_TX_via_UART</code></li> </ul> <p>Device Category: <code>Happymodel 2.4 GHz</code></p> <p>Device:</p> <ul> <li><code>HappyModel ES24TX 2400 TX</code> for ES24TX (non-Pro), ES24TX Lite, ES24TX Slim</li> <li><code>HM ES24TX Pro Series 2400 TX</code> for ES24TX Pro &amp; Slim Pro</li> </ul> <p></p> <p>This method requires you move two jumpers or dipswitches into specific pins or positions in the module board. See the following images for the jumper or dipswitch location and which pin/switches should be toggled for this method to work.</p> <p>ES24TX Full Size, Non Pro</p> <p></p> <p>ES24TX Lite, for Jumper T-Lite</p> <p></p> <p>ES24TX Slim, Iron Man</p> <p></p> <p>ES24TX Slim Pro</p> <p></p> <p>ES24TX Pro 1W</p> <p></p> <p>Attach your USB cable into the module and your computer. CP210x Drivers will have to be installed for this to work properly (Windows). Make sure your computer recognizes the module as a CP210x USB-to-UART Bridge device (check Device Manager; or the Actions section of the ExpressLRS Configurator should show another Com Port with Silabs CP210x designation), otherwise, this method will not work.</p> <p></p> <p>Using the ExpressLRS Configurator with the correct Target selected and Firmware Options set, hit Build &amp; Flash. Wait for the process to finish, and you should be greeted with the \"Success\" message.</p> <p></p> <p>Assemble the module back together (ensure the module PCB is not loose from its mounting points) and attach it to your radio module bay and verify the version and hash in the main screen of ExpressLRS Lua script.</p>","title":"Flashing via USB/UART"},{"location":"quick-start/transmitters/es900tx/","text":"<p></p>","title":"Happymodel ES900TX"},{"location":"quick-start/transmitters/es900tx/#flashing-via-wifi","text":"<p>Target: <code>HappyModel_TX_ES900TX_via_WIFI</code></p> <p>Device Category: <code>Happymodel 900 MHz</code></p> <p>Device: <code>HappyModel TX ES900TX</code></p> <p></p>  <p>Attention</p> <p>The methods below applies if you've already updated your Tx modules to 2.x. For modules still in firmwares pre 2.x, you should use 1.x WiFi flashing method to update to 2.x. Or update to 2.x via USB instead.</p>","title":"Flashing via Wifi"},{"location":"quick-start/transmitters/es900tx/#method-1","text":"<p>With the correct target selected and Firmware Options set, Build your firmware using the ExpressLRS Configurator.</p> <p></p> <p>Once it's done, it should open the Target folder for you where the <code>HappyModel_TX_ES900TX-&lt;version&gt;.bin</code> file is. Do not close this window so you can easily locate the correct file to upload to the module.</p> <p>The next steps will require the ExpressLRS Lua Script (right-click, save as). Download the ExpressLRS lua script and save it to your Radio's <code>/Scripts/Tools</code> folder. Insert/attach your module into your module bay and make sure it's not loose and there's proper connection with the radio (see the Radio Preparation page). Execute the ExpressLRS lua script by pressing \"System Menu\" in your radio and then under Tools, select <code>ExpressLRS</code>.</p> <p> </p> <p>If the script is stuck at <code>Loading...</code>, then there's a chance your module is still in v1.x firmware, your External RF module is not set to CRSF or that your module is not well-connected to the module bay pins.</p> <p></p> <p>Select WiFi Connectivity from the Lua script and then select Enable WiFi. Press OK once more to activate the WiFi on the Tx Module. Connect to the Access Point the module will create called <code>ExpressLRS TX</code>, with the password being <code>expresslrs</code>.</p>  <p></p>  <p>Using your browser, navigate to the correct page (typically http://10.0.0.1/) and it should show an upload form (you will have to scroll down a bit). You can drag-and-drop the <code>HappyModel_TX_ES900TX-&lt;version&gt;.bin</code> file that the ExpressLRS Configurator created. You can also click the <code>Choose File</code> button and navigate to the folder where the firmware was created. Ensure that you have selected the correct firmware file and click <code>Update</code>.</p> <p>Once the file is uploaded, a pop-up confirmation will show up. Wait for the Lua script screen to close the \"WiFi Running\" screen and your module should be updated now.</p> <p>Verify the version and hash in the main screen of ExpressLRS Lua script.</p> <p>Update for version 2.0</p> <p>Once you have updated to firmware version 2.0 or newer, the Web Update page on the Hotspot will get a few updates of its own. It will get the Update progress bar, and a Popup will be shown for Success or Error messages. Additionally, you can configure Home Network SSID and Password if you chose not to use ExpressLRS Configurator to set them. Once these are set, you can use the two methods below.</p> <p></p>","title":"Method 1"},{"location":"quick-start/transmitters/es900tx/#method-2","text":"<p>With the correct target selected and Firmware Options set, Build your firmware using the ExpressLRS Configurator.</p> <p></p> <p>Once it's done, it should open the Target folder for you where the <code>HappyModel_TX_ES900TX-&lt;version&gt;.bin</code> file is. Do not close this window so you can easily locate the correct file to upload to the module.</p> <p>Using the ExpressLRS Lua Script (right-click, save as), select <code>Wifi Connectivity</code> then choose <code>Enable WiFi</code> and if you have flashed your Tx Module with your Home WiFi Network details or have set it in Join Network section of the Update Page, it will connect to the local network automatically.</p> <p>Using your browser, navigate to http://elrs_tx.local and the WiFi Update page should show up. Scroll down towards the Firmware Update section, as shown below:</p> <p></p> <p>Drag-and-drop the <code>HappyModel_TX_ES900TX-&lt;version&gt;.bin</code> file created by the ExpressLRS Configurator into the Choose File field, or manually navigate to the Folder by clicking the <code>Choose File</code> button. Once the correct file is selected, click the <code>Update</code>. Wait for the process to complete, and the module will reboot (~1min).</p> <p>Verify the version and hash in the main screen of ExpressLRS Lua script.</p>","title":"Method 2"},{"location":"quick-start/transmitters/es900tx/#method-3","text":"<p>Using the ExpressLRS Lua Script (right-click, save as), select <code>Wifi Connectivity</code> then choose <code>Enable WiFi</code> and if you have flashed your Tx Module with your Home WiFi Network details or have set it in Join Network section of the Update Page, it will connect to the network automatically.</p> <p>Using the ExpressLRS Configurator, select the correct Target and set your Firmware Options. Click Build and Flash and wait for the compile process to complete. You should see a section as pictured below and the Success message marking the update process complete.</p> <p></p> <p></p> <p>Verify the version and hash in the main screen of ExpressLRS Lua script.</p>","title":"Method 3"},{"location":"quick-start/transmitters/es900tx/#flashing-via-usb","text":"<p>Target: <code>HappyModel_TX_ES900TX_via_UART</code></p> <p>Device Category: <code>Happymodel 900 MHz</code></p> <p>Device: <code>HappyModel TX ES900TX</code></p> <p></p> <p>This method requires you move two jumpers into specific pins in the module board. See the following image for the jumper location and which pin should be bridged for this method to work.</p> <p></p> <p>The 2 bottom-most dipswitch should be moved into the position as shown in the image above. Attach your USB cable into the module and your computer. CP210x Drivers will have to be installed for this to work properly (Windows). Make sure your computer recognizes the module as a USB-to-UART Bridge device, otherwise, this method will not work.</p> <p></p> <p>Using the ExpressLRS Configurator with the correct Target selected and Firmware Options set, hit Build &amp; Flash. Wait for the process to finish, and you should be greeted with the \"Success\" message.</p> <p></p> <p>Assemble the module back together and attach it to your radio module bay and verify the version and hash in the main screen of ExpressLRS Lua script.</p>","title":"Flashing via USB"},{"location":"quick-start/transmitters/es900tx/#es915868tx-discontinued","text":"","title":"ES915/868TX (Discontinued)"},{"location":"quick-start/transmitters/es900tx/#flashing-via-opentx","text":"<p>Target: <code>HappyModel_TX_ES915TX_via_stock_BL</code></p> <p>Device Category: <code>Happymodel 900 MHz</code></p> <p>Device: <code>HappyModel TX ES915TX</code></p> <p></p> <p>Using Build in the ExpressLRS Configurator, wait for the firmware to be compiled.</p> <p></p> <p>After that's done, ExpressLRS Configurator Log should show the <code>Success</code> Message, and it will automatically open the folder where the firmware.elrs can be found. Put (copy-paste) the firmware.elrs to your Radio's SD Card (preferably to the <code>/FIRMWARE</code> folder for easy access). Once on your radio, navigate to the <code>/FIRMWARE</code> folder, select the firmware.elrs and click-hold the Enter button and select \"Flash External ELRS\".</p> <p>Wait for the flashing to finish, module will reboot and you should hear the tune and two beeps (if external module is now set to CRSF protocol).</p>","title":"Flashing via OpenTX"},{"location":"quick-start/transmitters/es900tx/#flashing-via-stlink","text":"<p>Target: <code>HappyModel_TX_ES915TX_via_STLINK</code></p> <p>Device Category: <code>Happymodel 900 MHz</code></p> <p>Device: <code>HappyModel TX ES915TX</code></p> <p></p> <p>Connect your STLink v2 to the pads shown on the image below.</p> <p></p> <p>With the module connected shown above, and your configuration set, hit Build &amp; Flash in the ExpressLRS Configurator and wait for the process to finish.</p> <p></p> <p>Once that's done, and the Success Message showing, you can now remove/unsolder the STLink, and re-assemble the module, and put it into your Radio's Module Bay. The ExpressLRS tune should play and then two beeps after that can be heard.</p> <p>Verification can be done using the ExpressLRS lua script. It should show the Version Number and Hash at the bottom, as well as the options you can set. If it's showing \"Loading\" at the top, check if External Module is set to CRSF for the selected model in your radio, and that internal RF module is set to off. See General Troubleshooting section for other ways to determine your module is flashed and ready for flying.</p>","title":"Flashing via STLink"},{"location":"quick-start/transmitters/flash2400/","text":"<p></p>","title":"NamimnoRC Flash"},{"location":"quick-start/transmitters/flash2400/#2nd-gen-oled-equipped","text":"<p>These newer devices are now using an ESP-based MCU compared to the first version. With this in mind, the Flashing method will differ slightly, and should now be the same as with other ESP-based Tx Modules.</p>","title":"2nd Gen, OLED-equipped"},{"location":"quick-start/transmitters/flash2400/#flashing-via-wifi","text":"<p>Target: <code>NamimnoRC_FLASH_2400_OLED_TX_via_WIFI</code></p> <p>Device Category: <code>NamimnoRC FLASH 2.4 GHz</code></p> <p>Device: <code>NamimnoRC FLASH 2400 OLED TX</code></p> <p></p>","title":"Flashing via WiFi"},{"location":"quick-start/transmitters/flash2400/#method-1","text":"<p>With the correct target selected and Firmware Options set, Build your firmware using the ExpressLRS Configurator.</p> <p></p> <p>Once it's done, it should open the Target folder for you where the <code>NamimnoRC_FLASH_2400_OLED_TX-&lt;version&gt;.bin</code> file is. Do not close this window so you can easily locate the correct file to upload to the module.</p> <p>The next steps will require the ExpressLRS Lua Script (right-click, save as). Download the ExpressLRS lua script and save it to your Radio's <code>/Scripts/Tools</code> folder. Insert/attach your module into your module bay and make sure it's not loose and there's proper connection with the radio (see the Radio Preparation page). Execute the ExpressLRS lua script by pressing \"System Menu\" in your radio and then under Tools, select <code>ExpressLRS</code>.</p> <p> </p> <p>If the script is stuck at <code>Loading...</code>, then there's a chance your module is still in v1.x firmware, your External RF module is not set to CRSF or that your module is not well-connected to the module bay pins.</p> <p></p> <p>Select WiFi Connectivity from the Lua script and then select Enable WiFi. Press OK once more to activate the WiFi on the Tx Module. Connect to the Access Point the module will create called <code>ExpressLRS TX</code>, with the password being <code>expresslrs</code>.</p>  <p></p>  <p>Using your browser, navigate to the correct page (typically http://10.0.0.1/) and it should show an upload form (you will have to scroll down a bit). You can drag-and-drop the <code>NamimnoRC_FLASH_2400_OLED_TX-&lt;version&gt;.bin</code> file that the ExpressLRS Configurator created. You can also click the <code>Choose File</code> button and navigate to the folder where the firmware was created. Ensure that you have selected the correct firmware file and click <code>Update</code>.</p> <p>Once the file is uploaded, a pop-up confirmation will show up. Wait for the Lua script screen to close the \"WiFi Running\" screen and your module should be updated now.</p> <p>Verify the version and hash in the main screen of ExpressLRS Lua script.</p> <p>Join Local Network</p> <p>You can configure Home Network SSID and Password if you chose not to use ExpressLRS Configurator to set them. Once these are set, you can use the next two methods below.</p> <p></p>","title":"Method 1"},{"location":"quick-start/transmitters/flash2400/#method-2","text":"<p>With the correct target selected and Firmware Options set, Build your firmware using the ExpressLRS Configurator.</p> <p></p> <p>Once it's done, it should open the Target folder for you where the <code>NamimnoRC_FLASH_2400_OLED_TX-&lt;version&gt;.bin</code> file is. Do not close this window so you can easily locate the correct file to upload to the module.</p> <p>Using the ExpressLRS Lua Script (right-click, save as), select <code>Wifi Connectivity</code> then choose <code>Enable WiFi</code> and if you have flashed your Tx Module with your Home WiFi Network details or have set it in Join Network section of the Update Page, it will connect to the local network automatically.</p> <p>Using your browser, navigate to http://elrs_tx.local and the WiFi Update page should show up. Scroll down towards the Firmware Update section, as shown below:</p> <p></p> <p>Drag-and-drop the <code>NamimnoRC_FLASH_2400_OLED_TX-&lt;version&gt;.bin</code> file created by the ExpressLRS Configurator into the Choose File field, or manually navigate to the Folder by clicking the <code>Choose File</code> button. Once the correct file is selected, click the <code>Update</code>. Wait for the process to complete, and the module will reboot (~1min).</p> <p>Verify the version and hash in the main screen of ExpressLRS Lua script.</p>","title":"Method 2"},{"location":"quick-start/transmitters/flash2400/#method-3","text":"<p>Using the ExpressLRS Lua Script (right-click, save as), select <code>Wifi Connectivity</code> then choose <code>Enable WiFi</code> and if you have flashed your Tx Module with your Home WiFi Network details or have set it in Join Network section of the Update Page, it will connect to the network automatically.</p> <p>Using the ExpressLRS Configurator, select the correct Target and set your Firmware Options. Click Build and Flash and wait for the compile process to complete. You should see a section as pictured below and the Success message marking the update process complete.</p> <p></p> <p></p> <p>Verify the version and hash in the main screen of ExpressLRS Lua script.</p>","title":"Method 3"},{"location":"quick-start/transmitters/flash2400/#flashing-via-usbuart","text":"<p></p>  <p>Attention</p> <p>The left position of the switch is for flashing the backpack. The right position of the switch is for flashing the TX itself. The right position is default, so there is no need to open your module unless you need to unbrick your TX backpack!</p>  <p>Target: <code>NamimnoRC_FLASH_2400_OLED_TX_via_UART</code></p> <p>Device Category: <code>NamimnoRC FLASH 2.4 GHz</code></p> <p>Device: <code>NamimnoRC FLASH 2400 OLED TX</code></p> <p></p> <p>Attach your USB cable into the module and your computer. CH340 Drivers will have to be downloaded (Right-click, Save-as) and installed (Unzip the contents of the file; Run the executable installer) for this to work properly (Windows). Make sure your computer recognizes the module as a USB-SERIAL CH340 device, otherwise, this method will not work. </p> <p>Using the ExpressLRS Configurator with the correct Target selected and Firmware Options set, hit Build &amp; Flash. Wait for the process to finish, and you should be greeted with the \"Success\" message.</p> <p></p> <p>Verification can be done using the ExpressLRS lua script. It should show the Version Number and Hash at the bottom, as well as the options you can set. If it's showing \"Loading\" at the top, check if External Module is set to CRSF for the selected model in your radio, and that internal RF module is set to off. See General Troubleshooting section for other ways to determine your module is flashed and ready for flying.</p>","title":"Flashing via USB/UART"},{"location":"quick-start/transmitters/flash2400/#first-gen-no-oled-screen","text":"","title":"First Gen, No OLED Screen"},{"location":"quick-start/transmitters/flash2400/#flashing-via-wifi_1","text":"<p>Target: <code>NamimnoRC_Flash_2400_TX_via_WiFi</code></p> <p>Device Category: <code>NamimnoRC FLASH 2.4 GHz</code></p> <p>Device: <code>NamimnoRC FLASH 2400 TX</code></p> <p></p>","title":"Flashing via Wifi"},{"location":"quick-start/transmitters/flash2400/#method-1_1","text":"<p>With the correct target selected and Firmware Options set, Build your firmware using the ExpressLRS Configurator.</p> <p></p> <p>Once it's done, it should open the Target folder for you where the <code>firmware.elrs</code> file is. Do not close this window so you can easily locate the correct file to upload to the module.</p> <p>These Tx Modules are STM32-based so they require a separate ESP \"backpack\" device for Wifi Flashing/Updating. </p> <p>Attach the module to your JR Bays and power it up. Connect to the <code>ESP Wifi Manager</code> Hotspot that the device will activate. Once connected, navigate to http://elrs_tx.local/.</p> <p></p> <p>Press <code>Configure WiFi</code> and set your home network SSID and password. This will enable your Tx Module to connect to your local home network.</p> <p>On your browser, refresh the http://elrs_tx.local/ and scroll towards the STM32 Firmware Update section, as shown below:</p> <p></p> <p>Drag-and-drop the <code>firmware.elrs</code> file created by the ExpressLRS Configurator into the Choose File field, or manually navigate to the Folder by clicking the Choose File button. You can also upload the <code>firmware.bin</code> file but change the offset to 0x4000.Once the correct file is selected, click the <code>Upload and Flash STM32</code>. Wait for the process to complete, and the module will reboot (~1min). Using the ExpressLRS lua script, verify that you have the latest version.</p>","title":"Method 1"},{"location":"quick-start/transmitters/flash2400/#method-2_1","text":"<p>These Tx Modules are STM32-based so they require a separate ESP \"backpack\" device for Wifi Flashing/Updating. </p> <p>Attach the module to your JR Bays and power it up. Connect to the <code>ESP Wifi Manager</code> Hotspot that the device will activate. Once connected, navigate to http://elrs_tx.local/.</p> <p></p> <p>Press <code>Configure WiFi</code> and set your home network SSID and password. This will enable your Tx Module to connect to your local home network.</p> <p>Using the ExpressLRS Configurator, select the correct Target and set your Firmware Options. Click Build and Flash and wait for the compile process to complete. You should see a section as pictured below and the Success message marking the update process complete.</p> <p></p> <p></p> <p>Using the ExpressLRS lua script, verify that you have the latest version.</p>","title":"Method 2"},{"location":"quick-start/transmitters/flash2400/#flashing-via-opentx-radio","text":"<p>Note</p> <p>The <code>NamimnoRC_Flash_2400_TX_via_WiFi</code> Target will work for this method too!</p>  <p>Device Category: <code>NamimnoRC FLASH 2.4 GHz</code></p> <p>Device: <code>NamimnoRC FLASH 2400 TX</code></p> <p></p> <p>With the correct target selected and Firmware Options set, Build your firmware using the ExpressLRS Configurator.</p> <p></p> <p>Once it's done, it should open the Target folder for you where the <code>NamimnoRC_Flash_2400_TX-&lt;version&gt;.elrs</code> file is. Do not close this window so you can easily locate the correct file to copy to your Radio's SD Card.</p> <p>Copy the <code>NamimnoRC_Flash_2400_TX-&lt;version&gt;.elrs</code> file into your radio's SD Card <code>/FIRMWARE</code> folder.</p> <p>Once copied, navigate to the <code>/FIRMWARE</code> Folder on your Radio and select/highlight the <code>NamimnoRC_Flash_2400_TX-&lt;version&gt;.elrs</code> file, long-press the Enter key and select <code>Flash external ELRS</code>. Flashing will then commence and after a few seconds, radio should show a <code>Flash Successful</code> message and you're done!</p> <p>Using the ExpressLRS lua script, verify that you have the latest version.</p>","title":"Flashing via OpenTX Radio"},{"location":"quick-start/transmitters/flash2400/#flashing-via-stlink","text":"<p>Target: <code>NamimnoRC_Flash_2400_TX_via_STLINK</code></p> <p>Device Category: <code>NamimnoRC FLASH 2.4 GHz</code></p> <p>Device: <code>NamimnoRC FLASH 2400 TX</code></p> <p></p> <p>ONLY USE THIS METHOD IF THE FIRMWARE HAS BEEN CORRUPTED </p> <p>Begin by disassembling the module by unscrewing the 4 screws at the rear of the module with a 1.5mm hex wrench. Carefully seperate the parts of the module and detach the cable from the main PCB.</p> <p> </p> <p>Wire your <code>STLink v2</code> to the module's pins as show below:</p> <p></p> <p>With the module connected shown above, and your configuration set, hit Build &amp; Flash in the ExpressLRS Configurator and wait for the process to finish.</p> <p></p> <p>Once that's done, and the Success Message showing, you can now remove/unsolder the STLink, and re-assemble the module, and put it into your Radio's Module Bay. If the Radio has CRSF selected, the light should turn green meaning the module has communication with your radio.</p> <p>Verification can be done using the ExpressLRS lua script. It should show the Version Number and Hash at the bottom, as well as the options you can set. If it's showing \"Loading\" at the top, check if External Module is set to CRSF for the selected model in your radio, and that internal RF module is set to off. See General Troubleshooting section for other ways to determine your module is flashed and ready for flying.</p>","title":"Flashing via STLink"},{"location":"quick-start/transmitters/frsky-r9modules/","text":"<p></p>  <p>Warning</p> <p>The R9M Lite Pro can not be flashed via OpenTx or EdgeTX, and therefore requires an STLink v2 to flash. See the guide below</p>","title":"Frsky R9 Modules"},{"location":"quick-start/transmitters/frsky-r9modules/#flashing-via-opentx","text":"<p>Info</p> <p>This method requires OpenTX 2.3.12 or newer; or EdgeTX 2.4.0 or newer.</p>","title":"Flashing via OpenTX"},{"location":"quick-start/transmitters/frsky-r9modules/#flashing-the-bootloader","text":"<p>The bootloader is required to be flashed first prior to flashing the ExpressLRS firmware as the bootloader will replace the factory-bootloader, and enable the hardware to instead use the ExpressLRS code.</p>  <p>FYI</p> <p>You only need to flash the Bootloader ONCE. After it's flashed into the receiver, you don't have to reflash it in every update.</p>  <p>Using an <code>OpenTX</code> transmitter, you flash the bootloader, and then flash ELRS.</p> <p>Here is a quick 2 minute demo if you would rather watch a video than read the steps:</p>  <p>With the previous step (Radio Preperation) done, you should now readily flash your R9 Transmitter Module.</p> <p>Copy <code>r9m_elrs_bl.frk</code> onto the SD card of your radio, in the <code>/FIRMWARE</code> folder.</p> <p>Flash <code>r9m_elrs_bl.frk</code> (14kb) to your TX module:</p> <ul> <li>Navigate in OpenTX to the TOOLS menu (hold SYS button)</li> <li>Page to the SD-HC CARD page, then the <code>FIRMWARE</code> folder</li> <li>Flash the frk file by holding OK and selecting \"Flash external module\"</li> </ul>","title":"Flashing the Bootloader"},{"location":"quick-start/transmitters/frsky-r9modules/#flashing-the-firmware","text":"<p>Targets: </p> <ul> <li><code>Frsky_TX_R9M_via_stock_BL</code></li> <li><code>Frsky_TX_R9M_LITE_via_stock_BL</code></li> </ul> <p>Device Category: <code>Frsky R9</code></p> <p>Device:</p> <ul> <li><code>Frsky TX R9M</code></li> <li><code>Frsky TX R9M LITE</code></li> </ul> <p></p> <p>In the ExpressLRS Configurator, select the correct target for your module and set your Firmware Options. </p> <p>Click on Build and wait for the firmware to be compiled.</p> <p></p> <p>After that's done, ExpressLRS Configurator Log should show the <code>Success</code> Message, and it will automatically open the folder where the firmware.elrs can be found. Put (copy-paste) the firmware.elrs to your Radio's SD Card (preferably to the <code>/FIRMWARE</code> folder for easy access). Once on your radio, navigate to the <code>/FIRMWARE</code> folder, select the firmware.elrs and click-hold the Enter button and select \"Flash External ELRS\".</p> <p>By this point, the bootloader (r9m_elrs_bl.frk) should've been flashed already. Wait for the flashing to finish, and if your module is equipped with a speaker (full size R9Ms), you should hear the tune and two beeps (if external module is now set to CRSF protocol).</p>","title":"Flashing the firmware"},{"location":"quick-start/transmitters/frsky-r9modules/#flashing-using-stlink","text":"<p>Targets:</p> <ul> <li><code>Frsky_TX_R9M_via_STLINK</code></li> <li><code>Frsky_TX_R9M_LITE_via_STLINK</code></li> <li><code>Frsky_TX_R9M_LITE_PRO_via_STLINK</code></li> </ul> <p>Device Category: <code>Frsky R9</code></p> <p>Device:</p> <ul> <li><code>Frsky TX R9M</code></li> <li><code>Frsky TX R9M LITE</code></li> <li><code>Frsky TX R9M LITE PRO</code></li> </ul> <p></p> <p>This method is an irreversible one. You will not be able to go back to Frsky firmwares with this method. You have been warned!</p> <p>This method also involves taking apart your module and soldering wires directly into its board. If you're not comfortable doing this, STOP now.</p> <p></p> <p>R9M STLink Connection</p> <p></p> <p>R9M Lite STLink Connection</p> <p></p> <p>R9M Lite Pro STLink Connection</p> <p>Wire up your module as shown above to your STLink device. This is important before any of the steps below.</p> <p>Before flashing, disable <code>'Readout Protection'</code>. To do this download the ST-LINK Utility and follow this quick how to video. After such, you can now disconnect (Target -&gt; Disconnect) and close the ST-Link Utility.</p> <p>With the module still connected to the STLink, and your Firmware Options set, hit Build &amp; Flash in the ExpressLRS Configurator and wait for the process to finish.</p> <p></p> <p>Once that's done, and the Success Message showing, you can now remove/unsolder the STLink, and re-assemble the module, and put it into your Radio's Module Bay. The ExpressLRS tune should play and then two beeps after that can be heard, for units that has a speaker (R9Ms) and if the External Module is set to CRSF Protocol.</p> <p>Verification can be done using the ExpressLRS lua script. It should show the Version Number and Hash at the bottom, as well as the options you can set. If it's showing \"Loading\" at the top, check if External Module is set to CRSF for the selected model in your radio, and that internal RF module is set to off. See General Troubleshooting section for other ways to determine your module is flashed and ready for flying.</p>","title":"Flashing using STLink"},{"location":"quick-start/transmitters/ghost2400/","text":"<p></p>","title":"IMRC Ghost"},{"location":"quick-start/transmitters/ghost2400/#flashing-ghost-modules-via-stlink","text":"<p>Targets:</p> <ul> <li><code>GHOST_2400_TX_via_STLINK</code></li> <li><code>GHOST_2400_TX_LITE_via_STLINK</code></li> </ul> <p>Device Category: <code>ImmersionRC Ghost</code></p> <p>Device:</p> <ul> <li><code>GHOST 2400 TX</code></li> <li><code>GHOST 2400 TX LITE</code></li> </ul> <p></p>","title":"Flashing Ghost Modules via STLink"},{"location":"quick-start/transmitters/ghost2400/#initial-flash","text":"<p>Here is a 10 minute video, showing the steps required to both flash the TX if you would rather watch than read:</p>  <p>Flashing the Ghost TX's is currently a 1 WAY flash once you flash ExpressLRS to the TX you will not be able to use it with stock Ghost RX's (running stock firmware, they will work while running ELRS).  You will need a <code>StLink V2</code> to flash the TX</p> <p>Wire <code>3.3v</code>, <code>GND</code>, <code>CLK</code>, and <code>DIO</code> to their respective pins on your part from the StLink. (You can power with the StLink but in the first two image the radio is used to power the module).   </p> <p>Here is the output/input antennas of the TX: </p>","title":"Initial Flash"},{"location":"quick-start/transmitters/ghost2400/#updating","text":"<p>Updating can be done by building an updated version on the configurator and then flashing the <code>firmware.bin</code> file using OpenTX.</p>","title":"Updating"},{"location":"quick-start/transmitters/hglrc-hermes/","text":"<p></p>","title":"HGLRC Hermes"},{"location":"quick-start/transmitters/hglrc-hermes/#flashing-via-wifi","text":"<p>Target: <code>HGLRC_Hermes_2400_TX_via_WIFI</code></p> <p>Device Category: <code>HGLRC 2.4 GHz</code></p> <p>Device: <code>HGLRC Hermes 2400 TX</code></p> <p></p>  <p>Attention</p> <p>The methods below applies if you've already updated your Tx modules to 2.x. For modules still in firmwares pre 2.x, you should use 1.x WiFi flashing method to update to 2.x. Or update to 2.x via USB instead.</p>","title":"Flashing via Wifi"},{"location":"quick-start/transmitters/hglrc-hermes/#method-1","text":"<p>With the correct target selected and Firmware Options set, Build your firmware using the ExpressLRS Configurator.</p> <p></p> <p>Once it's done, it should open the Target folder for you where the <code>HGLRC_Hermes_2400_TX-&lt;version&gt;.bin</code> file is. Do not close this window so you can easily locate the correct file to upload to the module.</p> <p>The next steps will require the ExpressLRS Lua Script (right-click, save as). Download the ExpressLRS lua script and save it to your Radio's <code>/Scripts/Tools</code> folder. Insert/attach your module into your module bay and make sure it's not loose and there's proper connection with the radio (see the Radio Preparation page). Execute the ExpressLRS lua script by pressing \"System Menu\" in your radio and then under Tools, select <code>ExpressLRS</code>.</p> <p> </p> <p>If the script is stuck at <code>Loading...</code>, then there's a chance your module is still in v1.x firmware, your External RF module is not set to CRSF or that your module is not well-connected to the module bay pins.</p> <p></p> <p>Select WiFi Connectivity from the Lua script and then select Enable WiFi. Press OK once more to activate the WiFi on the Tx Module. Connect to the Access Point the module will create called <code>ExpressLRS TX</code>, with the password being <code>expresslrs</code>.</p>  <p></p>  <p>Using your browser, navigate to the correct page (typically http://10.0.0.1/) and it should show an upload form (you will have to scroll down a bit). You can drag-and-drop the <code>HGLRC_Hermes_2400_TX-&lt;version&gt;.bin</code> file that the ExpressLRS Configurator created. You can also click the <code>Choose File</code> button and navigate to the folder where the firmware was created. Ensure that you have selected the correct firmware file and click <code>Update</code>.</p> <p>Once the file is uploaded, a pop-up confirmation will show up. Wait for the Lua script screen to close the \"WiFi Running\" screen and your module should be updated now.</p> <p>Verify the version and hash in the main screen of ExpressLRS Lua script.</p> <p>Update for version 2.0</p> <p>Once you have updated to firmware version 2.0 or newer, the Web Update page on the Hotspot will get a few updates of its own. It will get the Update progress bar, and a Popup will be shown for Success or Error messages. Additionally, you can configure Home Network SSID and Password if you chose not to use ExpressLRS Configurator to set them. Once these are set, you can use the two methods below.</p> <p></p>","title":"Method 1"},{"location":"quick-start/transmitters/hglrc-hermes/#method-2","text":"<p>With the correct target selected and Firmware Options set, Build your firmware using the ExpressLRS Configurator.</p> <p></p> <p>Once it's done, it should open the Target folder for you where the <code>HGLRC_Hermes_2400_TX-&lt;version&gt;.bin</code> file is. Do not close this window so you can easily locate the correct file to upload to the module.</p> <p>Using the ExpressLRS Lua Script (right-click, save as), select <code>Wifi Connectivity</code> then choose <code>Enable WiFi</code> and if you have flashed your Tx Module with your Home WiFi Network details or have set it in Join Network section of the Update Page, it will connect to the local network automatically.</p> <p>Using your browser, navigate to http://elrs_tx.local and the WiFi Update page should show up. Scroll down towards the Firmware Update section, as shown below:</p> <p></p> <p>Drag-and-drop the <code>HGLRC_Hermes_2400_TX-&lt;version&gt;.bin</code> file created by the ExpressLRS Configurator into the Choose File field, or manually navigate to the Folder by clicking the <code>Choose File</code> button. Once the correct file is selected, click the <code>Update</code>. Wait for the process to complete, and the module will reboot (~1min).</p> <p>Verify the version and hash in the main screen of ExpressLRS Lua script.</p>","title":"Method 2"},{"location":"quick-start/transmitters/hglrc-hermes/#method-3","text":"<p>Using the ExpressLRS Lua Script (right-click, save as), select <code>Wifi Connectivity</code> then choose <code>Enable WiFi</code> and if you have flashed your Tx Module with your Home WiFi Network details or have set it in Join Network section of the Update Page, it will connect to the network automatically.</p> <p>Using the ExpressLRS Configurator, select the correct Target and set your Firmware Options. Click Build and Flash and wait for the compile process to complete. You should see a section as pictured below and the Success message marking the update process complete.</p> <p></p> <p></p> <p>Verify the version and hash in the main screen of ExpressLRS Lua script.</p>","title":"Method 3"},{"location":"quick-start/transmitters/hglrc-hermes/#flashing-via-usbuart","text":"<p>Target: <code>HGLRC_Hermes_2400_TX_via_UART</code></p> <p>Device Category: <code>HGLRC 2.4 GHz</code></p> <p>Device: <code>HGLRC Hermes 2400 TX</code></p> <p></p> <p>Attach your USB cable into the module while pressing and holding the recessed button at the back of the module. The location of the button is shown in the image below.</p>  <p></p>  <p>The CP210x Drivers will have to be installed for this to work properly (Windows). Make sure your computer recognizes the module as a CP210x USB-to-UART Bridge device (check Device Manager; or the Actions section of the ExpressLRS Configurator should show another Com Port with Silabs CP210x designation), otherwise, this method will not work.</p> <p></p> <p>Using the ExpressLRS Configurator with the correct Target selected and Firmware Options set, hit Build &amp; Flash. Wait for the process to finish, and you should be greeted with the \"Success\" message.</p> <p></p> <p>Verification can be done using the [ExpressLRS lua] script. It should show the Version Number and Hash at the bottom, as well as the options you can set. If it's showing \"Loading\" at the top, check if External Module is set to CRSF for the selected model in your radio, and that internal RF module is set to off. See General Troubleshooting section for other ways to determine your module is flashed and ready for flying.</p>","title":"Flashing via USB/UART"},{"location":"quick-start/transmitters/iflight-commando/","text":"<p></p>  <p>WARNING</p> <p>Make sure you are selecting the right Device Category (2.4GHz or 900MHz) that's appropriate for the hardware you have. You CANNOT flash a 2.4GHz module with the firmware for the 900MHz module and expect it to work properly. Likewise, you CANNOT flash a 900MHz module with the firmware for the 2.4GHz module. They have different set of hardware.</p> <p>You can damage your hardware if you do so. You have been warned!</p>","title":"iFlight Commando"},{"location":"quick-start/transmitters/iflight-commando/#flashing-via-wifi","text":"<p>Targets:</p> <ul> <li><code>iFlight_2400_TX_via_WIFI</code></li> <li><code>iFlight_900_TX_via_WIFI</code></li> </ul> <p>Device Categories:</p> <ul> <li><code>iFlight 2.4 GHz</code></li> <li><code>iFlight 900 MHz</code></li> </ul> <p>Devices: </p> <ul> <li><code>iFlight 2400TX</code></li> <li><code>iFlight 900TX</code></li> </ul> <p></p>","title":"Flashing via Wifi"},{"location":"quick-start/transmitters/iflight-commando/#method-1","text":"<p>With the correct target selected and Firmware Options set, Build your firmware using the ExpressLRS Configurator.</p> <p></p> <p>Once it's done, it should open the Target folder for you where the <code>iFlight_2400_TX-&lt;version&gt;.bin</code> or <code>iFlight_900_TX-&lt;version&gt;.bin</code> file is. Do not close this window so you can easily locate the correct file to upload to the module.</p> <p>The next steps will require the ExpressLRS Lua Script (right-click, save as). Download the ExpressLRS lua script and save it to your Radio's <code>/Scripts/Tools</code> folder. Execute the ExpressLRS lua script by pressing \"System Menu\" in your radio and then under Tools, select <code>ExpressLRS</code>.</p> <p> </p> <p>If the script is stuck at <code>Loading...</code>, then there's a chance your Radio External RF module is not set to CRSF.</p> <p></p> <p>Select WiFi Connectivity from the Lua script and then select Enable WiFi. Press OK once more to activate the WiFi on the Tx Module. Connect to the Access Point the module will create called <code>ExpressLRS TX</code>, with the password being <code>expresslrs</code>.</p>  <p></p>  <p>Using your browser, navigate to the correct page (typically http://10.0.0.1/) and it should show an upload form (you will have to scroll down a bit). You can drag-and-drop the <code>iFlight_2400_TX-&lt;version&gt;.bin</code> or <code>iFlight_900_TX-&lt;version&gt;.bin</code> file that the ExpressLRS Configurator created. You can also click the <code>Choose File</code> button and navigate to the folder where the firmware was created. Ensure that you have selected the correct firmware file and click <code>Update</code>.</p> <p>Once the file is uploaded, a pop-up confirmation will show up. Wait for the Lua script to close the \"WiFi Running\" screen and your module should be updated now.</p> <p>Verify the version and hash in the main screen of ExpressLRS Lua script.</p> <p>Join Local Network</p> <p>You can configure Home Network SSID and Password if you chose not to use ExpressLRS Configurator to set them. Once these are set, you can use the next two methods below.</p> <p></p>","title":"Method 1"},{"location":"quick-start/transmitters/iflight-commando/#method-2","text":"<p>With the correct target selected and Firmware Options set, Build your firmware using the ExpressLRS Configurator.</p> <p></p> <p>Once it's done, it should open the Target folder for you where the <code>iFlight_2400_TX-&lt;version&gt;.bin</code> or <code>iFlight_900_TX-&lt;version&gt;.bin</code> file is. Do not close this window so you can easily locate the correct file to upload to the module.</p> <p>Using the ExpressLRS Lua Script (right-click, save as), select <code>Wifi Connectivity</code> then choose <code>Enable WiFi</code> and if you have flashed your Tx Module with your Home WiFi Network details or have set it in Join Network section of the Update Page, it will connect to the local network automatically.</p> <p>Using your browser, navigate to http://elrs_tx.local and the WiFi Update page should show up. Scroll down towards the Firmware Update section, as shown below:</p> <p></p> <p>Drag-and-drop the <code>iFlight_2400_TX-&lt;version&gt;.bin</code> or <code>iFlight_900_TX-&lt;version&gt;.bin</code> file created by the ExpressLRS Configurator into the Choose File field, or manually navigate to the Folder by clicking the <code>Choose File</code> button. Once the correct file is selected, click the <code>Update</code>. Wait for the process to complete, and the module will reboot (the \"Wifi Running\" window on the Lua Script will disappear once it has rebooted).</p> <p>Verify the version and hash in the main screen of ExpressLRS Lua script.</p>","title":"Method 2"},{"location":"quick-start/transmitters/iflight-commando/#method-3","text":"<p>Using the ExpressLRS Lua Script (right-click, save as), select <code>Wifi Connectivity</code> then choose <code>Enable WiFi</code> and if you have flashed your Tx Module with your Home WiFi Network details or have set it in Join Network section of the Update Page, it will connect to the network automatically.</p> <p>Using the ExpressLRS Configurator, select the correct Target and set your Firmware Options. Click Build and Flash and wait for the compile process to complete. You should see a section as pictured below and the Success message marking the update process complete.</p> <p></p> <p></p> <p>Verify the version and hash in the main screen of ExpressLRS Lua script.</p>","title":"Method 3"},{"location":"quick-start/transmitters/iflight-commando/#flashing-via-usbuart","text":"<p>Targets:</p> <ul> <li><code>iFlight_2400_TX_via_UART</code></li> <li><code>iFlight_900_TX_via_UART</code></li> </ul> <p>Device Categories:</p> <ul> <li><code>iFlight 2.4 GHz</code></li> <li><code>iFlight 900 MHz</code></li> </ul> <p>Devices: </p> <ul> <li><code>iFlight 2400TX</code></li> <li><code>iFlight 900TX</code></li> </ul> <p></p> <p>Unscrew the two screws holding the Transmitter Module to the back of the radio handset. Carefully lift the Transmitter Module to get access to the USB-c port. Do not tug too much as there are wires connecting the Transmitter Module to the mainboard of the radio handset, along with the antenna cable of the module itself.</p>  <p></p> TX Module and USB-C connection  <p>Attach a USB-C Data Cable to your module and Computer. Windows users might have to install CP210x Windows Drivers to ensure the device is properly detected and initialized. Check Device Manager to verify the TX Module appears as a CP210x USB to UART Bridge, under the Ports grouping.</p> <p></p> <p>Using the ExpressLRS Configurator with the correct Target selected and Firmware Options set, hit Build &amp; Flash. Wait for the process to finish, and you should be greeted with the \"Success\" message.</p> <p></p> <p>Verify the version and hash in the main screen of ExpressLRS Lua script.</p>","title":"Flashing via USB/UART"},{"location":"quick-start/transmitters/jumper-aion/","text":"<p></p>","title":"Jumper Aion Nano"},{"location":"quick-start/transmitters/jumper-aion/#flashing-via-wifi","text":"<p>Target: <code>Jumper_AION_Nano_2400_TX_via_WIFI</code></p> <p>Device Category: <code>Jumper 2.4 GHz</code></p> <p>Device: <code>Jumper AION Nano 2400 TX</code></p> <p></p>","title":"Flashing via Wifi"},{"location":"quick-start/transmitters/jumper-aion/#method-1","text":"<p>With the correct target selected and [Firmware Options] set, Build your firmware using the ExpressLRS Configurator.</p> <p></p> <p>Once it's done, it should open the Target folder for you where the <code>Jumper_AION_Nano_2400_TX-&lt;version&gt;.bin</code> file is. Do not close this window so you can easily locate the correct file to upload to the module.</p> <p>The next steps will require the ExpressLRS Lua Script (right-click, save as). Download the ExpressLRS lua script and save it to your Radio's <code>/Scripts/Tools</code> folder. Insert/attach your module into your module bay and make sure it's not loose and there's proper connection with the radio (see the [Radio Preparation] page). Execute the ExpressLRS lua script by pressing \"System Menu\" in your radio and then under Tools, select <code>ExpressLRS</code>.</p> <p> </p> <p>If the script is stuck at <code>Loading...</code>, then there's a chance your Radio External RF module is not set to CRSF or that your module is not well-connected to the module bay pins.</p> <p></p> <p>Select WiFi Connectivity from the Lua script and then select Enable WiFi. Press OK once more to activate the WiFi on the Tx Module. Connect to the Access Point the module will create called <code>ExpressLRS TX</code>, with the password being <code>expresslrs</code>.</p>  <p></p>  <p>Using your browser, navigate to the correct page (typically http://10.0.0.1/) and it should show an upload form (you will have to scroll down a bit). You can drag-and-drop the <code>Jumper_AION_Nano_2400_TX-&lt;version&gt;.bin</code> file that the ExpressLRS Configurator created. You can also click the <code>Choose File</code> button and navigate to the folder where the firmware was created. Ensure that you have selected the correct firmware file and click <code>Update</code>.</p> <p>Once the file is uploaded, a pop-up confirmation will show up. Wait for the Lua script screen to close the \"WiFi Running\" screen and your module should be updated now.</p> <p>Verify the version and hash in the main screen of ExpressLRS Lua script.</p> <p>Join Local Network</p> <p>You can configure Home Network SSID and Password if you chose not to use ExpressLRS Configurator to set them. Once these are set, you can use the next two methods below.</p> <p></p>","title":"Method 1"},{"location":"quick-start/transmitters/jumper-aion/#method-2","text":"<p>With the correct target selected and [Firmware Options] set, Build your firmware using the ExpressLRS Configurator.</p> <p></p> <p>Once it's done, it should open the Target folder for you where the <code>Jumper_AION_Nano_2400_TX-&lt;version&gt;.bin</code> file is. Do not close this window so you can easily locate the correct file to upload to the module.</p> <p>Using the ExpressLRS Lua Script (right-click, save as), select <code>Wifi Connectivity</code> then choose <code>Enable WiFi</code> and if you have flashed your Tx Module with your Home WiFi Network details or have set it in Join Network section of the Update Page, it will connect to the local network automatically.</p> <p>Using your browser, navigate to http://elrs_tx.local and the WiFi Update page should show up. Scroll down towards the Firmware Update section, as shown below:</p> <p></p> <p>Drag-and-drop the <code>Jumper_AION_Nano_2400_TX-&lt;version&gt;.bin</code> file created by the ExpressLRS Configurator into the Choose File field, or manually navigate to the Folder by clicking the <code>Choose File</code> button. Once the correct file is selected, click the <code>Update</code>. Wait for the process to complete, and the module will reboot (~1min).</p> <p>Verify the version and hash in the main screen of ExpressLRS Lua script.</p>","title":"Method 2"},{"location":"quick-start/transmitters/jumper-aion/#method-3","text":"<p>Using the ExpressLRS Lua Script (right-click, save as), select <code>Wifi Connectivity</code> then choose <code>Enable WiFi</code> and if you have flashed your Tx Module with your Home WiFi Network details or have set it in Join Network section of the Update Page, it will connect to the network automatically.</p> <p>Using the ExpressLRS Configurator, select the correct Target and set your [Firmware Options]. Click Build and Flash and wait for the compile process to complete. You should see a section as pictured below and the Success message marking the update process complete.</p> <p></p> <p></p> <p>Verify the version and hash in the main screen of ExpressLRS Lua script.</p>","title":"Method 3"},{"location":"quick-start/transmitters/jumper-aion/#flashing-via-usbuart","text":"<p>Target: <code>Jumper_AION_Nano_2400_TX_via_UART</code></p> <p>Device Category: <code>Jumper 2.4 GHz</code></p> <p>Device: <code>Jumper AION Nano 2400 TX</code></p> <p></p> <p>Attach a USB-C Data Cable to your module and Computer. Windows users might have to install CP210x Windows Drivers to ensure the device is properly detected and initialized.</p> <p></p> <p>Using the ExpressLRS Configurator with the correct Target selected and [Firmware Options] set, hit Build &amp; Flash. Wait for the process to finish, and you should be greeted with the \"Success\" message.</p> <p></p> <p>Verify the version and hash in the main screen of ExpressLRS Lua script.</p>","title":"Flashing via USB/UART"},{"location":"quick-start/transmitters/lua-howto/","text":"<p></p> <p>Now that you have flashed your TX it is time to learn how to use the ELRS lua script!</p>","title":"Using The Lua Script"},{"location":"quick-start/transmitters/lua-howto/#installing-the-lua-script","text":"<p>Download the ELRSv3 Lua Script(you can simply right-click, save-as) into your radio's SD Card under the <code>Scripts/Tools</code> folder and Long Press the \"SYS\" button (for T16 or similar Radios) or the \"Menu\" button (for Taranis X9D or similar Radios) to access the Tools Menu where you can find the ExpressLRS script ready to run with only one click.</p> <p>Here's how it looks in the Tools menu (X9D+ and T16 Shown):</p> <p> </p>","title":"Installing the Lua Script"},{"location":"quick-start/transmitters/lua-howto/#check-if-your-tx-is-connected","text":"<p>Enter the Lua script by selecting \"ExpressLRS\" in the Tools menu and pressing ENTER.</p> <p>If the parameter list does not populate after a few seconds, and it's stuck at <code>Loading...</code>, first verify the ExpressLRS module has power by checking its LED. If there is no LED lit up, it is possible the Protocol set for the External Module is incorrect (should be set to CRSF) or that the module is not properly connected to the pins of the JR bay of the radio. Another possible reason is that you haven't updated the firmware of the module to version 2.x.</p> <p>If parameters do show up, but the Bad/Good section on the right side of the header is showing an unstable value, have a look at your model settings and make sure the Internal RF module is set to Off. If the Bad/Good indicates something other than <code>0/&lt;your selected packet rate&gt;</code> this means <code>CRSFshot</code> is not working-- verify that you properly followed the Radio Preparation Guide.</p> <p> </p> <p>The <code>master   942c40</code> from the photo above is the git branch and commit hash of the firmware version that the module has. You can reference this hash from Releases. On the first photo above, <code>master</code> means the module is flashed with the <code>Master Branch</code> with the git commit <code>942c40</code>. If you're on a Released version or a Release Candidate, this will read something like <code>3.0</code> or <code>3.0-RC1</code> plus the commit hash of the release.</p>  <p>Note</p> <p>Colors may differ from Handset to Handset, depending on the current theme in use.</p>","title":"Check if your TX is Connected"},{"location":"quick-start/transmitters/lua-howto/#understanding-and-using-the-lua-script","text":"<p>Now, we can explore the complexities of the lua script, and how to interpret each of its many sections. ExpressLRS supports multiple configuration profiles, and the configuration profile is selected by setting the \"Receiver\" property in handset Model Setup -&gt; External Module -&gt; Receiver (number).</p> <p></p>  <p>WARNING</p> <p>Do not change parameters while ARMED. When a parameter is changed, the module goes into Parameter Commit mode, interrupting the normal loop. This could result on a desync on some hardware combination which would result in a FAILSAFE.</p>","title":"Understanding and Using the Lua Script"},{"location":"quick-start/transmitters/lua-howto/#the-header","text":"<p>The first line, \"Header\", will show you some information about your ExpressLRS link. </p> <p>The first part will show you the current ExpressLRS TX Module ID, followed by the current status of the link.</p> <p>The <code>0/nnn</code> is your Packet Counter. The second set of numbers should match with your currently selected Packet Rate. e.g. If you've set your Packet Rate to 500Hz, the Packet Counter should show 0/500, which means you're not getting any Bad Packets ( 0 Bad Packets ) and only getting Good Packets ( 500 Good Packets ). Any small fluctuation is normal and often goes back to 100% Good Packets, especially when you change a setting and it's commited into memory. </p> <p>Should the indicator starts showing Bad Packets, and Good Packets goes down, it isn't a good situation. Make sure your module is not overheating and it's still getting good connection with the radio. This is most dangerous when you're armed and flying several kilometers/miles out, as this could mean a sudden Failsafe.</p> <p>The <code>Connection Status</code> indicator shows your current RC link status. When not connected to any receiver, it will show a dash (<code>-</code>); while a <code>C</code> shows up when bound and connected.</p> <p>The <code>Model Mismatched</code> message will also show up to indicate your are connected to a receiver, but the model selected in your radio is incorrect. See the Model Match page for more info about Model Matching.</p>","title":"The Header"},{"location":"quick-start/transmitters/lua-howto/#folder-titles","text":"<p>Items with <code>&gt;</code> before the name is a folder that when selected shows another level of customization. <code>TX Power</code>, <code>VTX Administrator</code>, <code>Wifi Connectivity</code> are examples of these items.</p> <p> These items will now show what is currently set for the items within. Example would be on <code>TX Power</code>, which will show the current Power set, and if Dynamic Power is enabled, it will show the current set Max Power, followed by the indicator <code>Dyn</code>.</p>","title":"Folder Titles"},{"location":"quick-start/transmitters/lua-howto/#packet-rate-and-telemetry-ratio","text":"<p>These are shown as <code>Packet Rate</code> and <code>Telem Ratio</code> in the lua script, which allow you to change your performance parameters. </p> <ul> <li> <p><code>Packet Rate</code> sets how fast data packets are sent, higher rates send packets more frequently and have lower latency.</p> <p>The following options are available for <code>2.4GHz</code>:</p> <ul> <li><code>50Hz, 150Hz, 250Hz &amp; 500Hz</code>: Lora-based options. Higher means lower latency in the expense of sensitivity. Since v1.0.</li> <li><code>F500 &amp; F1000</code>  : Pure FLRC for lowest latency, reduced range compared to LoRa, 500Hz and 1000Hz. Detaills</li> <li><code>D250 &amp; D500</code>  : Redundant transmit FLRC modes.  <code>D</code> stands for <code>D\u00e9j\u00e0 Vu</code>, 250Hz and 500Hz. Higher latency, reduced packet jitter and higher LQ. Same range as other FLRC modes. Details</li> <li><code>100Hz Full &amp; 333Hz Full</code>  : Lora-based 10-bit Full Resolution with 8ch/12ch/16 Switch Mode options. Details</li> </ul> <p>The following options are available for <code>900MHz</code>:</p> <ul> <li><code>25Hz, 50Hz, 100Hz &amp; 200Hz</code>: LoRa-based options. Higher means lower latency in the expense of sensitivity. Since v1.0.</li> <li><code>100Hz Full</code>  : Lora-based 10-bit Full Resolution with 8ch/12ch/16 Switch Mode options. Details</li> </ul> <p>The number following the rate in parentheses (e.g. -105dBm for 500Hz) is the Sensitivity Limit for the rate, the lowest RSSI where packets will still be received. See Signal Health for more information about the sensitivity limit.</p> </li> </ul>  <p>WARNING</p> <p>Never change the packet rate while flying as this FORCES A DISCONNECT between the TX and RX. </p>  <ul> <li> <p><code>Telem Ratio</code> sets the telemetry ratio or how much of the packet rate is used to send telemetry. The options, in order of increasing telemetry rate, are: <code>Off, 1:128, 1:64, 1:32, 1:16, 1:8, 1:4, 1:2</code>. A Telem Ratio of 1:64 means one out of every 64 packets are used for telemetry data.</p> <ul> <li> v3.0 comes with <code>Std</code> and <code>Race</code> options. <code>Std</code> changes ratio depending on the Packet Rate, and <code>Race</code> is the same as Std, but will disable telemetry and sync while Armed.</li> </ul> <p>For information on telemetry setup, see First Flight: Telemetry and Telemetry Bandwidth.</p> </li> </ul>","title":"Packet Rate and Telemetry Ratio"},{"location":"quick-start/transmitters/lua-howto/#switch-mode","text":"<p>The Switch Mode setting controls how channels AUX1-AUX8 are sent to the receiver (the 4 main channels are always 10-bit). The options are <code>Hybrid &amp; Wide</code>. Hybrid mode is 6x 2, 3 or 6-position + 1x 16-position, and Wide is 7x 64 or 128-position. For detail about the differences, see the Switch Configs documentation.</p> <p> In full resolution modes, the Switch Mode parameter selects the number of channels to be used. Full Resolution Switch Modes </p>  <p>Hot Tip</p> <p>The Switch Mode can only be changed when not connected to a receiver. The top right corner of the lua script will show a <code>-</code> if you're not connected.</p>","title":"Switch Mode"},{"location":"quick-start/transmitters/lua-howto/#model-match","text":"<p>Model Match is used to prevent accidentally selecting the wrong model in the handset and flying with an unexpected handset or ELRS configuration. Setting this to <code>On</code> while a receiver is connected will make that receiver only connect with the current Receiver ID. Setting it to <code>Off</code> will allow a connection with any bound receiver (including those using a Bind Phrase). Both sides of the connection must agree on their Model Match setting. For a detailed explanation of how this restricts connections see Model Match. The current Receiver ID is shown after the option value.</p>","title":"Model Match"},{"location":"quick-start/transmitters/lua-howto/#tx-power","text":"<p>  </p> <p>TX Power is a folder, press ENTER to enter the TX Power settings and use RTN/EXIT to exit the folder.</p> <ul> <li> <p><code>Max Power</code> sets the maxumum power level your TX will transmit at. Selecting a power level higher or lower than your TX supports will revert to the closest supported level. The options are <code>10, 25, 50, 100, 250, 500, 1000 &amp; 2000</code> mW. If Dynamic Power is set to <code>Off</code> this is the power level your TX always uses. </p> </li> <li> <p><code>Dynamic</code> enables the Dynamic Power feature. <code>Off</code> means that the TX will transmit at Max Power at all times. <code>Dyn</code> means the TX will dynamically lower power to save energy when maximum power is not needed. The options <code>AUX9, AUX10, AUX11, AUX12</code> indicate that the TX can be changed from max power to dynamic power by changing the position of a switch. where switch HIGH (&gt;1500us) = dynamic power, switch LOW (&lt;1500us) = max power. For more information, Dynamic Transmit Power provides a deeper dive on the algorithm and usage.</p> </li> <li> <p><code>Fan Thresh</code> sets the power level the Fan should activate, e.g. if set to 100mW, then the fan should spin up if you set <code>Max Power</code> to 100mW with <code>Dynamic</code> set to OFF after a short delay. The fan will continue running for some time even after the power level goes below the threshold. Not all modules have a Fan header that benefits from the setting. . Default fan threshold is 250mW.</p> </li> </ul>","title":"TX Power"},{"location":"quick-start/transmitters/lua-howto/#vtx-administrator","text":"<p> </p> <p>VTX Administrator allows you to change your VTX settings directly from your radio, and have those VTX settings be applied to any receiver you connect to. The VTX settings are sent every time a new connection is acquired, or when <code>[Send VTX]</code> is pressed. VTX Administrator will only send data when disarmed</p> <ul> <li> <p><code>Band</code> sets the VTX band, the options are <code>Off, A, B, E, F, R &amp; L</code>, the standard analog FPV bands. <code>Off</code> means that VTX Administrator will not adjust any VTX settings.</p> </li> <li> <p><code>Channel</code> sets the VTX channel, the options are <code>1, 2, 3, 4, 5, 6, 7 &amp; 8</code> which are the standard channels in the above bands.</p> </li> <li> <p><code>Pwr Lvl</code> sets the VTX power by index, the options are <code>-, 1, 2, 3, 4, 5, 6, 7, &amp; 8</code> which are the power levels that your VTX can do. Refer to your VTX table settings on the flight controller for the exact power levels. For example a VTX may have 1 = 25mW, 2 = 100mwW, 3 = 200mW, 4 = 500mW.</p> </li> <li> <p><code>Pitmode</code> the options are <code>On &amp; Off</code> which allow you to quickly switch into or out of pitmode</p> </li> <li> <p>Finally pressing the <code>[Send VTX]</code> button sends the configured settings to the receiver and on to the VTX. These settings are also sent every time a connection is established.</p> </li> </ul>","title":"VTX Administrator"},{"location":"quick-start/transmitters/lua-howto/#wifi-connectivity","text":"<p> </p> <p>This section contains all the WiFi-related functions.</p> <ul> <li> <p><code>Enable WiFi</code> will activate Tx module WiFi mode for updating via WiFi (if the Tx Module has WiFi Capabilities). Visit this page for instructions on how the updating process works.</p> </li> <li> <p><code>Enable Rx WiFi</code> will put the bound and connected receiver into WiFi mode to facilitate updating via WiFi (if the receiver has WiFi capabilities).</p> </li> <li> <p><code>Enable Backpack WiFi</code> will put the Tx Backpack into WiFi mode (available only to TX modules with backpacks connected and updated to the new Backpack firmwares).</p> </li> <li> <p><code>Enable VRx WiFi</code> will put the VRx Backpack that is bound and connected to the onboard TX Backpack into WiFi mode to facilitate updating via WiFi.</p> </li> </ul>","title":"WiFi Connectivity"},{"location":"quick-start/transmitters/lua-howto/#bind","text":"<p> </p> <p>Pressing the <code>[Bind]</code> button activates binding mode for traditional binding. This does nothing for users who have configured a bind phrase and is not needed. For more information check out this page on binding.</p>","title":"Bind"},{"location":"quick-start/transmitters/lua-howto/#ble-joystick-esp32-txes-only","text":"<p> </p> <p>Pressing the <code>[BLE Joystick]</code> selection activates BluetoothLE Joystick mode which allows connection to simulators through the bluetooth of your computer. Reboot or change models to exit this mode.</p>","title":"BLE Joystick (ESP32 TXes Only)"},{"location":"quick-start/transmitters/lua-howto/#other-devices","text":"<p>The Other Devices folder, if present, allows changing the configuration of other connected devices, such as the current receiver. Options can include Telemetry Power, Diversity Mode, and the Loan Model features.</p>","title":"Other Devices"},{"location":"quick-start/transmitters/lua-howto/#recommendations","text":"<ul> <li> <p>For racing where maximum performance is a must, the <code>500Hz</code> modes or faster, with the <code>Race</code> Telemetry mode, is ideal. <code>Hybrid</code> Switch Mode is also good here.</p> </li> <li> <p>For freestyle and general everyday flying, you may use the <code>250Hz</code> modes or faster, with the <code>Std</code> Telemetry mode. Switch Mode doesn't matter as much here. Select what's appropriate for your Flight Mode settings.</p> </li> <li> <p>For fixed wings, we recommend using <code>100Hz Full Res</code>, together with either <code>Std</code> or your choice of Telemetry Ratio. Switch Mode will depend greatly on how many full resolution channels you intend to use.</p> </li> </ul>","title":"Recommendations"},{"location":"quick-start/transmitters/lua-howto/#troubleshooting-the-lua-script","text":"","title":"Troubleshooting the Lua Script"},{"location":"quick-start/transmitters/lua-howto/#expresslrs-lua-script-is-stuck-at-loading","text":"<p>Go back to the Radio Setup Guide and make sure your radio is prepped up for ExpressLRS.</p> <p>Also make sure your module has been flashed with v2.0 firmware. V2 Lua for V2.0-flashed modules, V1 Lua for v1.x-flashed modules (including modules fresh from factory; except the new OLED-equipped NamimnoRC modules and the Happymodel ES24TX Pro full-size module).</p> <p>For newly-acquired ExpressLRS modules, flashing via USB is the recommended update method.</p>","title":"ExpressLRS Lua Script is stuck at <code>Loading...</code>"},{"location":"quick-start/transmitters/lua-howto/#i-cant-change-the-switch-mode","text":"<p>Changing switch modes requires that TX module and Receiver aren't connected to each other (no C in the top right corner of the Lua Script). Power off the receiver first, change the Switch Mode from the Lua script, then power up the receiver. The Switch Mode should then apply.</p>","title":"I can't change the Switch Mode!"},{"location":"quick-start/transmitters/lua-howto/#i-cannot-change-my-packet-rate-to-f1000","text":"<p>F1000 requires higher than 400K baud rates. First update your baud rate setting either in the Model Setup menu or in the System Menu -&gt; Hardware, reboot your radio to ensure that the baud rate setting got applied and then change the Packet Rate.</p> <p>Do note that not every handset is capable of higher than 400K baud rates. See the Radio Setup Guide for the details.</p>","title":"I cannot change my Packet Rate to F1000!"},{"location":"quick-start/transmitters/lua-howto/#i-cannot-change-to-full-resolution-rates","text":"<p>As Full Resolution Rates calls for an entirely different Switch Modes, you need to first disconnect the Receiver and the TX module from each other, like how you would change Switch Modes. Power down the receiver, change the Packet Rate to the Full Resolution modes, select your Switch Mode scheme and then power up the receiver or the aircraft.</p>","title":"I cannot change to Full Resolution Rates!"},{"location":"quick-start/transmitters/lua-howto/#vtx-admin-is-not-working-but-i-can-change-vtx-channels-via-osd-menu","text":"<p>As VTX Admin depends on MSP which then depends on Telemetry, ensure that you have Telemetry enabled on your FC Configuration and that you are getting more than 10 Telemetry Sensors on your Radio (Model Setup -&gt; Telemetry page; Delete and Discover New sensors to refresh the sensor list.)</p> <p>Also make sure Telem Ratio is not Off.</p>","title":"VTX Admin is not working but I can change VTX channels via OSD Menu."},{"location":"quick-start/transmitters/lua-howto/#there-is-no-c-on-the-top-right-corner-and-im-not-getting-telemetry-in-my-radio","text":"<p>Make sure Telem Ratio is not set to <code>Off</code>.</p> <p>Set it to <code>Std</code>, or to any other value other than <code>Off</code>.</p>","title":"There is no C on the top right corner, and I'm not getting Telemetry in my radio!"},{"location":"quick-start/transmitters/lua-howto/#on-v1x-i-can-choose-2w-on-the-lua-but-i-cannot-do-that-anymore-what-gives","text":"<p>This means your module cannot go that high or that low. The power levels you can select on the new Lua script is based off the power levels your module supports.</p> <p>This also applies to other options like <code>Enable Backpack WiFi</code> or <code>BLE Joystick</code>. If your module doesn't support any of these features, it won't show up on the Lua Script.</p>","title":"On v1.x, I can choose 2W on the Lua, but I cannot do that anymore. What gives?"},{"location":"quick-start/transmitters/rm-internal/","text":"<p></p>","title":"Internal RadioMaster"},{"location":"quick-start/transmitters/rm-internal/#flashing-via-edgetx-passthrough","text":"<p>This method is the result of the collaborative effort between EdgeTX, RadioMaster and ExpressLRS.</p>  <p>Targets:</p> <ul> <li><code>RadioMaster_Zorro_2400_TX_via_ETX</code></li> <li><code>RadioMaster_TX16S_2400_TX_via_ETX</code></li> </ul> <p>Device Category: <code>RadioMaster 2.4 GHz</code></p> <p>Device: <code>RadioMaster Zorro 2400 TX</code>, <code>RadioMaster TX16S 2400 TX</code></p> <p>Before you start, ensure you have the latest EdgeTX firmware version on your Zorro or TX16S MK2. You need at least EdgeTX 2.7.0 (f79978b) or EdgeTX 2.7.1 (a55aff0). The Zorro often comes with an earlier EdgeTX 2.7.0 version (2bdd4974) which results in unsuccessful flashing.</p> <p>With your handset turned on, connect a USB data cable on the USB data port of the Radio. Select <code>USB Serial(Debug)</code> or <code>USB Serial(VCP)</code> in the option window that pops up. </p> <p></p> <p></p> <p>Windows users should check Device Manager and make sure your device is being detected as STMicroelectronics Virtual COM Port device. </p> <p></p> <p>If not and you're seeing a bunch of Yellow Warning icons for the RadioMaster Serial Port, install the drivers from here. Windows 10 users can use the <code>VCP_V1.5.0_Setup_W7_x64_64bits</code> executable.</p> <p>Using the ExpressLRS Configurator, select the appropriate version and the correct Device Target and set the Flashing method to <code>EdgeTXPassthrough</code>.</p> <p></p> <p>Select the <code>Regulatory Domain</code> appropriate for your location.</p> <p>Set your Binding Phrase (optional) and other relevant Firmware Options like Local WiFi Network SSID and password.</p> <p>Once that's done, click Build and Flash and wait for the Success banner from the Configurator.</p> <p></p> <p>Unplug the USB and verify with the ExpressLRS Lua Script (right-click, save as) you have a working internal module and that you have updated to the version you have selected.</p> <p></p>","title":"Flashing via EdgeTX Passthrough"},{"location":"quick-start/transmitters/rm-internal/#flashing-via-wifi","text":"<p>Targets:</p> <ul> <li><code>RadioMaster_Zorro_2400_TX_via_WIFI</code></li> <li><code>RadioMaster_TX16S_2400_TX_via_WIFI</code></li> </ul> <p>Device Category: <code>RadioMaster 2.4 GHz</code></p> <p>Device: <code>RadioMaster Zorro 2400 TX</code>, <code>RadioMaster TX16S 2400 TX</code></p> <p></p>","title":"Flashing via Wifi"},{"location":"quick-start/transmitters/rm-internal/#method-1","text":"<p>With the correct target selected and Firmware Options set, Build your firmware using the ExpressLRS Configurator.</p> <p></p> <p>Once it's done, it should open the Target folder for you where the <code>RadioMaster_Zorro_2400_TX-&lt;version&gt;.bin</code> or <code>RadioMaster_TX16S_2400_TX-&lt;version&gt;.bin</code> file is. Do not close this window so you can easily locate the correct file to upload to the module.</p> <p>Execute the ExpressLRS lua script by pressing \"System Menu\" in your radio and then under Tools, select <code>ExpressLRS</code>. If the ExpressLRS Lua Script is not in the list, download it from here (right-click, save as) and save it to your Radio's <code>/Scripts/Tools</code> folder.</p> <p></p> <p>Select WiFi Connectivity from the Lua script and then select Enable WiFi. Press OK once more to activate the WiFi on the Tx Module. Connect to the Access Point the module will create called <code>ExpressLRS TX</code>, with the password being <code>expresslrs</code>.</p> <p></p>  <p></p>  <p>Using your browser, navigate to the correct page (typically http://10.0.0.1/) and it should show an upload form (you will have to scroll down a bit). You can drag-and-drop the <code>RadioMaster_Zorro_2400_TX-&lt;version&gt;.bin</code> or <code>RadioMaster_TX16S_2400_TX-&lt;version&gt;.bin</code> file that the ExpressLRS Configurator created. You can also click the <code>Choose File</code> button and navigate to the folder where the firmware was created. Ensure that you have selected the correct firmware file and click <code>Update</code>.</p> <p></p> <p>Once the file is uploaded, a pop-up confirmation will show up.</p> <p></p> <p>Wait for the Lua script screen to close the \"WiFi Running\" screen and your module should be updated now.</p> <p>Verify the version and hash in the main screen of ExpressLRS Lua script (you will first need to close it and relaunch the script).</p> <p>Join Local Network</p> <p>You can configure Home Network SSID and Password if you chose not to use ExpressLRS Configurator to set them. Once these are set, you can use the next two methods below.</p> <p></p>","title":"Method 1"},{"location":"quick-start/transmitters/rm-internal/#method-2","text":"<p>With the correct target selected and Firmware Options set, Build your firmware using the ExpressLRS Configurator.</p> <p></p> <p>Once it's done, it should open the Target folder for you where the <code>RadioMaster_Zorro_2400_TX-&lt;version&gt;.bin</code> or <code>RadioMaster_TX16S_2400_TX-&lt;version&gt;.bin</code> file is. Do not close this window so you can easily locate the correct file to upload to the module.</p> <p>Using the ExpressLRS Lua Script (right-click, save as), select <code>Wifi Connectivity</code> then choose <code>Enable WiFi</code> and if you have flashed your Tx Module with your Home WiFi Network details or have set it in Join Network section of the Update Page, it will connect to the local network automatically.</p> <p></p> <p>Using your browser, navigate to http://elrs_tx.local and the WiFi Update page should show up. Scroll down towards the Firmware Update section, as shown below:</p> <p></p> <p>Drag-and-drop the <code>RadioMaster_Zorro_2400_TX-&lt;version&gt;.bin</code> or <code>RadioMaster_TX16S_2400_TX-&lt;version&gt;.bin</code> file created by the ExpressLRS Configurator into the Choose File field, or manually navigate to the Folder by clicking the <code>Choose File</code> button. Once the correct file is selected, click the <code>Update</code>. Wait for the process to complete, and once the file is uploaded, a pop-up confirmation will show up.</p> <p></p> <p>Wait for the Lua script screen to close the \"WiFi Running\" screen and your module should be updated now.</p> <p>Verify the version and hash in the main screen of ExpressLRS Lua script (you will first need to close it and relaunch the script).</p>","title":"Method 2"},{"location":"quick-start/transmitters/rm-internal/#method-3","text":"<p>Using the ExpressLRS Lua Script (right-click, save as), select <code>Wifi Connectivity</code> then choose <code>Enable WiFi</code> and if you have flashed your Tx Module with your Home WiFi Network details or have set it in Join Network section of the Update Page, it will connect to the network automatically.</p> <p></p> <p>Using the ExpressLRS Configurator, select the correct Target and set your Firmware Options. Click Build and Flash and wait for the compile process to complete. </p> <p></p> <p>You should see a section as pictured below and the Success message marking the update process complete.</p> <p></p> <p>Wait for the Lua script screen to close the \"WiFi Running\" screen and your module should be updated now.</p> <p>Verify the version and hash in the main screen of ExpressLRS Lua script (you will first need to close it and relaunch the script).</p>","title":"Method 3"},{"location":"quick-start/transmitters/siyifm30/","text":"<p></p> <p>Targets:</p> <ul> <li>FM30 TX Module<ul> <li><code>FM30_TX_via_STLINK</code> (Initial Flash)</li> <li><code>FM30_TX_via_DFU</code> (Updating)</li> </ul> </li> <li>FR Mini as TX Module<ul> <li><code>FM30_RX_MINI_AS_TX_via_STLINK</code> (Initial Flash)</li> <li><code>FM30_RX_MINI_AS_TX_via_UART</code> (Updating)</li> </ul> </li> </ul>","title":"Siyi FM30"},{"location":"quick-start/transmitters/siyifm30/#fm30-initial-flash","text":"<p>The only way to flash the FM30 series is using STLINK. Luckily, their pads are pretty generous on the TX and easy to connect. Note this is a one-way process, there is no returning to the stock firmware after flashing.</p> <p></p> <ul> <li>The TX module is opened by removing the four screws on the corners of the case using a small phillips screwdriver, then two further screws to remove the circuit board once inside.</li> <li>Connect wires to SWDIO, SWCLK, NRST, and GND to the header points shown in red above on the TX. Attach 5V to the VCC pad, not the 3.3V pad!</li> <li>Connect the other side to an STLINK programmer</li> <li>Flash using the <code>FM30_TX_via_STLINK</code> target</li> <li>After the flashing procedure, it is safe to leave the STLINK device connected to test that the firmware is operational, but uplug the USB connection before inserting the module into your handset for testing.</li> <li>Be sure your handset has the External Module type set to CRSF. See the general Troubleshooting section for other ways to determine your module is flashed and ready for flying.</li> </ul>","title":"FM30 Initial Flash"},{"location":"quick-start/transmitters/siyifm30/#fm30-updating","text":"<p>Updating the TX is a lot easier and can be done via DFU without needing an STLINK.</p> <ul> <li>Remove the module from your handset. \u26a0\ufe0f DO NOT plug in USB while the module is still in the handset. There is no protection to prevent connecting the USB's power directly to your handset.</li> <li>Hold the button labeled \"Bind\" on the FM30 TX. Plug in USB. There should be a \"ExpressLRS DFU bootloader\" device in Windows Debvice Maanger. If not, the STM32 DFU drivers may need to be installed.</li> <li>Flash using the <code>FM30_TX_via_DFU</code> target</li> <li>Note that the process always reports failure but this occurs after flashing, so check for the message \"File downloaded successfully\", not what follows it: <pre><code>Download        [======================== ]  97%        46080 bytes\nDownload        [=========================] 100%        47340 bytes\nDownload done.\nFile downloaded successfully\nInvalid DFU suffix signature\nA valid DFU suffix will be required in a future dfu-util release!!!\nError during download get_status\n*** [upload] Error 74\n</code></pre></li> </ul>","title":"FM30 Updating"},{"location":"quick-start/transmitters/siyifm30/#fr-mini-rx-as-tx","text":"<p>The RX has the same RF components as the TX does, making it a possible candidate for a small ~200mW TX module. Wiring to the JR Module Bay requires only 3 pins (JR pins are starting from the top down)</p> <p>JR Module Pin | FR Mini Pin | Description |--|--|--| | CPPM | None | | | Heartbeat | None | | | VMain | VIN | Use the VIN pin on the pinheader (middle pin), 3.3-3.4V. Do not connect directly to handset battery voltage-- this will burn out the 3.3V regulator even at 10mW output. Use either a 3.3V boost converter (to raise voltage from 1S provided by the handset) or 3.3V buck converter (to lower 2S or 3S handset voltage). The LDO has a very small dropout voltage, so there's not much benefit to bypassing this soldering directly to the VDD pad on the programming header. Expect over 250mA current draw in practice at 100mW. | | GND | GND | Use either the GND pin on the pinheader (outermost pin) or the GND pad on the programming header. | SPORT | TX2 | Use the TX2 pad on the receiver and remove the 4.7K pullup resistor. Without removing the resistor, the module will work okish as a transmitter, but firmware updates through OpenTX will fail with NoSync</p> <p></p>","title":"FR Mini RX as TX"},{"location":"quick-start/transmitters/siyifm30/#fr-mini-rx-as-tx-initial-flashing","text":"<p>The only way to flash the FR Mini is using STLINK. Note this is a one-way process, there is no returning to the stock firmware after flashing. The flashing procedure is similar to the FM30 TX module flashing listed above but using these pads on the receiver. Use the <code>FM30_RX_MINI_AS_TX_via_STLINK</code> target for initial flashing.</p> <p></p>","title":"FR Mini RX as TX Initial Flashing"},{"location":"quick-start/transmitters/siyifm30/#fr-mini-rx-as-tx-updating","text":"<p>Updates are done through OpenTX's built-in firmware flashing tool.</p> <ul> <li>Build the firmware using Configurator and selecting the <code>FM30_RX_MINI_AS_TX_via_UART</code> target. The build process will generage a <code>firmware.elrs</code> file.</li> <li>Copy this file to the handset <code>FIRMWARE/</code> directory on the sd card.</li> <li>Flash the firmware to the module using OpenTX</li> <li>Hold the MENU/SYS button on the handset to open the system menu</li> <li>Press PAGE to navigate to the SD card browser</li> <li>Scroll down to the FIRMWARE directory, and press ENTER</li> <li>Find <code>firmware.elrs</code> and long press the ENTER key to open the context menu</li> <li>Select <code>Flash Ext. ELRS</code> from the menu</li> </ul>","title":"FR Mini RX as TX Updating"},{"location":"quick-start/transmitters/siyifm30/#troubleshooting-flashing","text":"","title":"Troubleshooting Flashing"},{"location":"quick-start/transmitters/siyifm30/#unable-to-connect-to-target-device","text":"<p>If the flash fails with \"Unable to connect to target device\" (not \"No STLINK found!\") it is likely your STLINK clone does not have the RST line connected, but you can trigger the needed reset manually with a little more effort. The reason this is needed is that SIYI have disabled \"Software Reset\" to protect you from stealing their firmware binary.</p> <ul> <li>Verify your wiring</li> <li>Make sure the TX board is powering up (the LEDs light up)</li> <li>Use the STM32CubeProgrammer or STLINK GUI to connect see next step.</li> <li>Before you press CONNECT. Short the RST line from the TX to GND. Press CONNECT and quickly remove the wire from the GND pad.</li> <li>If it works, the GUI will tell you that the board is readout protected and must be disabled. Do this.</li> </ul>","title":"\"Unable to connect to target device\""},{"location":"quick-start/transmitters/siyifm30/#flash-loader-run-error","text":"<p>Before both the TX and RX can be flashed using the <code>st-flash</code> utility used by PlatformIO on Linux, the STM32 chip must have its \"Readout Protection\" (RDP) disabled, which was set by SIYI at the factory to make our lives more difficult. The windows flashing utility usually automtically disables the this, but the Linux utility does not. If you do not disable readout protection you'll get this cryptic error when flashing: <pre><code>2021-07-06T21:08:42 ERROR flash_loader.c: flash loader run error\n2021-07-06T21:08:42 ERROR common.c: stlink_flash_loader_run(0x8000000) failed! == -1\nstlink_fwrite_flash() == -1\n</code></pre> The only way I know of to disable the RDP is to use the STM32CubeProgrammer for Linux, or use a Windows VM / machine to use the ST-LINK.exe GUI / CLI to clear the RDP.</p> <p></p> <ul> <li>Click the \"Connect\" button to connect to the ST-LINK device. You'll probably get a popup error Error: Data read failed. That's normal. If it says it can't connect or no device is present, you'll have to figure that out first.</li> <li>Click the \"OB\" button on the left.</li> <li>Expand the \"Read Out Protection\" section.</li> <li>Select RDP = \"AA\"</li> <li>Click the \"Apply\" button at the bottom.</li> <li>You should get a message indicating the \"Option bytes successfully programmed\". If so you're good to go. Click \"Disconnect\" at the top and flash from PlatformIO now. You can also flash directly from this GUI if you have the binaries and know their target addresses.</li> </ul>","title":"\"flash loader run error\""},{"location":"quick-start/transmitters/tx-prep/","text":"<p></p>","title":"Preparing your Radio"},{"location":"quick-start/transmitters/tx-prep/#radio-firmware-with-crsfshotmixer-sync","text":"<p>ExpressLRS requires CRSFShot or Mixer Sync to ensure full support for high packet rates. Starting with OpenTX-2.3.12, <code>CRSFshot</code> has been fully implemented, and thus you will have to update your OpenTX radio to these newer versions.</p> <p>The ExpressLRS Devs, however, highly recommends EdgeTX for the best experience and compatibility. There are options in EdgeTX that old and new Radio handsets will benefit from, like the One Bit sample mode for the older Frsky Radios (X9D, QX7) and Mega Bauds (Baudrates higher than 400K). </p>","title":"Radio Firmware with CRSFShot/Mixer Sync"},{"location":"quick-start/transmitters/tx-prep/#radio-setup","text":"","title":"Radio Setup"},{"location":"quick-start/transmitters/tx-prep/#serial-baud-rate","text":"<p>The Baud Rate is the speed to which (in this instance) the Transmitter module and the Radio Handset communicate. It is measured in bits per second. Common baud rates include 115200bps and 400000bps.</p> <p>Faster or higher baud rate means that the module and radio can talk much faster, further lowering the end-to-end latency of the system. However, not all radio handsets or transmitter modules are capable of higher baud rate as this is highly dependent on the hardware.</p> <p>Depending on the firmware that is running on your radio handset, you can change the baud rate setting to better suit your setup. This setting can be found in the System Menu -&gt; Hardware page, under the Max Bauds (earlier OpenTX) or Baudrate (EdgeTX; recent OpenTX). On EdgeTX 2.7.0 and later, External RF modules now uses their own Baudrate setting (see Model Setup section below). Internal CRSF Modules will still use the Baudrate setting in the System Menu -&gt; Hardware page.</p>  <p></p> Baudrate setting on Colored Screen Radios   <p></p> Baudrate setting on Older Radios  <p>The 500Hz Packet Rate requires at least 400K Baud Rate setting on the Radio handset. </p> <p>The F1000 Packet Rate requires more than 400K Baud Rate setting on the Radio handset.</p> <p>Radios such as the Frsky QX7, X10/S, X12 will require either the Crossfire Mod or the OneBit Sample mode (found just before the ADC Filter setting in EdgeTX System Menu -&gt; Hardware page) if a 400K or higher Baud Rate is desired. The Taranis X9D(+) has proven to be finicky even with the default 400K Baud Rate setting (see Troublshooting the X9D) and could use the OneBit Sample Mode as well.</p>  <p>Note</p> <p>When Radio Baud Rate is set at 115200, 250Hz will be the maximum Packet Rate you can use.</p>  <p>As this setting also involves the module, it should be noted that you must also consider the type of module you are using with the radio. For instance, the R9M 2018 cannot reliably run at 400K Baud Rate setting and will require the Resistor Mod first. If you can run your Radio Handset at a lower 115200 Baud Rate, then you don't have to do this Mod. STM-based modules like the R9M 2019, Ghost, Happymodel ES915TX or the Gen1 No OLED NamimnoRC Flash and Voyager modules can run at 1.87M Baud Rate. ESP-based modules like the Happymodel ES24TX, BetaFPV Nano &amp; Micro or the Axisflying Thor can run up-to 3.75M or even 5.25M.</p> <p>Be warned though. Just because you can doesn't mean you should. If you're experiencing constant Telemetry Lost/Recovered even nearby and/or that the Lua Script fails to load properly, then it's a sign your radio and/or module cannot run the selected Baud Rate. Lower it down a notch or settle with 400K Baud Rate.</p>","title":"Serial Baud Rate"},{"location":"quick-start/transmitters/tx-prep/#adc-filter","text":"<p>The ADC filter is enabled by default in OpenTX and is known to cause issues with RC Command data. This can result in \"jagged\" RC command responses in black box logs, caused by sequential RC packets that have the same command value (which were \"smoothed\" by the ADC filter). We recommend turning the ADC filter OFF in OpenTX/EdgeTX.</p> <p>With EdgeTX 2.7 or newer, you can set this per-model (Global, On, Off) as this is helpful on Fixed Wing models equipped with PWM receivers connected to slower servos.</p>","title":"ADC Filter"},{"location":"quick-start/transmitters/tx-prep/#model-setup","text":"","title":"Model Setup"},{"location":"quick-start/transmitters/tx-prep/#rf-protocol","text":"<p>Note</p> <p>If you're using an External ExpressLRS Module, make sure the Internal RF Module is OFF.</p> <p>If your Radio has an Internal ExpressLRS Module, and you want to use it instead of an external module, then set External RF Module to OFF, and then set the Internal RF Module to CRSF Protocol.</p>  <p>ExpressLRS uses the CRSF serial protocol to communicate between the transmitter and the TX module. To set this up, enter into your model settings, and on the Model Setup tab, enable your External RF and select CRSF as the protocol:</p>  <p></p>   <p></p>  <p>For Radios equipped with Internal ExpressLRS modules, like the RadioMaster Zorro, RadioMaster TX16S MK2, RadioMaster TX12 MK2, Jumper T-lite V2, Jumper T-pro or the BetaFPV Lite Radio 3 Pro, set the Internal RF Module to CRSF Protocol and the External RF Module to OFF if you want to use the Internal ExpressLRS module instead of an external one. If for some reason, you cannot find the CRSF Protocol under the Internal RF Modes, set the <code>Internal Module Type</code> to CRSF via your Radio's <code>System Menu -&gt; Hardware</code> page.</p>  <p></p>   <p></p>   <p>Note</p> <p>iFlight Commando 8 is NOT using an internal RF module for its ExpressLRS units, unlike the RadioMaster Zorro, RadioMaster TX16S MK2, RadioMaster TX12 MK2, Jumper T-lite V2, Jumper T-pro or the BetaFPV Lite Radio 3 Pro.</p> <p>Set the Internal RF module to Off, and set the External RF module to CRSF protocol, as any External RF module requires.</p>","title":"RF Protocol"},{"location":"quick-start/transmitters/tx-prep/#switches-and-aux-channels","text":"<p>By default, a fresh model do not have any Aux Channels configured (Aux channels start from Ch5, with the first 4 Channels assigned to your joysticks). If moving any of the switches in your radio doesn't affect your Modes in Betaflight or INAV, this is one of the main reasons. So let's get this sorted out!</p> <p>On the current model, navigate to the Mixes Page (Model Menu-&gt; Mixes). You will need to assign switches to the remaining channels, as shown in the following images.</p>  <p></p>   <p></p>  <p>Select the Channel, long press Enter and select Edit. You can name this channel however you want to remind you of its purpose. Then under Source, set it to the Switch you'd want to use for this channel. An example would be for CH5, which will be your Arming switch, you'd want to choose a 2-position switch.</p>  <p></p>   <p></p>  <p>Once you're done, press the RTN key to go back to the Mixes page. Do the same to the rest of the Channels you need.</p> <p>Now that your radio is set, you can now proceed with flashing ExpressLRS!</p>","title":"Switches and Aux Channels"},{"location":"quick-start/transmitters/vantac-lite/","text":"<p></p>","title":"Vantac Lite"},{"location":"quick-start/transmitters/vantac-lite/#flashing-via-wifi","text":"<p>Target: <code>Vantac_Lite_2400_TX_via_WIFI</code></p> <p>Device Category: <code>Vantac 2.4 GHz</code></p> <p>Device: <code>Vantac Lite 2400 TX</code></p> <p></p>","title":"Flashing via Wifi"},{"location":"quick-start/transmitters/vantac-lite/#method-1","text":"<p>With the correct target selected and [Firmware Options] set, Build your firmware using the ExpressLRS Configurator.</p> <p></p> <p>Once it's done, it should open the Target folder for you where the <code>Vantac_Lite_2400_TX-&lt;version&gt;.bin</code> file is. Do not close this window so you can easily locate the correct file to upload to the module.</p> <p>The next steps will require the ExpressLRS Lua Script (right-click, save as). Download the ExpressLRS lua script and save it to your Radio's <code>/Scripts/Tools</code> folder. Insert/attach your module into your module bay and make sure it's not loose and there's proper connection with the radio (see the [Radio Preparation] page). Execute the ExpressLRS lua script by pressing \"System Menu\" in your radio and then under Tools, select <code>ExpressLRS</code>.</p> <p> </p> <p>If the script is stuck at <code>Loading...</code>, then there's a chance your Radio External RF module is not set to CRSF or that your module is not well-connected to the module bay pins.</p> <p></p> <p>Select WiFi Connectivity from the Lua script and then select Enable WiFi. Press OK once more to activate the WiFi on the Tx Module. Connect to the Access Point the module will create called <code>ExpressLRS TX</code>, with the password being <code>expresslrs</code>.</p>  <p></p>  <p>Using your browser, navigate to the correct page (typically http://10.0.0.1/) and it should show an upload form (you will have to scroll down a bit). You can drag-and-drop the <code>Vantac_Lite_2400_TX-&lt;version&gt;.bin</code> file that the ExpressLRS Configurator created. You can also click the <code>Choose File</code> button and navigate to the folder where the firmware was created. Ensure that you have selected the correct firmware file and click <code>Update</code>.</p> <p>Once the file is uploaded, a pop-up confirmation will show up. Wait for the Lua script screen to close the \"WiFi Running\" screen and your module should be updated now.</p> <p>Verify the version and hash in the main screen of ExpressLRS Lua script.</p> <p>Join Local Network</p> <p>You can configure Home Network SSID and Password if you chose not to use ExpressLRS Configurator to set them. Once these are set, you can use the next two methods below.</p> <p></p>","title":"Method 1"},{"location":"quick-start/transmitters/vantac-lite/#method-2","text":"<p>With the correct target selected and [Firmware Options] set, Build your firmware using the ExpressLRS Configurator.</p> <p></p> <p>Once it's done, it should open the Target folder for you where the <code>Vantac_Lite_2400_TX-&lt;version&gt;.bin</code> file is. Do not close this window so you can easily locate the correct file to upload to the module.</p> <p>Using the ExpressLRS Lua Script (right-click, save as), select <code>Wifi Connectivity</code> then choose <code>Enable WiFi</code> and if you have flashed your Tx Module with your Home WiFi Network details or have set it in Join Network section of the Update Page, it will connect to the local network automatically.</p> <p>Using your browser, navigate to http://elrs_tx.local and the WiFi Update page should show up. Scroll down towards the Firmware Update section, as shown below:</p> <p></p> <p>Drag-and-drop the <code>Vantac_Lite_2400_TX-&lt;version&gt;.bin</code> file created by the ExpressLRS Configurator into the Choose File field, or manually navigate to the Folder by clicking the <code>Choose File</code> button. Once the correct file is selected, click the <code>Update</code>. Wait for the process to complete, and the module will reboot (~1min).</p> <p>Verify the version and hash in the main screen of ExpressLRS Lua script.</p>","title":"Method 2"},{"location":"quick-start/transmitters/vantac-lite/#method-3","text":"<p>Using the ExpressLRS Lua Script (right-click, save as), select <code>Wifi Connectivity</code> then choose <code>Enable WiFi</code> and if you have flashed your Tx Module with your Home WiFi Network details or have set it in Join Network section of the Update Page, it will connect to the network automatically.</p> <p>Using the ExpressLRS Configurator, select the correct Target and set your [Firmware Options]. Click Build and Flash and wait for the compile process to complete. You should see a section as pictured below and the Success message marking the update process complete.</p> <p></p> <p></p> <p>Verify the version and hash in the main screen of ExpressLRS Lua script.</p>","title":"Method 3"},{"location":"quick-start/transmitters/vantac-lite/#flashing-via-usbuart","text":"<p>Target: <code>Vantac_Lite_2400_TX_via_UART</code></p> <p>Device Category: <code>Vantac 2.4 GHz</code></p> <p>Device: <code>Vantac Lite 2400 TX</code></p> <p></p> <p>Attach a USB-C Data Cable to your module and Computer. Windows users might have to install CH340 Windows Drivers to ensure the device is properly detected and initialized. For other Operating Systems, head to this site to download your needed drivers.</p> <p>Using the ExpressLRS Configurator with the correct Target selected and [Firmware Options] set, hit Build &amp; Flash. Wait for the process to finish, and you should be greeted with the \"Success\" message.</p> <p></p> <p>Verify the version and hash in the main screen of ExpressLRS Lua script.</p>","title":"Flashing via USB/UART"},{"location":"quick-start/transmitters/voyager900/","text":"<p></p>","title":"NamimnoRC Voyager"},{"location":"quick-start/transmitters/voyager900/#flashing-via-wifi","text":"<p>Target: <code>NamimnoRC_Voyager_900_TX_via_WiFi</code></p> <p>Device Category: <code>NamimnoRC VOYAGER 900 MHz</code></p> <p>Device: <code>NamimnoRC VOYAGER 900 TX</code></p> <p></p>","title":"Flashing via Wifi"},{"location":"quick-start/transmitters/voyager900/#method-1","text":"<p>With the correct target selected and Firmware Options set, Build your firmware using the ExpressLRS Configurator.</p> <p></p> <p>Once it's done, it should open the Target folder for you where the <code>firmware.elrs</code> file is. Do not close this window so you can easily locate the correct file to upload to the module.</p> <p>These Tx Modules are STM32-based so they require a separate ESP \"backpack\" device for Wifi Flashing/Updating. </p> <p>Attach the module to your JR Bays and power it up. Connect to the <code>ESP Wifi Manager</code> Hotspot that the device will activate. Once connected, navigate to http://elrs_tx.local/.</p> <p></p> <p>Press <code>Configure WiFi</code> and set your home network SSID and password. This will enable your Tx Module to connect to your local home network.</p> <p>On your browser, refresh the http://elrs_tx.local/ and scroll towards the STM32 Firmware Update section, as shown below:</p> <p></p> <p>Drag-and-drop the <code>firmware.elrs</code> file created by the ExpressLRS Configurator into the Choose File field, or manually navigate to the Folder by clicking the Choose File button. You can also upload the <code>firmware.bin</code> file but change the offset to 0x4000.Once the correct file is selected, click the <code>Upload and Flash STM32</code>. Wait for the process to complete, and the module will reboot (~1min). Using the ExpressLRS lua script, verify that you have the latest version.</p>","title":"Method 1"},{"location":"quick-start/transmitters/voyager900/#method-2","text":"<p>These Tx Modules are STM32-based so they require a separate ESP \"backpack\" device for Wifi Flashing/Updating. </p> <p>Attach the module to your JR Bays and power it up. Connect to the <code>ESP Wifi Manager</code> Hotspot that the device will activate. Once connected, navigate to http://elrs_tx.local/.</p> <p></p> <p>Press <code>Configure WiFi</code> and set your home network SSID and password. This will enable your Tx Module to connect to your local home network.</p> <p>Using the ExpressLRS Configurator, select the correct Target and set your Firmware Options. Click Build and Flash and wait for the compile process to complete. You should see a section as pictured below and the Success message marking the update process complete.</p> <p></p> <p></p> <p>Using the ExpressLRS lua script, verify that you have the latest version.</p>","title":"Method 2"},{"location":"quick-start/transmitters/voyager900/#flashing-via-opentx-radio","text":"<p>Note</p> <p>The <code>NamimnoRC_Voyager_900_TX_via_WiFi</code> Target will work for this method too!</p>  <p>Device Category: <code>NamimnoRC VOYAGER 900 MHz</code></p> <p>Device: <code>NamimnoRC VOYAGER 900 TX</code></p> <p></p> <p>With the correct target selected and Firmware Options set, Build your firmware using the ExpressLRS Configurator.</p> <p></p> <p>Once it's done, it should open the Target folder for you where the <code>NamimnoRC_Voyager_900_TX-&lt;version&gt;.elrs</code> file is. Do not close this window so you can easily locate the correct file to copy to your Radio SD Card.</p> <p>Copy the <code>NamimnoRC_Voyager_900_TX-&lt;version&gt;.elrs</code> file into your radio's SD Card <code>/FIRMWARE</code> folder.</p> <p>Once copied, navigate to the <code>/FIRMWARE</code> Folder on your Radio and select/highlight the <code>NamimnoRC_Voyager_900_TX-&lt;version&gt;.elrs</code> file, long-press the Enter key and select <code>Flash external ELRS</code>. Flashing will then commence and after a few seconds, radio should show a <code>Flash Successful</code> message and you're done!</p> <p>Using the ExpressLRS lua script, verify that you have the latest version.</p>","title":"Flashing via OpenTX Radio"},{"location":"quick-start/transmitters/voyager900/#flashing-via-stlink","text":"<p>Target: <code>NamimnoRC_Voyager_900_TX_via_STLINK</code></p> <p>Device Category: <code>NamimnoRC VOYAGER 900 MHz</code></p> <p>Device: <code>NamimnoRC VOYAGER 900 TX</code></p> <p></p> <p>ONLY USE THIS METHOD IF THE FIRMWARE HAS BEEN CORRUPTED </p> <p>Begin by disassembling the module by unscrewing the 4 screws at the rear of the module with a 1.5mm hex wrench. Carefully seperate the parts of the module and detach the cable from the main PCB.</p> <p> </p> <p>Wire your <code>STLink v2</code> to the module's pins as show below:</p> <p></p> <p>With the module connected shown above, and your configuration set, hit Build &amp; Flash in the ExpressLRS Configurator and wait for the process to finish. Once that's done, and the Success Message showing, you can now remove/unsolder the STLink, and re-assemble the module, and put it into your Radio's Module Bay. If the Radio has CRSF selected, the light should turn green meaning the module has communication with your radio.</p> <p>Verification can be done using the ExpressLRS lua script. It should show the Version Number and Hash at the bottom, as well as the options you can set. If it's showing \"Loading\" at the top, check if External Module is set to CRSF for the selected model in your radio, and that internal RF module is set to off. See General Troubleshooting section for other ways to determine your module is flashed and ready for flying.</p>","title":"Flashing via STLink"},{"location":"software/dynamic-transmit-power/","text":"<p></p>","title":"Dynamic Transmit Power"},{"location":"software/dynamic-transmit-power/#description","text":"<p>Dynamic Power allows the TX module to adjust its output power up to the configured power level using the telemetry from the RX. The TX will lower power if the RSSI dBm is far enough above the sensitivity limit and will raise power if it is not, has a low LQ, or has a sudden drop in LQ. Advanced telemetry is not required for this feature, just a non-zero Telemetry Ratio.</p> <p>\u26a0\ufe0f Dynamic Power relies on telemetry. If no telemetry is received while armed, then the power level will be kicked up to the maximum configured power level. \u26a0\ufe0f</p>","title":"Description"},{"location":"software/dynamic-transmit-power/#feature-demo","text":"<ul> <li>Lowering/Raising power on a long-range flight: https://www.youtube.com/watch?v=Ah6h-QqM6Xs</li> <li>LQ-based power boost: https://www.youtube.com/watch?v=SMOfxdzQIJY</li> <li>AUX Switch feature demo: https://www.youtube.com/watch?v=wdPWw2xu8Ig</li> </ul> <p>Note: These videos were taken with a test version. The power lowering/raising thresholds are different from the deployed version.</p>","title":"Feature DEMO"},{"location":"software/dynamic-transmit-power/#how-to-configure-dynamic-power","text":"<p>On the ELRS Lua script v2, Select <code>&gt; TX Power</code>. There are three configurable elements.</p> <ul> <li><code>Max Power</code>: The output power will never exceed this power output level in any situation.</li> <li><code>Dynamic</code>: Three options are available.<ul> <li><code>Off</code>: Fixed power, always set to the configure <code>Max Power</code> output.</li> <li><code>On</code>: Dynamic power is enabled, following the logic described below.</li> <li><code>AUX9</code>-<code>AUX12</code>: Dynamic power is enabled only when this AUX channel is <code>high</code>, and power is fixed to the <code>Max Power</code> when <code>low</code>.</li> </ul> </li> <li><code>Fan Thresh</code>: Fan threshold. If the module has a fan, it will be enabled starting at this power level after a short delay.</li> </ul> <p>Another important setting is to make sure your craft is armed on AUX1=<code>high</code> (~2000us). ELRS never knows the craft arming state. Instead it monitors the value of <code>AUX1</code> for arming detection. See Switch Modes for more information about AUX channels.</p>","title":"How to configure Dynamic Power"},{"location":"software/dynamic-transmit-power/#details","text":"","title":"Details"},{"location":"software/dynamic-transmit-power/#starting-power","text":"<p>On module powerup with Dynamic Power enabled, transmit power is set to the minimum supported power.</p>","title":"Starting Power"},{"location":"software/dynamic-transmit-power/#lowering-power","text":"<p>The algorithm averages the last few RSSI dBm readings from the RX and will compare the average with the sensitivity limit for the current packet rate. If the RSSI is far enough from the limit, the transmit power is lowered one level. Example: 250Hz = -108dBm sensitivity limit, if the current RSSI average is above -78dBm, the power will be lowered. This can only occur once every few seconds.</p>","title":"Lowering Power"},{"location":"software/dynamic-transmit-power/#raising-power","text":"<p>The opposite of the \"lowering power\" algorithm is also in place, to raise power as needed slowly such as when flying away on a long range flight. When the average RSSI is too close to the sensitivity limit for the current packet rate, the transmit power is raised one level. Example: 250Hz = -108dBm sensitivity limit, if the current RSSI average is less than -93dBm, the power will be raised. This can only occur once every few seconds.</p> <p>In addition to the slow power ramp up, there are three LQ-based conditions that will raise the power immediately to the maximum configured value.</p> <ol> <li>If the LQ ever drops below a hard limit. Example: LQ of 50% is received by the TX, the power will jump to max.</li> <li>If the LQ drops suddenly in a single telemetry update compared to the moving average. This is intended to react to flying behind a structure where the LQ suddenly takes a hit and is expected to drop further. Example: LQ is running 100% (as ExpressLRS do) and the TX receives a telemetry packet with 80% LQ, the power will jump to max.</li> <li>If telemetry is lost entirely with the arm switch high. Any time the TX is \"disconnected\" while armed, the power will jump to max.</li> </ol>","title":"Raising Power"},{"location":"software/dynamic-transmit-power/#notes","text":"","title":"Notes"},{"location":"software/dynamic-transmit-power/#minimum-recommended-telemetry-ratio","text":"<p>Because dynamic power relies on information coming back from the RX to know how to adjust the power, dynamic power is only available if the \"Telemetry Ratio\" is not set to Off. Any ratio will allow it to operate, but the algorithm is optimized around having at least 2x Link Statistics telemetry packets per second.</p>    Packet Air Rate Telemetry Ratio     500Hz 1:128   250Hz 1:64   200Hz 1:64   150Hz 1:32   100Hz 1:32   50Hz 1:16    <p>On startup, the output power will be set to the lowest possible value. If telemetry is lost, the output power will stay at the current value until telemetry is received again. This is intended to prevent everyone's TX from blasting to max power when swapping batteries.</p>","title":"Minimum Recommended Telemetry Ratio"},{"location":"software/dynamic-transmit-power/#osd-power-readout","text":"<p>To see the current output power on the OSD, enable the <code>Tx uplink power</code> OSD element. This is only available on Betaflight starting at v4.3.0 and in INAV starting at v2.6.0.</p> <p>You will also have to set the switch mode to <code>Wide</code> in the transmitter settings via the ExpressLRS Lua Script (Switch Mode can only be changed when not bound/connected to a receiver). </p>","title":"OSD Power Readout"},{"location":"software/dynamic-transmit-power/#opentx-power-readout","text":"<p>Depending on your FC Firmware version, TX Power telemetry (TPWR) may not be recognized and will not be displayed on your OSD. You can instead use OpenTX/EdgeTX Telemetry readout special function so you get notified when changes in the power level has happened, as in the demo video.</p> <ol> <li> <p>Firstly, set a logical switch to <code>|\u0394|&gt;x</code> / <code>TPWR</code> / <code>1mW</code> as shown in L04 in the picture.  </p> </li> <li> <p>Next, for a readout when the power changes, set a special function triggered from the logical switch previously set, and assign <code>Play Value</code> / <code>TPWR</code> / <code>1x</code> (SF10 in the picture). When you want a readout periodically throughout a flight, choose a switch to trigger another special function, and assign <code>Play Value</code> / <code>TPWR</code> / [an interval you want] (SF11 in the picture, with 10s interval). </p> </li> </ol>  <p>OpenTX has no value for 50mW in the CRSF Telemetry protocol and instead will be read as 0mW. EdgeTX starting 2.5.0 have the proper 50mW readout.</p>","title":"OpenTX Power Readout"},{"location":"software/loan-model/","text":"<p></p>","title":"Loan Model"},{"location":"software/loan-model/#loan-model","text":"<p>Scenario</p> <p>You are flying with your buddies and your friend has crashed all his models. You'd like to be able to lend him one of yours but you can't because it's using a binding phrase, so he's relegated to being the crashed model fetcher for the rest of the day!</p> <p>No longer is he destined to be running to the bando and back again fetching downed quads. You can use the \"Loan Model\" feature and lend him one of your models!</p>","title":"Loan Model"},{"location":"software/loan-model/#how-to-loan-model","text":"","title":"How to \"Loan Model\""},{"location":"software/loan-model/#on-the-lenders-handset","text":"<ol> <li>Connect to the model you wish to loan out with your handset</li> <li> <p>Enter the LUA screen and select \"Other Devices\" at the bottom of the list</p> <p></p> </li> <li> <p>Choose the RX from the list</p> <p></p> </li> <li> <p>Select the \"Loan Model\" entry</p> <p></p> </li> <li> <p>The receiver LED should go into the bind flashing state</p> <p></p> </li> </ol>","title":"On the lenders handset"},{"location":"software/loan-model/#on-the-borrowers-handset","text":"<ol> <li>From the main ExpressLRS LUA screen select <code>[Bind]</code></li> <li>The receiver LED should turn solid on, and the handset should connect to the recevier     </li> </ol>","title":"On the borrowers handset"},{"location":"software/loan-model/#returning-a-loaned-model","text":"<p>There are a couple of ways to return a model to the owner. </p> <p>The first method is for the borrower to return it from the LUA script as follows:</p> <ol> <li>On the borrowers handset, connect to the \"loaned\" model</li> <li> <p>Enter the LUA screen and select \"Other Devices\" at the bottom of the list</p> <p></p> </li> <li> <p>Choose the RX from the list</p> <p></p> </li> <li> <p>Select the \"Return Model\" entry</p> <p></p> </li> </ol> <p>The second method used if the borrower forgets to return the model, is as follows:</p> <ol> <li>Power cycle the model 3 times in rapid succession, turning it off each time after the LED flashes on and off again.</li> <li>If done correctly, the model will return to the state where it is bound to your transmitter.</li> </ol>  <p>Note</p> <p>If the LED returns to normal flashing between reboots, the counter is reset to 0 and you must restart the process.</p>","title":"Returning a \"Loaned\" Model"},{"location":"software/loan-model/#bump-to-loan","text":"<p>On transmitter modules with an accelerometer (such as the Axis Thor), you can loan and return a model by bumping it to another transmitter. </p> <p>The process is easy - simply hold both the lender and the borrower's transmitters vertically while a model is connected and not armed and bump them together. </p>  <p>Note</p> <p>If the borrower does not have an accelerometer, the borrower must go into binding mode manually. </p>","title":"Bump to Loan"},{"location":"software/model-config-match/","text":"<p></p>","title":"Model Matching"},{"location":"software/model-config-match/#model-configuration","text":"<p>ExpressLRS stores separate configurations for each CRSF Recevier number configured in OpenTX/EdgeTX. This can be used with or without model matching - for example a single drone being used for longrange and freestyle can have it's RF params switched quickly by changing the model on the radio. The value is shown highlighted below on a TX16s.</p> <p></p> <p>The parameters stored per-Receiver number are:</p>    Setting Description     Packet Rate The RC update frequency (500Hz, 250Hz, etc)   Telem Ratio Telemetry ratio (Off, 1:128, 1:64, etc)   Switch Mode Method for sending switches to the receiver   Model Match Enable the model match feature (see below)   Max Power Transmitter output power level   Dynamic Power Enable Dynamic Power switching    <p>All other configuration parameters are global across all Receiver numbers. Note: not \"per receiver\" but \"per Receiver number\". For details about the configurable parameters, see Lua Configuration.</p>","title":"Model Configuration"},{"location":"software/model-config-match/#model-match","text":"<p>ExpressLRS uses a binding phrase, which means the transmitter will connect to any receiver built with that binding phrase. Model Match is a feature which prevents a full connection if the Model Match number does not match. In this mode the receiver will connect to the handset, but no data will be sent from the receiver to the flight controller. This allows a user to force that the model selected in OpenTX only connects to a specific receiver, for example preventing using a quad opentx model definition with a fixed wing model.</p> <p>The terms Receiver number (set in OpenTX/EdgeTX) and Model Match number (set in the receiver) are used interchangebly here-- they are the same.</p> <p>If the <code>Model Match</code> option is Off, then only recievers with no Model Match number (255) can be connected to. If the <code>Model Match</code> option is On, then the Receiver number configured in the external module configuration (as shown in the image above) must match the Model Match number stored on the receiver module for the receiver and transmitter to fully connect.</p> <p>The implementation follows this set of rules for handling half connections / full connections</p>    TX ModelMatch TX Receiver ID RX Model ID Result     Off Any Off Connects / Communicates as usual   Off Any A Connects but does not communicate to FC   On Any Off Connects but does not communicate to FC   On A A Connects / Communicates as usual   On B A Connects but does not communicate to FC","title":"Model Match"},{"location":"software/model-config-match/#setting-model-match-number","text":"<ul> <li>Set the Receiver number to be used in the OpenTX Model Setup -&gt; External Module -&gt; Receiver</li> <li>Be sure the receiver to be assigned is connected and has a high LQ</li> <li>Use the ExpressLRS Lua to set the Model Match option to \"On\"</li> <li>The receiver now has its Model Match number set to match the Receiver number and will only fully connect when using this Receiver number.</li> </ul> <p>alternatively</p> <ul> <li>For wifi-enabled RX modules, use the webui to set the Model Match directly. \"Model Match\" must still be set to \"On\" in the Lua config. </li> </ul>","title":"Setting Model Match number"},{"location":"software/model-config-match/#clearing-model-match-number","text":"<ul> <li>Be sure the receiver to be assigned is connected and has a high LQ</li> <li>Use the ExpressLRS Lua to set the Model Match option to \"Off\"</li> <li>The receiver now has its Model Match number cleared and will connect with any configuration profile which has Model Match set to \"Off\"</li> </ul> <p>alternatively</p> <ul> <li>For wifi-enabled RX modules, use the webui to set the Model Match to 255 to disable matching. \"Model Match\" must still be set to \"Off\" in the Lua config.</li> </ul>","title":"Clearing Model Match number"},{"location":"software/obsolete-defines/","text":"<p></p> <p>This page contains old user_defines.txt that have been removed or superseded by new defines.</p> <p>New items should be added to the top of the list so the last entry here is the oldest. The order of each entry should be [code]definename[/code] followed by the original text of the documentation, ending with a separate paragraph \"REMOVED [version] [replacement or reason for removal]\".</p>","title":"Obsolete Defines"},{"location":"software/obsolete-defines/#obsolete-defines","text":"<p><pre><code>USE_DIVERSITY\n</code></pre> Enable antenna-switching diversity for RX that support it. Safe to leave on for hardware that doesn't have diversity except DIY builds which did not populate the RF switch.</p> <p>REMOVED 3.0. Diversity is now a receiver option, changed via Lua for devices that support it in hardware.</p> <p><pre><code>DYNPOWER_THRESH_UP=15\nDYNPOWER_THRESH_DN=21\n</code></pre> Change the RSSI thresholds used by the Dynamic Power algorithm. If the RSSI moving average is below <code>DYNPOWER_THRESH_UP</code> dBm from the sensitivity limit, the algorithm will increase the power output by one step. Similarly, if the RSSI is above <code>DYNPOWER_THRESH_DN</code> from the sensitivity limit, the power will be decreased one step.</p> <p>REMOVED 3.0. The dynamic power algorithm uses SNR which is defined per-rate so the thresholds are more complicated than 2 defines.</p> <p><pre><code>NO_SYNC_ON_ARM\n</code></pre> no sync on arm doesn't transmit sync packets while armed. This is useful for racing as there is less time &amp; packets wasted \ud83d\uddd1\ufe0f on sending sync packets (one packet every 5 seconds if connected). HOWEVER if you are doing serious long range \u26f0\ufe0f, keep this disabled because in the case of a sustained failsafe, link can not be regained while armed.</p> <p>AUX1 is the channel ExpressLRS uses to detect \"ARMED\", and this feature assumes that a low value of the arm switch is disarmed, and a high value is armed. OpenTX can invert your switch if you prefer it to be mechanically inverted. It is best not to enable no sync on arm when you are first setting up ExpressLRS as it can be a source of confusion.</p> <p>REMOVED 3.0. Replaced with \"Race\" telemetry mode, which also disables sending SYNC on arm.</p> <pre><code>FEATURE_OPENTX_SYNC\nFEATURE_OPENTX_SYNC_AUTOTUNE\n</code></pre> <p>These features enable lower latency \ud83c\udfc3\u200d\u2642\ufe0f and offset from the OpenTX radio to the TX. The first lowers latency and should be kept enabled. The second is more experimental and can lower the offset from the radio by tuning it as close as possible to <code>0</code>, but is experimental (even in 1.0) and is best left disabled.</p> <p>Both require OpenTX <code>2.3.12</code> or above. In order to install it, you will have to use OpenTX companion application.</p> <p>Deviation radio users such as those with the T8SGv2/v3 should disable this feature.</p> <p>You can also use EdgeTX.</p> <p>REMOVED After 2.2.0. Sync packets were always sent regardless of if this was enabled, but the sync offset would just be wrong if it wasn't defined.</p> <p><pre><code>USE_ESP8266_BACKPACK\n</code></pre> This enables communication with the ESP Backpack for over-the-air updates (<code>env:FrSky_TX_R9M_via_WiFi</code>) \ud83d\udda5\ufe0f and debugging via WebSocket \ud83d\udd0d. Uncommented by default, does not need to be changed.</p> <p>REMOVED 2.0 development. Replaced with USE_TX_BACKPACK.</p> <p><pre><code>#-DHYBRID_SWITCHES_8\n</code></pre> Changes how the AUX channels are sent over the air. The default option is Normal Mode with 8x 2-position low-latency switches. Enabling <code>HYBRID_SWITCHES_8</code> changes this to 1x 2-pos + 6x 7-pos + 1x 16-pos, with only the 2-position being low-latency. In Normal Mode, all switches are sent with every packet, in Hybrid Mode, only AUX1 is sent with every packet and the rest are rotated through. Note: The switch mode MUST match between the RX and TX. A detailed explanation of the differences between the two options can be found in Switch Modes, but   1. If only two position switches are needed, and they must be updated as fast as possible: Normal Mode   2. Almost everyone: Hybrid Mode (Put ARM on AUX1)</p> <p>REMOVED 2.0 development, all switch modes are available via Lua configuration. HYBRID_SWITCHES_8 is always enabled / available.</p> <p><pre><code>#-DENABLE_TELEMETRY\n</code></pre> Enable advanced telemetry support. This option must be enabled on both TX and RX. The following telemetry messages are supported:</p> <ul> <li>GPS</li> <li>BATTERY_SENSOR</li> <li>ATTITUDE</li> <li>DEVICE_INFO</li> <li>FLIGHT_MODE</li> <li>MSP_RESP</li> </ul> <p>Note 1: Increase the telemetry rate with the ExpressLRS lua script. Increase the rate until the sensor lost warnings go away. It is normal to set it up to 1:16 with 200 Hz refresh rate.</p> <p>Note 2: It must be enabled together with HYBRID_SWITCHES_8.</p> <p>REMOVED 2.0 development, ENABLE_TELEMETRY is always enabled. Advanced Telemetry will only be sent if telemetry messages are received from the FC.</p> <p><pre><code>-DUSE_500HZ\n</code></pre> This enables 500Hz mode for 2.4 GHz RXes and TXes. The drawback is that you have to give up 25Hz mode to add 500Hz mode. It requires OpenTX 2.3.12 or Newer, EdgeTX or a Radio firmware that has CRSFShot or Mixer Sync. </p> <p>REMOVED 1.0.0-RC9, this option is now always enabled and in turn, 25Hz has been dropped/removed.</p> <p><pre><code>-DUSE_UART2\n</code></pre> This enables integration with Jye's FENIX rx5805 pro-diversity module</p> <p>REMOVED Somewhere in the 1.0.0-RC cycle. Feature removed.</p> <p><pre><code>-DFAST_SYNC\n</code></pre> Option that adds faster initial syncing, by changing how long the receiver waits for a connection in each mode while not connected. This option is now the default, but disabling it can help syncing at lower packet rates (50Hz and below).</p> <p>REMOVED 1.0.0-RC2 initial sync replaced with a full FHSS period wait</p> <p><pre><code>#-DR9M_UNLOCK_HIGHER_POWER \n</code></pre> REMOVED 1.0.0-RC1 replaced with generic <code>-DUNLOCK_HIGHER_POWER</code></p> <p><pre><code>#-DARM_CHANNEL=AUX1\n</code></pre> If you are using a different channel than the default you need to edit \ud83d\udd25 (or you may not be able to gain sync safely - default is listed in <code>#DARM_CHANNEL</code> as AUX1 which is Channel 5).</p> <p>NB This feature assumes that a low value of the arm switch is disarmed, and a high value is armed. If you have the arm switch reversed it will not work correctly and the link won't be established. For this reason it may be best not to enable no sync on arm when you are first setting up ExpressLRS as it can be a source of confusion.</p> <p>REMOVED 1.0.0-RC1 AUX1 is always the arm switch now, no longer configurable</p> <p><pre><code>#-DLOCK_ON_50HZ\n</code></pre> <code>LOCK_ON_50HZ</code> locks the RX at <code>50Hz</code> mode from the powerup. (Only recommended for longrange, and partly redundant with previous feature.) Merged in Pull 143</p> <p>REMOVED 1.0.0-RC1 not sure why this was removed</p> <p><pre><code>-DAUTO_WIFI_ON_BOOT\n</code></pre> REMOVED 1.0.0-RC1 replaced with <code>-DAUTO_WIFI_ON_INTERVAL=X</code></p>","title":"Obsolete Defines"},{"location":"software/open-ocd/","text":"<p></p> <p>If you are using Linux then you can't use the ST-LINK utility from st.com. But fortunately you can achieve the same effect with openocd on the Linux command line. This tutorial assumes you have an STLink v2.</p> <ol> <li>Install openocd from your distro's repository. For Debian/Ubuntu use: <code>sudo apt-get install openocd</code></li> <li> <p>Issue the full command:</p> <p>a. For R9mm/Mini <code>openocd -f interface/stlink-v2.cfg -f target/stm32f1x.cfg -c 'init; reset halt; stm32f1x unlock 0; reset run; shutdown'</code></p> <p>b. For Ghost \u00c1tto/Zepto <code>openocd -f interface/stlink-v2.cfg -f target/stm32f3x.cfg -c 'init; reset halt; stm32f3x unlock 0; flash protect 0 0 last off; reset halt; exit'</code></p> </li> <li> <p>Restart your device so the disabled readout protection can take effect.</p> </li> <li>Now you can proceed with flashing your receiver. This may work on other devices or it might not.</li> </ol>","title":"OpenOCD for STLink"},{"location":"software/stlink-fix/","text":"<p></p> <p>PlatformIO has an older version of STLink. It is unable to communicate with the STM32L MCUs on some Rx's. Affected RX's: -(DIY) PP</p> <p>Swapping out PIO's STLink folder contents with the current STLink will allow using the configurator with these RX's.</p> <p>Go to your STLink folder </p> <ul> <li>copy contents of \"ST-Link Utility\" <code>C:\\Program Files (x86)\\STMicroelectronics\\STM32 ST-LINK Utility\\ST-LINK Utility</code></li> </ul> <p></p> <ul> <li>paste files from \"st-link utility\" folder into \"stlink\" folder in your users PIO location <code>C:\\Users\\username\\ .platformio\\packages\\tool-stm32duino</code></li> </ul> <p></p>","title":"PIO STLink Fix"},{"location":"software/switch-config/","text":"<p></p>","title":"Switch Configs"},{"location":"software/switch-config/#switch-configs","text":"<p>WARNING</p> <p>Put your arm switch on AUX1, and set it as ~1000 is disarmed, ~2000 is armed.</p>","title":"Switch Configs"},{"location":"software/switch-config/#summary-of-switch-configuration-modes","text":"<p>This table summarizes the switch configuration modes, available channel switch positions and resolutions, channel update rate, and packet rate as it applies to each channel or flight controller auxiliary channel (Aux). Below the table are descriptions for each option.</p>    Channel Flight Controller Hybrid Wide Full Res 8ch Full Res 16ch Rate/2 Full Res 12ch Mixed     1 Sticks NormalRange NormalRange CRSF ExtLimits CRSF ExtLimitsH CRSF ExtLimits   2 Sticks NormalRange NormalRange CRSF ExtLimits CRSF ExtLimitsH CRSF ExtLimits   3 Sticks NormalRange NormalRange CRSF ExtLimits CRSF ExtLimitsH CRSF ExtLimits   4 Sticks NormalRange NormalRange CRSF ExtLimits CRSF ExtLimitsH CRSF ExtLimits   5 Aux 1 2-posArm 2-posArm 2-posArm CRSF ExtLimitsHArm 2-posArm   6 Aux 2 6-posRR 64/128-posRR CRSF ExtLimits CRSF ExtLimitsH CRSF ExtLimitsH   7 Aux 3 6-posRR 64/128-posRR CRSF ExtLimits CRSF ExtLimitsH CRSF ExtLimitsH   8 Aux 4 6-posRR 64/128-posRR CRSF ExtLimits CRSF ExtLimitsH CRSF ExtLimitsH   9 Aux 5 6-posRR 64/128-posRR CRSF ExtLimits CRSF ExtLimitsH CRSF ExtLimitsH   10 Aux 6 6-posRR 64/128-posRR - CRSF ExtLimitsH CRSF ExtLimitsH   11 Aux 7 6-posRR 64/128-posRR - CRSF ExtLimitsH CRSF ExtLimitsH   12 Aux 8 16-posRR 64/128-posRR - CRSF ExtLimitsH CRSF ExtLimitsH   13 Aux 9 - - - CRSF ExtLimitsH CRSF ExtLimitsH   14 Aux 10 - - - CRSF ExtLimitsH -   15 Aux 11 - - - CRSF ExtLimitsH -   16 Aux 12 - - - CRSF ExtLimitsH -    PacketRates 50 thruF1000 50 thruF1000 100&amp;333Only 100&amp;333Only 100&amp;333Only","title":"Summary of Switch Configuration Modes"},{"location":"software/switch-config/#switch-position-channel-resolution","text":"Label Description     Normal Range 10-bit or 1024 positions mapped to PWM 988us to 2012us (1 bit = 1us)   CRSF Ext Limits 10-bit or 1024 positions mapped to PWM 885us to 2115us (1 bit = 1.23046875us)   64 / 128-pos The bit depth is dependent on the selected telemetry ratio. For a telemetry ratio of 1:2 and 1:4 these channels are 6-bit/64 pos. For all other ratios, these channels are 7-bit/128 pos. The 7-bit/128 positions is 12.5% the resolution of 10-bit, and 6-bit/64 positions is 6.25% the resolution of 10-bit. This may not be enough resolution for a head tracker but definitely enough for flight modes, flaps, gear, etc.   16-pos 4-bit which is good for flight modes, flaps, gear, etc.   6-pos 3-bit which is good for flight modes, flaps, gear, etc.   2-pos 1-bit for Arm, ~1000us is the disarmed state and ~2000us is the armed state (see the explanations below of why the armed state is very important for safety and performance)     <p>WARNING</p> <p>Put your arm switch on AUX1, and set it as ~1000 is disarmed, ~2000 is armed.</p>   <p>Note</p> <p>If using a receiver with PWM outputs and you would like to use the PWM output 5 on the receiver for a servo, gear, etc. Go into the wifi interface of the receiver and map any of the other channels to PWM Output 5. Please always still use AUX1 for the 2-pos Arm switch.</p>","title":"Switch Position / Channel Resolution"},{"location":"software/switch-config/#channel-update-rate-versus-packet-rate","text":"Label Description     Bolded This channel will be included in every packet at the selected packet rate (So a 150hz Packet Rate = 150hz Channel Update Rate)   H  Half Rate Half of the channels are included in each packet - Rate/2 (So a 100hz Packet Rate cut in half = 50hz Channel Update Rate)   RR  Round Robin These channels wait their turn to be sent in a packet (So a 150hz Packet Rate sends a channel every 7th packet = 22hz Channel Update Rate)   50 thruF1000 The Hybrid and Wide switch modes are only available on packet rates of 50Hz, 150Hz, 250Hz, 500Hz, D250Hz, D500Hz, F500Hz, and F1000Hz   100&amp;333Only The Full Resolution switch modes (8ch, 16ch Rate/2, 12ch Mixed) are only available on packet rates of 100Hz Full and 333Hz Full","title":"Channel Update Rate versus Packet Rate"},{"location":"software/switch-config/#detailed-description-of-switch-configuration-modes","text":"<p>Note</p> <p>The switch configuration mode can only be changed when a receiver is not connected to the transmitter and when the transmitter is not armed. The mode is changed using the LUA Configuration in EdgeTX / OpenTX or using buttons, joystick, screen, etc. on the actual transmitter itself. </p>  <p>ExpressLRS has a few options for how switches are transmitted; Hybrid, Wide, Full Res 8ch, Full Res 16ch Rate/2, Full Res 12ch Mixed.</p>","title":"Detailed Description of Switch Configuration Modes"},{"location":"software/switch-config/#hybrid-and-wide-switch-configuration-modes","text":"<p>These two switch modes are only available when packet rates of 50Hz, 150Hz, 250Hz, 500Hz, D250Hz, D500Hz, F500Hz, and F1000Hz and selected.</p> <p>The stick inputs (Chan 1-4) are sent with every packet at the normal range resolution of 10-bit or 1024 positions mapped to a PWM of 988us to 2012us (1 bit = 1us) which corresponds to -100% and 100% in EdgeTX / OpenTX. </p> <p>The first switch (Chan 5 / AUX 1) is sent with every packet. Put Your Arm On this channel / AUX 1. It is used to enable safeguards and performance settings in the software and hardware. See the FAQ below. This switch is 1-bit / 2-position and is mapped to a PWM of ~1000us for disarmed and ~2000us for armed.</p> <p>For the remaining 7 switches (Chan 6 thru 12 /  AUX 2 thru AUX 8), only one switch is sent with each packet and is rotated on each packet (Round Robin).</p> <p>In Hybrid mode, AUX2-AUX7 / Chan6-11 are 3-bit and can be used as either 2-position, 3-position, or 6-position switches or selector buttons. These are mapped to a PWM of 1000us to 2000us.</p>    2-posSwitch 3-posSwitch 6-posSwitch Approx. ChannelInput PWM (us) ChannelOutput (us) Ardupilot Mode     1 1 1 988 1000 Mode1 (up position for 2-pos / 3-pos)     2 1192 1275 Mode2     3 1398 1425 Mode3    2 - 1500 1500 Mode4 (center position in 3-pos)     4 1602 1575 Mode4     5 1807 1725 Mode5   2 3 6 2012 2000 Mode6 (down position for 2-pos / 3-pos)    <p>In Hybrid mode, AUX8 / Chan12 is 4-bit / 16-position and is mapped to the PWM table below. It takes 7 packets to send the complete set of switches before cycling back to AUX2. You can stack all your modes in here, Bardwell style, or get some low-res camera pan action (180 degrees / 16 = 11ish deg per position which isn't terrible). Clever math-heads might note that there's no \"center position\" (1500us) in a 16-position switch, so using AUX8 with a 3-position switch means it will come out as 1533 at the flight controller.</p>    Switch Position 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16     Approx.\u00a0Chan\u00a0Input\u00a0PWM\u00a0(us) 988 1056 1125 1193 1261 1329 1398 1466 1534 1602 1671 1739 1807 1875 1944 2012   Chan\u00a0Output\u00a0PWM\u00a0(us) 1000 1066 1133 1200 1266 1333 1400 1467 1533 1600 1666 1733 1800 1866 1933 2000    <p>In Wide mode, AUX2-AUX8 / Chan6-12 are 6-bit / 64-position for telemetry ratios of 1:2 and 1:4. For all other telemetry ratios, these 7 switches are 7-bit / 128-position. It takes 8 packets to send the complete set of switches before cycling back to AUX2 (one more than Hybrid). Wide uses the 8th slot to transmit extra data to the receiver, including the current transmitter power. This is the only switch mode which can show the transmitter power <code>TPwr</code> on the flight controller's OSD. These behave more like traditional channels although with lower precision. You can tell you're operating in Wide mode when a switch in the middle position shows up as 1503 instead of 1500.</p> <p>If using Ardupilot in Wide mode you will see that the channel outputs don't line up very well with the standard -100% (988us) to +100% (2012us) output range in EdgeTX / OpenTX when using a 6-position selector as input. Both the first two and the last two positions get binned into Mode 1 and Mode 6 respectively. To get the full 6 Ardupilot modes, go to the Outputs page on the OpenTX model setup and set the min / max for the channels to -75% / +75%.</p>","title":"Hybrid and Wide Switch Configuration Modes"},{"location":"software/switch-config/#full-resolution-switch-configuration-modes","text":"<p>These switch modes come in three flavors based on the number of output channels you would like and are only available on packet rates of 100Hz Full and 333Hz Full.</p> <ol> <li> <p>8ch - Channels 1 to 4 and Channels 6 to 9 are sent 10-bit, at the selected Packet Rate, along with Channel 5 (AUX1) in 1-bit (2-position) for Arming.</p> </li> <li> <p>16ch Rate/2 - All the Channels are sent 10-bit but at half rate.</p> </li> <li> <p>12ch Mixed - Channels 1 to 4 are sent 10-bit with Channel 5 (AUX1) in 1-bit (2-position) for Arming at the selected Packet Rate. Channels 6 to 13 are then sent at 10-bit but at half rate.</p> </li> </ol> <p>All of these 10-bit or 1024 positions are mapped to PWM 885us to 2115us (1 bit = 1.23046875us) in what is called \"CRSF Extended Limits\" </p>","title":"Full Resolution Switch Configuration Modes"},{"location":"software/switch-config/#faq","text":"","title":"FAQ"},{"location":"software/switch-config/#why-do-you-keep-saying-put-arm-on-aux1","text":"<p>For safety and performance reasons.</p> <p>SAFETY</p> <p>AUX1 is sent with every packet going out, this is the most reliable way to be able to tell your model to disarm. If your arm switch is on another aux channel, it may be several packets before that switch is transmitted, and there's no guarantee that the RX will actually receive that packet. There's a non-trivial chance your model may not ever disarm if the link quality is low and it just so happens that the packet containing the arm switch is getting missed every time. Forcing the arm switch into every packet on AUX1 means that if any packet is received by ExpressLRS, it will disarm your model, not just a less than 1-in-7 chance.</p> <p>It also protects against unintentional disarms caused by a corrupt packet changing the value of the arm switch to disarmed. Betaflight requires that 4x \"disarm\" commands are received before disarming to guard against this possibility. With arm on AUX1, a single corrupt packet can not disarm your model. With arm on AUX2-8, the one corrupt switch value will be sent 6 times before the value is refreshed, but the flight controller would have already disarmed by that point.</p> <p>Your transmitter and receiver also act differently when \u201carmed\u201d and when \u201cdisarmed\u201d. When disarmed, the transmitter and receiver are free to adjust their communication in order to make the LUA and other configuration operations more responsive. When \"disarmed\", everything will appear to be working appropriately but none of the safeguards will be in place and performance will not be what you expect. </p> <p>When <code>IsArmed</code> is enabled, these safeguards are applied:</p> <ul> <li>All \"Button\" inputs are disabled</li> <li>All \"Joystick\" (5-way buttons) are disabled</li> <li>Bump to Share is disabled</li> <li>VTX Admin is disabled</li> <li>Integrated VTX channel change is disabled</li> </ul> <p>PERFORMANCE</p> <p>When <code>IsArmed</code> is enabled, these performance features are activated:</p> <ul> <li>Dynamic Power is fully enabled</li> <li>Race telemetry mode turns telemetry off</li> <li>Some thermal-based fan controls are enabled</li> </ul> <p>Arming is an extremely important part of the performance of the control link. Please use Aux 1 / Chan 5 as indicated. Also keep in mind that for ExpressLRS, ~1000us is the disarmed state and ~2000us is the armed state.</p>","title":"Why do you keep saying \"put arm on AUX1\"?"},{"location":"software/switch-config/#i-use-a-3-pos-switch-for-arm-this-software-is-unusable","text":"<p>Good news, you can still use a 3-position switch to arm! However, you will need to adjust the model input / mixer settings for AUX1 in EdgeTX / OpenTX to remap the switch to be 2-position / on-off switch. If your 3-position arm switch had a second function as well, such as enabling Blackbox, just use one of the other channels to send the same switch on a second channel using the model input / mixer settings EdgeTX / OpenTX.</p>","title":"I use a 3-pos switch for arm, this software is unusable?"},{"location":"software/switch-config/#what-about-normal-one-bit-switch-mode","text":"<p>In version 1.0 of ExpressLRS, there was also a switch mode called \"Normal\" where there were eight 1-position switches sent in every packet. This mode was removed in version 2.0 due to its unpopularity and the flash space was used for other features. Please use Hybrid or Wide modes and all of the high performance packet rates.</p>","title":"What about \"Normal\" one bit switch mode?"},{"location":"software/switch-config/#every-time-i-change-switch-mode-in-lua-it-changes-back-is-my-transmitter-broken","text":"<p>If the Lua loads then you know its communicating with your transmitter. However, the switch mode can only be changed when a receiver is not connected and makes it appear as if the changes are not saving. This is done to ensure consistency between the RX's and TX's interpretation of the switch data being actively transmitted. This is a safeguard. Power down your receiver, wait for the \"Telemetry Lost\" callout, and the switch mode change will stick / save. The receiver will talk to the transmitted when it is powered up to handshake on the new settings.</p>","title":"Every time I change switch mode in Lua, it changes back! Is my transmitter broken?"},{"location":"software/toolchain-install/","text":"<p></p> <p>Note: The following section is intended for advanced users who intend to dabble with the source code directly.</p>","title":"Toolchain Setup"},{"location":"software/toolchain-install/#toolchain-setup-advanced","text":"<p><code>ExpressLRS</code> is written in C++ using the Arduino framework. </p> <ul> <li>Rather than using the Arduino IDE (which let's face it, \ud83d\uddff is pretty clunky), we use platformio</li> <li>To ease the use of <code>pio</code> we recommend to use the according extension for <code>Visual Studio Code</code></li> </ul>","title":"Toolchain Setup (Advanced)"},{"location":"software/toolchain-install/#platformio","text":"<ol> <li>\ud83d\udd3d Download a copy of vscode for your computer </li> <li>\ud83d\udcc2 Open vscode, and click on the \"Extensions\" icon in the toolbar on the right (see Managing Extensions \ud83d\udcd8)</li> <li>\ud83d\udd0e In the search box, enter <code>platformio</code>, and install the extension (see the <code>pio install</code> documentation \ud83d\udcda)</li> </ol>","title":"PlatformIO"},{"location":"software/toolchain-install/#git-setup","text":"<p>We recommend using VSCode's built-in Git client, as it requires the least 3rd party software \ud83e\udd16.</p> <ol> <li>\ud83d\udd3d Download a copy of git (this is also needed for <code>PlatformIO</code>)</li> <li>Install <code>git</code>, click yes to the default options (there are a LOT \ud83d\udcaf)</li> <li>IMPORTANT! Make sure you select this option during install, it adds git to PATH which is necessary for VScode cloning (the next step). </li> </ol> <p></p>","title":"Git Setup"},{"location":"software/toolchain-install/#cloning-the-repo","text":"<ul> <li>In VSCode open the <code>command pallete</code> (using <code>Cmd+Shift+P</code> on MacOS or <code>Ctrl+Shift+P</code> on Windows)</li> <li>Enter <code>Git: Clone</code> </li> </ul> <p></p> <ul> <li>Click that! \ud83d\udc48 </li> <li>Then, enter ExpressLRS Repo URL -&gt; <code>https://github.com/ExpressLRS/ExpressLRS.git</code> \ud83d\udcbb </li> <li>Choose a folder for ExpressLRS. \ud83d\udcc2 </li> </ul>","title":"Cloning the Repo"},{"location":"software/toolchain-install/#selecting-the-latest-release","text":"<p>Before we can do any building, you need to select a release build of ELRS. For example, release 0.1.0-RC1. In Visual Studio Code select that tag. The location of the selector is shown below. \ud83d\uddb1\ufe0f </p> <p> </p> <p>Click the selector, and then type in the name of the tag, in this case <code>0.1.0-RC1</code>. </p>","title":"Selecting the Latest Release"},{"location":"software/toolchain-install/#platformio-building","text":"<p>Once you had the time of your life setting up your toolchain \ud83e\uddf0 you are ready to Flash \u26a1 ExpressLRS to supported hardware.</p>","title":"PlatformIO Building"},{"location":"software/toolchain-install/#building-targets-using-platformio","text":"<ol> <li>\ud83d\udcc2 When you first launch <code>Visual Studio Code</code>, you should see the <code>PlatformIO Home Page</code> in a tab. Click the <code>Open Project</code> button. Navigate to the <code>ExpressLRS</code> repo directory. Navigate into the <code>src</code> folder (i.e. <code>./ExpressLRS/src/</code>). Finally, press the <code>Open</code> button.</li> <li>\u270f\ufe0f Edit the file <code>./src/user_defines.txt</code> to define user specific variabls. \ud83d\ude08 Please make sure you did edit the file according to your needs! </li> <li>\ud83d\udcca In the toolbar on the left, click the PlatformIO icon, which will show the list of tasks. Now, select Project Tasks, expand your desired target and select Build/Upload (depending on the method). You should see the result in the terminal.</li> <li>\ud83d\ude43 If something went wrong - please check the <code>Terminal</code>, too. It will contain at least a hint on what the issue is. Please ask the community for further help\ud83e\uddd1\u200d\ud83d\udd27!</li> </ol>","title":"Building Targets using PlatformIO"},{"location":"software/toolchain-install/#updating-your-local-repo","text":"<p>You've cloned the repository and are now wondering how to get new updates down the line? Then this document is meant for you! Here's a primer on how to keep your local copy of the repository up-to-date.</p>","title":"Updating your Local Repo"},{"location":"software/toolchain-install/#method-1-the-clean-way-fetch-reset","text":"<p>Probably the easiest and least troublesome method, however, it'll overwrite any changes you've made to your local copy. </p> <ol> <li> <p>Open the terminal</p> <p>You can either straight up open <code>bash/cmd</code> and navigate to your project folder or open an integrated terminal in VSCode:</p> <ul> <li>Open the <code>command pallete</code> (using <code>Cmd+Shift+P</code> on MacOS or <code>Ctrl+Shift+P</code> on Windows)</li> <li> <p>Enter: <code>Create New Integrated Terminal</code></p> <p></p> </li> </ul> </li> <li> <p>In the terminal, type: <code>git fetch -pu &amp;&amp; git reset --hard origin/master</code></p> <p>This will get you the latest version and destroy any local changes you've made.</p> </li> </ol>","title":"Method 1: The Clean Way - Fetch &amp; Reset"},{"location":"software/toolchain-install/#method-2-the-lazy-way-commit-pull-merge","text":"<p>The advantage this method has over the first method is that all your changes to the user_defines.txt (or any other file, for that matter) will get merged together with any new updates. There's a possibility that, if changes are too big, you could end up with a merge conflict. If that doesn't appeal to you, stick to the first method.</p> <ol> <li> <p>Commit your changes to your local repository</p> <ul> <li>In VSCode open the <code>command pallete</code> (using <code>Cmd+Shift+P</code> on MacOS or <code>Ctrl+Shift+P</code> on Windows)</li> <li> <p>Enter: <code>Git: Commit</code></p> <p>VSCode will tell you that there are unstaged changes and ask if you want to add them to the commit. Confirm this! This will just commit your changes to the user_defines.txt to your local repository. No worries, you're not overwriting anything on github! :octocat:</p> </li> </ul> </li> <li> <p>Open the terminal, how-to is detailed in method 1</p> </li> <li> <p>In the terminal, type: <code>git pull -f</code></p> <p>This will pull a new revision of the remote repository to your own local repository and automatically merge it with your own changes.</p> </li> </ol>","title":"Method 2: The lazy way - Commit, Pull &amp; Merge"},{"location":"software/user-defines/","text":"<p></p>","title":"User Defines"},{"location":"software/user-defines/#user-defines-explained","text":"<p>With more features being added consistently, <code>./src/user_defines.txt</code> has gotten complicated \ud83e\udd37\u200d\u2642\ufe0f. So we will break it down! \ud83d\udd28 </p>  <p>Info</p> <p>This is the full list of currently supported User Defines and would help you should you intend to compile the firmware using the Toolchain or manual mode on the ExpressLRS Configurator.</p>","title":"User Defines Explained"},{"location":"software/user-defines/#defines-101","text":"<ul> <li>If these are used in Configurator Manual Mode or user_defines.txt, the value must begin with <code>-D</code>. Example: <code>NO_SYNC_ON_ARM</code> would be <code>-DNO_SYNC_ON_ARM</code>.</li> <li>A user define that begins with <code>#</code> is \"commented out\", i.e. not active.</li> </ul>","title":"Defines 101"},{"location":"software/user-defines/#binding-phrase","text":"<p><pre><code>MY_BINDING_PHRASE=\"default ExpressLRS binding phrase\"\n</code></pre> This step is simple but important. Both the TX and RX NEED to have the same binding phrase or ExpressLRS WILL NOT WORK. Anyone using the same binding phrase as you will be able to control your model, so be unique. Set something memorable, and limit to alphanumeric phrases conforming to the Latin alphabet*. Receivers flashed with firmware builds that do not have binding phrase enabled will support and require the traditional binding method. \ud83d\udcdc For ESP/ESP32 hardware, this value can also be changed through the webui.</p> <p>This feature can, but should not be used as a model match feature (to lock a single specific transmitter to a single specific receiver). For that use, the Model Match option.</p> <p>* This phrase gets md5 hashed and gets built into the binary you will be flashing.</p>","title":"Binding Phrase"},{"location":"software/user-defines/#regulatory-domain","text":"<p><pre><code>Regulatory_Domain_AU_915\nRegulatory_Domain_EU_868\nRegulatory_Domain_AU_433\nRegulatory_Domain_EU_433\nRegulatory_Domain_FCC_915\nRegulatory_Domain_ISM_2400\n</code></pre> This is a relatively simple one - enable whatever regulatory domain you are in. <code>EU 868</code> \ud83c\uddea\ud83c\uddfa  is compliant to the frequency but is not LBT compliant \ud83d\udc42 . Every other band is near compliant \ud83d\udc7f  but may not be fully compliant for your regulatory domain. </p> <p><pre><code>TLM_REPORT_INTERVAL_MS=240LU\n</code></pre> The TX module sends the LinkStats telemetry to the OpenTX frequently to let the handset know the connection is still active and reduce \"Telemetry Lost\" warnings. Reducing this value may reduce warnings caused by handset errors at higher baud rates. This only affects the connection from the TX module to the handset and does not do anything with the telemetry connection from the receiver. Default value is 240LU. When changing this value, suffix your milliseconds value with LU. For example, in order to specify a 100ms LinkStats update rate you have to enter it like this: 100LU.</p>","title":"Regulatory Domain"},{"location":"software/user-defines/#output-power-limit","text":"<p><pre><code>UNLOCK_HIGHER_POWER \n</code></pre> By default the max power of hardware is limited to what it can safely output without extra cooling. Some hardware supports increasing the power by enabling the following option. Check the supported hardware page to see if this is available and what cooling modifications can be made. By enabling this, you are risking perminant damage to your hardware, sometimes even when you add extra cooling. For example, R9M modules will burn out without cooling.</p>","title":"Output Power Limit"},{"location":"software/user-defines/#performance-options","text":"<p><pre><code>LOCK_ON_FIRST_CONNECTION\n</code></pre> RF Mode Locking - When the RX is waiting for a connection, it cycles through all available rates waiting for a connection on each one. By default, ExpressLRS will go back to this mode after a disconnect (failsafe). If <code>LOCK_ON_FIRST_CONNECTION</code> is used, ELRS will not cycle after a disconnect, but instead just stay on whatever rate the last connection was. This makes connection re-establishment quick, because the RX is always listening at the proper rate. This is generally what everyone wants, but there is utility in being able to switch the TX to the lowest rate to get more range to re-establish a link with a downed model, which can't happen if the RX is locked at the previous rate.</p> <p>When cycling through the rates, the RX starts with the fastest packet rate and works down to the slowest, then repeats. It waits <code>PACKET_INTERVAL * PACKS_PER_HOP * HOP_COUNT * 1.1</code> at each rate. Example: 4ms * 4 * 80 * 1.1 = 1.408s for 250Hz. The duration is extended 10x if a valid packet is received during that time. Even with <code>LOCK_ON_FIRST_CONNECTION</code>, the rate can be changed by changing the TX rate using ELRS.lua while connected, or by power cycling the RX.</p> <p><pre><code>FAN_MIN_RUNTIME=30\n</code></pre> For TX devices with fans, FAN_MIN_RUNTIME keeps the fan running even after the power level has dropped below the configured Fan Threshold. This prevents the fan from turning on and off every few seconds if the power level is constantly changing. Default is 30 seconds if not defined, value can be 0-254. There is always a short delay before the fan is activated, which can not be disabled. </p>","title":"Performance Options"},{"location":"software/user-defines/#compatability-options","text":"<p><pre><code>UART_INVERTED\n</code></pre> This only works with <code>ESP32</code> based TXes (will not work with modules without built-in inversion/uninversion), but enables compatibility with radios that output inverted CRSF, such as the FrSky QX7, TBS Tango 2, RadioMaster TX16S. You want to keep this enabled in most of the cases. If your radio is T8SG V2 or you use Deviation firmware turn this setting off.</p> <p><pre><code>RCVR_INVERT_TX\n</code></pre> This only works with <code>ESP8266/ESP8285</code> based RXes. Invert the TX pin in the receiver code to allow an inverted RX pin on the flight controller to be used (usually labeled SBUS input or RXI). Inverted CRSF output. RX pin (telemetry) is unaffected. Update via_BetaflightPassthrough will not work, only via_Wifi. Note that just because this description includes the word SBUS, it doesn't mean the RX will output SBUS. It is still CRSF protocol, only inverted, so CRSF should still be the receiver protocol selected in the flight controller software.</p> <p><pre><code>RCVR_UART_BAUD=420000\n</code></pre> Use a custom baud rate on the receiver instead of the default 420000 baud. This is useful for a KISS v1 FC (which runs at 400000) or any other oddball baud, like 115200 for interfacing with an Arduino.</p> <p><pre><code>USE_R9MM_R9MINI_SBUS\n</code></pre> This does not turn on SBUS protocol it simply changes the pin used for communication from those two side pins (A9 and A10) to use the pin labeled \"SBUS\" on the RX, which is inverted. This is useful for <code>F4 FCs</code> which only have an inverted receiver input UART RX. \ud83d\udd3c. This is only one way, so you lose the telemetry downlink to your radio as well as passthrough flashing. Enabling this turns on CRSF protocol output on the <code>S.BUS</code> \ud83d\ude8c pin on your <code>R9MM/R9Mini</code>. <code>set serialrx_inverted = ON</code> may also be needed within Betaflight \ud83d\udc1d for compatibility</p>","title":"Compatability Options"},{"location":"software/user-defines/#network-options","text":"<p><pre><code>AUTO_WIFI_ON_INTERVAL=30\n</code></pre> \u26a0\ufe0f Must be defined if you plan to update your RX over wifi without using a button on the RX \u26a0\ufe0f This will automatically turn the wifi \ud83d\udcf6 on for any module that has an <code>ESP8285</code> on it if no TX connection is established after N seconds from boot (the 30 is the time). This enables pushing firmware updates to the RX by connecting to its wifi network and visiting <code>http://10.0.0.1</code>.</p> <pre><code>HOME_WIFI_SSID\nHOME_WIFI_PASSWORD\n</code></pre> <p>These options set Home Network Access for your Wifi-enabled hardware. With these set, the devices will try connecting to your existing WiFi Network when you click on \"(Wifi) Update\" on the ExpressLRS Lua script (for some Tx Modules) or automatically after your set interval time. Once the devices connect to your Home WiFi, the Update page can be accessed anywhere, from any device on the same network. Tx Module Wifi update page can be reached using the address http://elrs_tx.local, while receivers' update page can be reached via http://elrs_rx.local.</p> <p>Wifi mode will first try to connect to the network specified before falling back and creating a new wifi network. The Home Network can also be modified from the webui.</p>","title":"Network Options"},{"location":"software/user-defines/#other-options","text":"<p><pre><code>JUST_BEEP_ONCE\nMY_STARTUP_MELODY=\"&lt;music string&gt;|&lt;bpm&gt;|&lt;semitone offset&gt;\" -or-\nMY_STARTUP_MELODY=\"&lt;rtttl string&gt;\"\n</code></pre> For TXes like the R9M, this sets if the TX only beeps one-time versus playing a startup song. Currently, it is set to play the startup song \ud83c\udfbc , but if you don't prefer it, uncomment this to turn it off. \u2716\ufe0f</p> <p>For all your customization needs, use <code>DMY_STARTUP_MELODY</code> to define your own startup melody using the BlHeli32 or RTTTL syntax. For BLHeli32, the parameters <code>music string</code> and <code>bpm</code> are required, whereas <code>semitone offset</code> is optional to transpose the entire melody up or down by the defined amount of semitones.</p> <p>Example BlHeli32 melodies are available on Rox Wolfs youtube channel, some experimentation may be required though.  To write your own melody, this (Sheet Music 101) and this (BLHeli Piano) are useful resources.</p> <p>The build process also supports RTTTL-formatted ringtone strings. RTTTL melodies are delimited by colons <code>:</code> and start with a description versus the BLHeli style with have pipes <code>|</code>. e.g. <code>Mario:d=4,o=5,b=100:32p,16e6,16e6,16p,16e6,16p,16c6,16e6,16p,16g6,8p,16p,16g</code></p> <p><pre><code>DISABLE_STARTUP_BEEP\n</code></pre> Disables beep sequence at startup of TX, but the TX will still beep when CRSF connection is acquired</p> <p><pre><code>DISABLE_ALL_BEEPS\n</code></pre> Disables all TX buzzer beeps at any state</p> <p><pre><code>USE_TX_BACKPACK\n</code></pre> Enables code for talking to a connected ESP8266 backpack on the TX module, and associated Lua params. The device target should enable this automatically for devices that come with this built-in, but can be added to any device. The TX backpack allows wireless integration with VRx modules and planned telemetry mirroring over wifi.</p>","title":"Other Options"},{"location":"software/user-defines/#debug-options","text":"<p><pre><code>DEBUG_LOG\n</code></pre> Turn on debug messages, sent to the TX Backpack UART if available or else right out the main CRSF UART (such as on the receiver).</p> <p><pre><code>DEBUG_LOG_VERBOSE\n</code></pre> Use to see verbose debug logging (spammy stuff)</p> <p><pre><code>DEBUG_RX_SCOREBOARD\n</code></pre> Print a letter for each packet received or missed (receiver debugging)</p> <p><pre><code>DEBUG_CRSF_NO_OUTPUT\n</code></pre> Don't send CRSF messages over the CRSF UART (receiver only). Used to only see logging and not logging mixed with CRSF.</p> <p><pre><code>DEBUG_RCVR_LINKSTATS\n</code></pre> Prints a log line for every channels packet recieved at the RX <code>ID,Antenna,RSSI,LQ,SNR,PWR,FHSS,TimingOffset</code>. The ID is generated on the TX side and overwrites CH1-CH4 and increments once for every channels packet. Writes directly to Serial, does not require DEBUG_LOG. Flash both TX &amp; RX with this enbled to use it if the ID is required.</p> <p><pre><code>DEBUG_FREQ_CORRECTION\n</code></pre> Enable reporting of RF FreqCorrection in RX's SNR LinkStatistics, also decreases packet rate on Team2.4 for the additional time needed to include the packet header / enable FreqCorrection. The current FreqCorrection value will be reported in RSNR in the LinkStats scaled -127 to +127, where 127 is the maximum allowable deviation. 200kHz for Team2.4, 100kHz for Team900. Dynamic power must be OFF, else it will adjust based on the FreqCorrection reported in SNR.</p>","title":"Debug Options"},{"location":"software/user-defines/#obsolete-user_defines","text":"<p>See Obsolete user_defines</p>","title":"Obsolete user_defines"},{"location":"software/testing/crc-testing/","text":"<p></p> <p>After performing CRC tests using the CRC-13 it was found that CRC basically includes parity checking so adding a seperate parity check was wasteful. CRC checking has now been updated to 14-bit.</p> <p>The following tests were performed using the new CRC-14 bit implementation with a polynomial of 0x372B, which gives a hamming distance of 6 in a 57-bit range. What this means is that it can detect up to 5 randomly flipped bits a message that is 57 bits long.</p> <p>Three stress tests have been performed on the 50-bit data with CRC-14. The tests create random data in 7 bytes (the first byte only has the lower 2 bits set) then perform random bit flipping based on three styles.</p> <p>Bear in mind that the CRC is not in the data and so is not subject to bit flipping.</p>","title":"CRC Testing"},{"location":"software/testing/crc-testing/#random-flipped-bits-within-14-bit-range","text":"<p>Anything over 14 is fairly useless as it will just flip bits back! <pre><code>1 : 0 out of 1000000 false positives, 0.000000%\n2 : 0 out of 1000000 false positives, 0.000000%\n3 : 0 out of 1000000 false positives, 0.000000%\n4 : 0 out of 1000000 false positives, 0.000000%\n5 : 0 out of 1000000 false positives, 0.000000%\n6 : 0 out of 1000000 false positives, 0.000000%\n7 : 0 out of 1000000 false positives, 0.000000%\n8 : 0 out of 1000000 false positives, 0.000000%\n9 : 0 out of 1000000 false positives, 0.000000%\n10 : 0 out of 1000000 false positives, 0.000000%\n11 : 0 out of 1000000 false positives, 0.000000%\n12 : 0 out of 1000000 false positives, 0.000000%\n13 : 0 out of 1000000 false positives, 0.000000%\n14 : 0 out of 1000000 false positives, 0.000000%\n15 : 0 out of 1000000 false positives, 0.000000%\n16 : 0 out of 1000000 false positives, 0.000000%\n17 : 0 out of 1000000 false positives, 0.000000%\n18 : 0 out of 1000000 false positives, 0.000000%\n19 : 0 out of 1000000 false positives, 0.000000%\n20 : 0 out of 1000000 false positives, 0.000000%\n21 : 0 out of 1000000 false positives, 0.000000%\n22 : 0 out of 1000000 false positives, 0.000000%\n23 : 0 out of 1000000 false positives, 0.000000%\n24 : 0 out of 1000000 false positives, 0.000000%\n25 : 0 out of 1000000 false positives, 0.000000%\n26 : 0 out of 1000000 false positives, 0.000000%\n27 : 0 out of 1000000 false positives, 0.000000%\n28 : 0 out of 1000000 false positives, 0.000000%\n29 : 0 out of 1000000 false positives, 0.000000%\n30 : 0 out of 1000000 false positives, 0.000000%\n</code></pre></p>","title":"Random flipped bits within 14-bit range"},{"location":"software/testing/crc-testing/#flipped-bits-in-a-single-sequence-at-random-start-position","text":"<p>The number 1-30 is the number of consecutive bits that are flipped at a random starting position. <pre><code>1 : 0 out of 1000000 false positives, 0.000000%\n2 : 0 out of 1000000 false positives, 0.000000%\n3 : 0 out of 1000000 false positives, 0.000000%\n4 : 0 out of 1000000 false positives, 0.000000%\n5 : 0 out of 1000000 false positives, 0.000000%\n6 : 0 out of 1000000 false positives, 0.000000%\n7 : 0 out of 1000000 false positives, 0.000000%\n8 : 0 out of 1000000 false positives, 0.000000%\n9 : 0 out of 1000000 false positives, 0.000000%\n10 : 0 out of 1000000 false positives, 0.000000%\n11 : 0 out of 1000000 false positives, 0.000000%\n12 : 0 out of 1000000 false positives, 0.000000%\n13 : 0 out of 1000000 false positives, 0.000000%\n14 : 0 out of 1000000 false positives, 0.000000%\n15 : 0 out of 1000000 false positives, 0.000000%\n16 : 0 out of 1000000 false positives, 0.000000%\n17 : 0 out of 1000000 false positives, 0.000000%\n18 : 0 out of 1000000 false positives, 0.000000%\n19 : 0 out of 1000000 false positives, 0.000000%\n20 : 0 out of 1000000 false positives, 0.000000%\n21 : 0 out of 1000000 false positives, 0.000000%\n22 : 0 out of 1000000 false positives, 0.000000%\n23 : 0 out of 1000000 false positives, 0.000000%\n24 : 0 out of 1000000 false positives, 0.000000%\n25 : 0 out of 1000000 false positives, 0.000000%\n26 : 0 out of 1000000 false positives, 0.000000%\n27 : 0 out of 1000000 false positives, 0.000000%\n28 : 0 out of 1000000 false positives, 0.000000%\n29 : 0 out of 1000000 false positives, 0.000000%\n30 : 0 out of 1000000 false positives, 0.000000%\n</code></pre></p>","title":"Flipped bits in a single sequence at random start position"},{"location":"software/testing/crc-testing/#randomly-flipped-bits","text":"<p>Interestingly this is where the hamming distance shows an any flipped bits less that HD6 are detected. Also this is where the built-in parity shows up as it detects the odd numbered bit flips. <pre><code>1 : 0 out of 1000000 false positives, 0.000000%\n2 : 0 out of 1000000 false positives, 0.000000%\n3 : 0 out of 1000000 false positives, 0.000000%\n4 : 0 out of 1000000 false positives, 0.000000%\n5 : 0 out of 1000000 false positives, 0.000000%\n6 : 101 out of 1000000 false positives, 0.010100%\n7 : 0 out of 1000000 false positives, 0.000000%\n8 : 134 out of 1000000 false positives, 0.013400%\n9 : 0 out of 1000000 false positives, 0.000000%\n10 : 129 out of 1000000 false positives, 0.012900%\n11 : 0 out of 1000000 false positives, 0.000000%\n12 : 123 out of 1000000 false positives, 0.012300%\n13 : 0 out of 1000000 false positives, 0.000000%\n14 : 116 out of 1000000 false positives, 0.011600%\n15 : 0 out of 1000000 false positives, 0.000000%\n16 : 106 out of 1000000 false positives, 0.010600%\n17 : 0 out of 1000000 false positives, 0.000000%\n18 : 113 out of 1000000 false positives, 0.011300%\n19 : 0 out of 1000000 false positives, 0.000000%\n20 : 118 out of 1000000 false positives, 0.011800%\n21 : 0 out of 1000000 false positives, 0.000000%\n22 : 131 out of 1000000 false positives, 0.013100%\n23 : 0 out of 1000000 false positives, 0.000000%\n24 : 102 out of 1000000 false positives, 0.010200%\n25 : 0 out of 1000000 false positives, 0.000000%\n26 : 111 out of 1000000 false positives, 0.011100%\n27 : 0 out of 1000000 false positives, 0.000000%\n28 : 159 out of 1000000 false positives, 0.015900%\n29 : 0 out of 1000000 false positives, 0.000000%\n30 : 116 out of 1000000 false positives, 0.011600%\n</code></pre></p>","title":"Randomly flipped bits"},{"location":"software/testing/crc-testing/#ota-testing","text":"<p>A 5hr OTA soak test was done at RSSI -108dBm (2.4GHz, 500Hz) and branch https://github.com/ExpressLRS/ExpressLRS/commit/e3ddcc.  RC data bytes were hard coded 0xAA and checked for CRC14 pass/fail, and the number of bits flipped counted.</p> <p>The below table columns are the number of bits flipped, crc passed tally, crc failed tally. Where passed means a bad packet that passes the CRC check and would accepted by the RX. On the <code>0</code> row, <code>Passed</code> is good, <code>Failed</code> is where the data is good, but the CRC itself was changed by bit-flips. <pre><code>CRC | Passed | Failed\n0   | 5589423 | 55438\n1   | 0 | 68262\n2   | 0 | 81015\n3   | 0 | 37478\n4   | 2 | 32449\n5   | 0 | 18546\n6   | 0 | 20082\n7   | 1 | 12697\n8   | 0 | 12433\n9   | 0 | 9803\n10   | 1 | 8899\n11   | 0 | 7462\n12   | 0 | 6105\n13   | 1 | 4720\n14   | 0 | 3858\n15   | 0 | 3170\n16   | 1 | 2673\n17   | 0 | 2159\n18   | 1 | 1980\n19   | 0 | 1746\n20   | 1 | 1703\n21   | 0 | 1449\n22   | 0 | 1332\n23   | 0 | 1076\n24   | 0 | 833\n25   | 0 | 565\n26   | 0 | 454\n27   | 0 | 353\n28   | 0 | 288\n29   | 0 | 210\n30   | 0 | 168\n31   | 0 | 92\n32   | 0 | 39\n33   | 0 | 25\n34   | 0 | 5\n35   | 0 | 2\n36   | 0 | 0\n37   | 0 | 0\n38   | 0 | 0\n39   | 0 | 0\n</code></pre></p> <p>1hr soak test at -100dBm <pre><code>CRC | Passed | Failed\n0   | 1450923 | 10\n1   | 0 | 6\n2   | 0 | 34\n3   | 0 | 5\n4   | 0 | 10\n5   | 0 | 1\n6   | 0 | 3\n7   | 0 | 2\n8   | 0 | 0\n9   | 0 | 1\n10   | 0 | 1\n11   | 0 | 3\n12   | 0 | 0\n13   | 0 | 0\n14   | 0 | 0\n15   | 0 | 0\n16   | 0 | 0\n17   | 0 | 0\n18   | 0 | 1\n19   | 0 | 0\n20   | 0 | 0\n21   | 0 | 0\n22   | 0 | 0\n23   | 0 | 0\n24   | 0 | 0\n25   | 0 | 0\n26   | 0 | 0\n27   | 0 | 0\n28   | 0 | 0\n29   | 0 | 0\n30   | 0 | 0\n31   | 0 | 0\n32   | 0 | 0\n33   | 0 | 0\n34   | 0 | 0\n35   | 0 | 0\n36   | 0 | 0\n37   | 0 | 0\n38   | 0 | 0\n39   | 0 | 0\n</code></pre></p>","title":"OTA Testing"},{"location":"software/testing/rx-scoreboard/","text":"<p></p> <p>The RX Scoreboard is a developer / troubleshooting feature that shows the outcome of every receiver packet cycle with a single character. Enable it with <code>-DPRINT_RX_SCOREBOARD</code> when compiling any RX environment and connect to the debug serial UART, usually the same as the CRSF output UART for most environments. </p> <p>\u26a0\ufe0f For that reason, it should not be enabled during normal RC control operation since it will get mixed in with real CRSF data sent to the FC.</p>","title":"RX Testing"},{"location":"software/testing/rx-scoreboard/#example-500hz-132-scoreboard","text":"<pre><code>RRRRRRRRRRRRRRRRRRRRRRRRRRRTRRRRRRRRRRRRRRRRRR_RRRRRRRRRRRRTRRRRRRRRRRRRRRRRRRR\nRRRRRRRRRRRRTRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRTRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRTRR\nRRRRRRRRRRRRRRRRRRRRRRRRRRRRRTRRRRRRRRRRR._RRRRRRRRRRRRRRRRRRTRRRRRRRRRRRRRRRRR\nRRRRRRRRRRRRRRTRRRRRRRRRRRRRRR_RRRRRRRRRRRRRRRTRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRT\nRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRTRRRRRRRRRRRRRRRR_RRRRRRRRRRRRRRTRRRRRRRRRRRRRRR\nRRRRRRRRRRRRRRRRTRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRTRRRRRRRRRRRRRRR__.RRRRRRRRRRRR\nRTRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRTRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRTRRRRRRRRRRRRR\nRRRRRRRRRRRRRRRRRRTRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRTRRRRRRRRRRRRRRRRRRRRRRRRRRRR\nRRRTRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRTRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRTRRRRRRRRRRR\nRRRRRRRRRRRRRRRRRRRRTRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRTRRRRRRRRRRRRRRRRRRRRRRRRRR\nRRRRRTRRRRRRRRRRRRRRRRRR_RRRRRRRRRRRRTRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRTRRRRRRRRR\nRRRRRRRRRRRRRRRRRRRRRRTRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRTRRRRRRRRRRRRRRRRRRRRRRRR\nRRRRRRRTRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRTRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRTRRRRRRR\nRRRRRRRRRRRRRRRRRRRRRRRRTRRRRRRRRRRRRRRRRRR_RRRRRRRRR.RRTRRRRRRRRRRRRRRRRRRRRRR\nRRRRRRRRRTRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRTRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRTRRRRR\nRRRRRRRRRRRRRRRRRRRRRRRRRRTRRRRRRRRRRR._RRRRRRRRRRRRRRRRRRTRRRRRRRR.RRRRRRRRRRR\nRRRRRRRRRRRTRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRTRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRTRRR\nRRRRRRRRRRRRRRRRRRRRRRRRRRRRTRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRTRRRRRRRRRRRRRRRRRR\nRRRRRRRRRRRRRTRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRTRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRTR\nRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRTRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRTRRRRRRRRRRRRRRRR\nRRRRRRRRRRRRRRRTRRRRsRRRRRRRRRRRRRRRRRRRRRRRRRRTRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR\nTRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRTRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRTRRRRRRRRRRRRRR\nRRRRRRRRRRRRRRRRRTRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR.TRRRRRRRRRRRRRRRRRRRRRRRRRRRRR\nRRTRRRRRRRRRRRRRRRRRR_RRRRRRRRRRRRTRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRTRRRRRRRRRRRR\nRRRRRRRRRRRRRRRRRRRTRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRTRRRRRRRRRRRRRRRRRRRRRRRRRRR\nRRRRTRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRTRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRTRRRRRRRRRR\nRRRRRRRRRRRRRRRRRRRRRTRRRRRRRRRRRRRRRRRR_RRRRRRRRRRRRTRRRRRRRRRRRRRRRRRRRRRRRRR\nRRRRRRTRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRTRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRTRRRRRRRR\nRRRRRRRRRRRRRRRRRRRRRRRTRRRRRRRRRRR._R_RRRRRRRRRRRRRRRRTRRRRRRRR.RRRRRRRRRRRRRR\nRRRRRRRRTRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRTRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRTRRRRRR\n</code></pre>","title":"Example 500Hz 1:32 Scoreboard"},{"location":"software/testing/rx-scoreboard/#character-legend","text":"Character Meaning Description     R Receive \u2714\ufe0f A valid RC sticks or MSP packet was received which passes all validation   T Telemetry \u2714\ufe0f Telemetry was successfully transmitted   s SYNC \u2714\ufe0f A valid SYNC packet was received. Sync packets come about once every 4 seconds, or more frequently around a telemetry ratio or packet rate change   _ Missing \u274c No packet was received at all yet one was expected \ud83d\udc7b   . CRC \u274c A packet was received but failed CRC check","title":"Character Legend"},{"location":"software/testing/rx-scoreboard/#name-origin","text":"<p>The term scoreboard originated from an Apache (web server) feature that would display the state of every worked as a single character in a text block. Thanks to them for the feature name and the dodecatillion web pages they've enabled serving.</p>","title":"Name Origin"},{"location":"software/testing/unit-testing/","text":"<p></p> <p>Assuming you have Visual Studio Code and platformio installed</p>","title":"Unit Testing"},{"location":"software/testing/unit-testing/#windows-prerequisite","text":"<p>Install mingw-w64 from https://sourceforge.net/projects/mingw-w64/files/Toolchains%20targetting%20Win32/Personal%20Builds/mingw-builds/installer/mingw-w64-install.exe/download</p> <p>In the windows search bar type <code>env</code> and select Edit the system environment variables</p> <p>Click the <code>Environment Variables...</code> button and in the <code>System variables</code> section double-click <code>Path</code> and click <code>New</code> then paste <code>C:\\Program Files (x86)\\mingw-w64\\i686-8.1.0-posix-dwarf-rt_v6-rev0\\mingw32\\bin</code>. This path may be different on your system, but it is the path that mingw-w64 was installed to previously.</p>","title":"Windows Prerequisite"},{"location":"software/testing/unit-testing/#running-the-tests","text":"<p>In VSCode with the ExpressLRS project open, click on the <code>New Terminal</code> button in the status bar</p> <p>Ensure the native platform is installed by entering <code>pio platform install native</code> in the terminal window.</p> <p>Now you can enter <code>pio test -e native</code> to run the tests.</p> <p>It also possible to use the pio module and select native/Advanced/Test in the target selection list.</p>","title":"Running the tests"},{"location":"software/updating/betaflight-passthrough/","text":"<p></p>","title":"Updating through BF Passthrough"},{"location":"software/updating/betaflight-passthrough/#general-instructions","text":"<p>Once you have Flashed ELRS onto your receivers they can be conveniently updating using the passthrough feature of Betaflight (and similar FC FW). This is a relatively simple process.</p> <ol> <li>Open VS Code or the configurator and prepare to compile and upload.  </li> <li>Plug in your FC to your computer, but do NOT connect to betaflight configurator.  </li> <li>Select <code>env:YOUR_RX_via_Betaflight_Passthrough</code> and hit upload.  </li> <li>That's it!</li> </ol>","title":"General Instructions"},{"location":"software/updating/betaflight-passthrough/#esp-specific-instructions","text":"<p>Since 1.0.0, ESP receivers can be updated via passthrough without using the boot button as long as the firmware is not corrupted. If you're unable to get it to work, your firmware might be corrupted, in which case you'll need to temporarily turn off the telemetry feature in betaflight. If it still doesn't work, the bootloader might be messed up and the following steps should work.</p> <ol> <li>Open VS Code or the configurator and prepare to compile and upload.  </li> <li>Plug in your FC to your computer, but do NOT connect to betaflight configurator and no NOT power the RX. If your RX gets powered from USB, desolder the power wire so that you can manually power it up independently of the flight controller.  </li> <li>Hold the boot button of the RX or jump the boot jumper.  </li> <li>Select <code>env:YOUR_RX_via_Betaflight_Passthrough</code> and hit upload.  </li> <li>Wait for the command line to show <code>.....-----</code>.  </li> <li>Plug in a battery or otherwise power up the RX.</li> </ol>","title":"ESP-Specific Instructions"},{"location":"software/updating/betaflight-passthrough/#troubleshooting","text":"<ul> <li>If it fails to flash (may display a success message but has errors show up above the final success output), check if it is flashing the correct COM. Sometimes an ethernet adapter on your motherboard will populate a COM port, which will confuse the script and it will attempt to flash to that COM. </li> <li>The solution that could work would be manually editing the <code>UARTUpload.py</code> and <code>BetaflightinitPassthrough.py</code> files in <code>src/python</code>.</li> <li>Another possible solution could be changing the COM to a higher number for the unnecessary COMs </li> <li>Sometimes the boot jumper or button must be used while powering up the receiver.</li> </ul>","title":"Troubleshooting"},{"location":"software/updating/betaflight-passthrough/#ardupilot-instructions-community-contribution-untested","text":"<p>Connect the autopilot to a PC using a USB cable and connect with a Ground Station (i.e. Mission Planner, QGC, etc). Set SERIAL_PASSTIMO to a length of time (in seconds) that gives you enough time to connect with the sensor\u2019s configuration software. 30 to 60 seconds is a good choice Set SERIAL_PASS2 to the number of the serial port connected to the sensor. I.e. \u201c2\u201d if the sensor is connected to Telem2/Serial2. Be sure to set each port\u2019s baud rate appropriately using the SERIALx_BAUD parameter. The rates may be different for each port. ArduPilot will do the buffering. Press the \u201cDisconnect\u201d button on the ground station but leave the USB cable from the PC to the autopilot connected. Open the sensor\u2019s configuration software and connect to the autopilot\u2019s COM port. If all goes well the configuration software should work as it does when the PC is directly connected to the sensor If the configuration fails to connect there are some things to try: Some configuration software will not allow connecting to the autopilot\u2019s COM port by default but may have a option to display all available COM ports If no serial messages are received from the PC the timeout will expire and SERIAL_PASS2 will revert to -1</p> <p>https://ardupilot.org/plane/docs/common-serial-passthrough.html</p>","title":"Ardupilot Instructions (community contribution, untested)"},{"location":"software/updating/wifi-updating/","text":"<p></p> <p>With the release of v2.0.0, there will be a total of 3 different Methods to flash your devices via WiFi</p>","title":"Wifi Updating"},{"location":"software/updating/wifi-updating/#method-1-hotspot","text":"<p>Build your firmware file, either via the ExpressLRS Configurator or PlatformIO. The ExpressLRS Configurator will open a folder for you where the correct firmware file was created and should be named like <code>&lt;target name&gt;-&lt;version&gt;.bin</code> (e.g. for the Happymodel ES24TX, the file will be <code>HappyModel_ES24TX_2400_TX-2.0.0.bin</code>). Meanwhile, PlatformIO should create the file within the <code>\\src\\.pio\\build\\&lt;target name&gt;\\</code> folder.</p> <p>Put your device in WiFi Updating mode. For TX modules, this is accomplished using the ExpressLRS Lua Script. Simply select <code>WiFi Update</code> from the script and it should start the Update Hotspot. For receivers, power the receiver and wait until <code>AUTO_WIFI_ON_INTERVAL</code> time has elapsed and that the LED on the receiver is blinking fast.</p> <p>Connect to the hotspot that the device has created. For Tx modules, this hotspot should show up as ExpressLRS TX while for receivers, the hotspot will have a name such as ExpressLRS RX. They have the same password: <code>expresslrs</code>. </p>  <p>Note</p> <p>The receivers, due to their respective sizes, doesn't have robust WiFi antennas and you will have to bring them closer to the device you're connecting from. The window that opens can easily be closed.</p>   <p></p>   <p></p>  <p>Navigate your browser to <code>http://10.0.0.1/</code> and the WiFi Update Page should show up.</p> <p>Using the <code>Choose File</code> button, navigate to the folder where the Firmware file is. You can also drag-and-drop the file from the folder window into the Choose File field.</p> <p></p> <p>Click the <code>Update</code> button adjacent to the Upload field, and the Update process should commence. A progress bar will be shown to show the status of the Update.</p> <p></p> <p>Once the Update process completes, a Popup should show the result of the Update. Normally, it will show the Success Message. Otherwise some info will be shown for the reason it failed, like wrong firmware file, old firmware or a wrong firmware file format.</p> <p></p> <p>DO NOT unplug/turn off the device yet. For Tx Modules, wait for the Lua Script to return to its Main Screen, indicating that the Tx Module has rebooted. For receivers, wait until the LED started blinking again, or you can even wait for it to activate WiFi Mode again for good measure.</p> <p>Additionally, using this same Wifi Update page, you can also configure the receiver to connect to your local Wifi Network, in preparation for the other (better) methods.</p> <p></p>","title":"Method 1: Hotspot"},{"location":"software/updating/wifi-updating/#method-2-home-network","text":"<p>This method will only work if the device has been configured to connect to the local Wifi Network, either via the Join Network section in the Hotspot, or it's flashed with a firmware with the Home WiFi Network SSID and Password options set.</p> <p>Build your firmware file, either via the ExpressLRS Configurator or PlatformIO. The ExpressLRS Configurator will open a folder for you where the correct firmware file was created and should be named like <code>&lt;target name&gt;-&lt;version&gt;.bin</code> (e.g. for the Happymodel ES24TX, the file will be <code>HappyModel_ES24TX_2400_TX-2.0.0.bin</code>). Meanwhile, PlatformIO should create the file within the <code>\\src\\.pio\\build\\&lt;target name&gt;\\</code>.</p> <p>Put your device in WiFi Updating mode. For TX modules, this is accomplished using the ExpressLRS Lua Script. Simply select <code>WiFi Update</code> from the script and it should connect to your WiFi Network. For receivers, power the receiver and wait until <code>AUTO_WIFI_ON_INTERVAL</code> time has elapsed and that the LED on the receiver is blinking fast.</p> <p>Using your browser, navigate to the Wifi Update page. For TX Modules, this should be <code>http://elrs_tx.local</code> while for receivers, the url should be <code>http://elrs_rx.local</code>.</p> <p>Using the <code>Choose File</code> button, navigate to the folder where the Firmware file is. You can also drag-and-drop the file from the folder window into the Choose File field.</p> <p></p> <p>Click the <code>Update</code> button adjacent to the Upload field, and the Update process should commence. A progress bar will be shown to show the status of the Update.</p> <p></p> <p>Once the Update process completes, a Popup should show the result of the Update. Normally, it will show the Success Message. Otherwise some info will be shown for the reason it failed, like wrong firmware file, old firmware or a wrong firmware file format.</p> <p></p> <p>DO NOT unplug/turn off the device yet. For Tx Modules, wait for the Lua Script to return to its Main Screen, indicating that the Tx Module has rebooted. For receivers, wait until the LED started blinking again, or you can even wait for it to activate WiFi Mode again for good measure.</p>","title":"Method 2: Home Network"},{"location":"software/updating/wifi-updating/#method-3-build-and-flash","text":"<p>This method will only work if the device has been configured to connect to the local Wifi Network, either via the Join Network section in the Hotspot, or it's flashed with a firmware with the Home WiFi Network SSID and Password options set.</p> <p>Put your device in WiFi Updating mode. For TX modules, this is accomplished using the ExpressLRS Lua Script. Simply select <code>WiFi Update</code> from the script and it should start the Update Hotspot. For receivers, power the receiver and wait until <code>AUTO_WIFI_ON_INTERVAL</code> time has elapsed and that the LED on the receiver is blinking fast. </p> <p>Set your User Defines or Firmware Options. Make sure you've selected the correct Target.</p> <p>With PlatformIO, select Upload with the Wifi Target. With the ExpressLRS Configurator, click Build and Flash. Wait for the Compile to finish and you should see a section of the log like the image below:</p> <p></p> <p>DO NOT unplug/turn off the device yet. For Tx Modules, wait for the Lua Script to return to its Main Screen, indicating that the Tx Module has rebooted. For receivers, wait until the LED started blinking again, or you can even wait for it to activate WiFi Mode again for good measure.</p>","title":"Method 3: Build and Flash"}]})